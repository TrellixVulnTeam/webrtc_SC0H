; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\Develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_CopyPlane
PUBLIC	_CopyPlane_16
PUBLIC	_SetPlane
PUBLIC	_I400ToI400
PUBLIC	_I422Copy
PUBLIC	_I444Copy
PUBLIC	_YUY2ToI422
PUBLIC	_UYVYToI422
PUBLIC	_YUY2ToNV12
PUBLIC	_UYVYToNV12
PUBLIC	_I420ToI400
PUBLIC	_I420Mirror
PUBLIC	_I400Mirror
PUBLIC	_ARGBMirror
PUBLIC	_NV12ToRGB565
PUBLIC	_I422ToBGRA
PUBLIC	_I422ToRGBA
PUBLIC	_RAWToRGB24
PUBLIC	_I420Rect
PUBLIC	_ARGBRect
PUBLIC	_ARGBGrayTo
PUBLIC	_ARGBGray
PUBLIC	_ARGBSepia
PUBLIC	_ARGBColorMatrix
PUBLIC	_RGBColorMatrix
PUBLIC	_ARGBColorTable
PUBLIC	_RGBColorTable
PUBLIC	_ARGBLumaColorTable
PUBLIC	_ARGBPolynomial
PUBLIC	_ARGBQuantize
PUBLIC	_ARGBCopyAlpha
PUBLIC	_ARGBCopyYToAlpha
PUBLIC	_GetARGBBlend
PUBLIC	_ARGBBlend
PUBLIC	_BlendPlane
PUBLIC	_I420Blend
PUBLIC	_ARGBMultiply
PUBLIC	_ARGBAdd
PUBLIC	_ARGBSubtract
PUBLIC	_ARGBAttenuate
PUBLIC	_ARGBUnattenuate
PUBLIC	_ARGBComputeCumulativeSum
PUBLIC	_ARGBBlur
PUBLIC	_ARGBShade
PUBLIC	_InterpolatePlane
PUBLIC	_ARGBInterpolate
PUBLIC	_I420Interpolate
PUBLIC	_ARGBShuffle
PUBLIC	_ARGBSobelToPlane
PUBLIC	_ARGBSobel
PUBLIC	_ARGBSobelXY
PUBLIC	_MirrorPlane
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_InitCpuFlags:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_ARGBToYJRow_AVX2:PROC
EXTRN	_ARGBToYJRow_Any_AVX2:PROC
EXTRN	_ARGBToYJRow_SSSE3:PROC
EXTRN	_ARGBToYJRow_C:PROC
EXTRN	_ARGBToYJRow_Any_SSSE3:PROC
EXTRN	_MirrorRow_AVX2:PROC
EXTRN	_MirrorRow_SSSE3:PROC
EXTRN	_MirrorRow_C:PROC
EXTRN	_MirrorRow_Any_AVX2:PROC
EXTRN	_MirrorRow_Any_SSSE3:PROC
EXTRN	_ARGBMirrorRow_AVX2:PROC
EXTRN	_ARGBMirrorRow_SSE2:PROC
EXTRN	_ARGBMirrorRow_C:PROC
EXTRN	_ARGBMirrorRow_Any_AVX2:PROC
EXTRN	_ARGBMirrorRow_Any_SSE2:PROC
EXTRN	_SplitUVRow_C:PROC
EXTRN	_SplitUVRow_SSE2:PROC
EXTRN	_SplitUVRow_AVX2:PROC
EXTRN	_SplitUVRow_Any_SSE2:PROC
EXTRN	_SplitUVRow_Any_AVX2:PROC
EXTRN	_CopyRow_SSE2:PROC
EXTRN	_CopyRow_AVX:PROC
EXTRN	_CopyRow_ERMS:PROC
EXTRN	_CopyRow_C:PROC
EXTRN	_CopyRow_Any_SSE2:PROC
EXTRN	_CopyRow_Any_AVX:PROC
EXTRN	_CopyRow_16_C:PROC
EXTRN	_ARGBCopyAlphaRow_C:PROC
EXTRN	_ARGBCopyAlphaRow_SSE2:PROC
EXTRN	_ARGBCopyAlphaRow_AVX2:PROC
EXTRN	_ARGBCopyAlphaRow_Any_SSE2:PROC
EXTRN	_ARGBCopyAlphaRow_Any_AVX2:PROC
EXTRN	_ARGBCopyYToAlphaRow_C:PROC
EXTRN	_ARGBCopyYToAlphaRow_SSE2:PROC
EXTRN	_ARGBCopyYToAlphaRow_AVX2:PROC
EXTRN	_ARGBCopyYToAlphaRow_Any_SSE2:PROC
EXTRN	_ARGBCopyYToAlphaRow_Any_AVX2:PROC
EXTRN	_SetRow_C:PROC
EXTRN	_SetRow_X86:PROC
EXTRN	_SetRow_ERMS:PROC
EXTRN	_SetRow_Any_X86:PROC
EXTRN	_ARGBSetRow_C:PROC
EXTRN	_ARGBSetRow_X86:PROC
EXTRN	_ARGBShuffleRow_C:PROC
EXTRN	_ARGBShuffleRow_SSE2:PROC
EXTRN	_ARGBShuffleRow_SSSE3:PROC
EXTRN	_ARGBShuffleRow_AVX2:PROC
EXTRN	_ARGBShuffleRow_Any_SSE2:PROC
EXTRN	_ARGBShuffleRow_Any_SSSE3:PROC
EXTRN	_ARGBShuffleRow_Any_AVX2:PROC
EXTRN	_RAWToRGB24Row_SSSE3:PROC
EXTRN	_RAWToRGB24Row_C:PROC
EXTRN	_RAWToRGB24Row_Any_SSSE3:PROC
EXTRN	_NV12ToRGB565Row_C:PROC
EXTRN	_I422ToRGBARow_C:PROC
EXTRN	_I422ToRGBARow_AVX2:PROC
EXTRN	_NV12ToRGB565Row_SSSE3:PROC
EXTRN	_NV12ToRGB565Row_AVX2:PROC
EXTRN	_I422ToRGBARow_SSSE3:PROC
EXTRN	_I422ToRGBARow_Any_AVX2:PROC
EXTRN	_NV12ToRGB565Row_Any_SSSE3:PROC
EXTRN	_NV12ToRGB565Row_Any_AVX2:PROC
EXTRN	_I422ToRGBARow_Any_SSSE3:PROC
EXTRN	_ARGBBlendRow_SSSE3:PROC
EXTRN	_ARGBBlendRow_C:PROC
EXTRN	_BlendPlaneRow_SSSE3:PROC
EXTRN	_BlendPlaneRow_Any_SSSE3:PROC
EXTRN	_BlendPlaneRow_AVX2:PROC
EXTRN	_BlendPlaneRow_Any_AVX2:PROC
EXTRN	_BlendPlaneRow_C:PROC
EXTRN	_ARGBMultiplyRow_C:PROC
EXTRN	_ARGBMultiplyRow_SSE2:PROC
EXTRN	_ARGBMultiplyRow_Any_SSE2:PROC
EXTRN	_ARGBMultiplyRow_AVX2:PROC
EXTRN	_ARGBMultiplyRow_Any_AVX2:PROC
EXTRN	_ARGBAddRow_C:PROC
EXTRN	_ARGBAddRow_SSE2:PROC
EXTRN	_ARGBAddRow_AVX2:PROC
EXTRN	_ARGBAddRow_Any_AVX2:PROC
EXTRN	_ARGBSubtractRow_C:PROC
EXTRN	_ARGBSubtractRow_SSE2:PROC
EXTRN	_ARGBSubtractRow_Any_SSE2:PROC
EXTRN	_ARGBSubtractRow_AVX2:PROC
EXTRN	_ARGBSubtractRow_Any_AVX2:PROC
EXTRN	_YUY2ToYRow_AVX2:PROC
EXTRN	_YUY2ToUV422Row_AVX2:PROC
EXTRN	_YUY2ToYRow_SSE2:PROC
EXTRN	_YUY2ToUV422Row_SSE2:PROC
EXTRN	_YUY2ToYRow_C:PROC
EXTRN	_YUY2ToUV422Row_C:PROC
EXTRN	_YUY2ToYRow_Any_AVX2:PROC
EXTRN	_YUY2ToUV422Row_Any_AVX2:PROC
EXTRN	_YUY2ToYRow_Any_SSE2:PROC
EXTRN	_YUY2ToUV422Row_Any_SSE2:PROC
EXTRN	_UYVYToYRow_AVX2:PROC
EXTRN	_UYVYToUV422Row_AVX2:PROC
EXTRN	_UYVYToYRow_SSE2:PROC
EXTRN	_UYVYToUV422Row_SSE2:PROC
EXTRN	_UYVYToYRow_C:PROC
EXTRN	_UYVYToUV422Row_C:PROC
EXTRN	_UYVYToYRow_Any_AVX2:PROC
EXTRN	_UYVYToUV422Row_Any_AVX2:PROC
EXTRN	_UYVYToYRow_Any_SSE2:PROC
EXTRN	_UYVYToUV422Row_Any_SSE2:PROC
EXTRN	_ARGBAttenuateRow_C:PROC
EXTRN	_ARGBAttenuateRow_SSSE3:PROC
EXTRN	_ARGBAttenuateRow_AVX2:PROC
EXTRN	_ARGBAttenuateRow_Any_SSSE3:PROC
EXTRN	_ARGBAttenuateRow_Any_AVX2:PROC
EXTRN	_ARGBUnattenuateRow_C:PROC
EXTRN	_ARGBUnattenuateRow_SSE2:PROC
EXTRN	_ARGBUnattenuateRow_AVX2:PROC
EXTRN	_ARGBUnattenuateRow_Any_SSE2:PROC
EXTRN	_ARGBUnattenuateRow_Any_AVX2:PROC
EXTRN	_ARGBGrayRow_C:PROC
EXTRN	_ARGBGrayRow_SSSE3:PROC
EXTRN	_ARGBSepiaRow_C:PROC
EXTRN	_ARGBSepiaRow_SSSE3:PROC
EXTRN	_ARGBColorMatrixRow_C:PROC
EXTRN	_ARGBColorMatrixRow_SSSE3:PROC
EXTRN	_ARGBColorTableRow_C:PROC
EXTRN	_ARGBColorTableRow_X86:PROC
EXTRN	_RGBColorTableRow_C:PROC
EXTRN	_RGBColorTableRow_X86:PROC
EXTRN	_ARGBQuantizeRow_C:PROC
EXTRN	_ARGBQuantizeRow_SSE2:PROC
EXTRN	_ARGBShadeRow_C:PROC
EXTRN	_ARGBShadeRow_SSE2:PROC
EXTRN	_CumulativeSumToAverageRow_SSE2:PROC
EXTRN	_ComputeCumulativeSumRow_SSE2:PROC
EXTRN	_CumulativeSumToAverageRow_C:PROC
EXTRN	_ComputeCumulativeSumRow_C:PROC
EXTRN	_InterpolateRow_C:PROC
EXTRN	_InterpolateRow_SSSE3:PROC
EXTRN	_InterpolateRow_AVX2:PROC
EXTRN	_InterpolateRow_Any_SSSE3:PROC
EXTRN	_InterpolateRow_Any_AVX2:PROC
EXTRN	_SobelXRow_C:PROC
EXTRN	_SobelXRow_SSE2:PROC
EXTRN	_SobelYRow_C:PROC
EXTRN	_SobelYRow_SSE2:PROC
EXTRN	_SobelRow_C:PROC
EXTRN	_SobelRow_SSE2:PROC
EXTRN	_SobelToPlaneRow_C:PROC
EXTRN	_SobelToPlaneRow_SSE2:PROC
EXTRN	_SobelXYRow_C:PROC
EXTRN	_SobelXYRow_SSE2:PROC
EXTRN	_SobelRow_Any_SSE2:PROC
EXTRN	_SobelToPlaneRow_Any_SSE2:PROC
EXTRN	_SobelXYRow_Any_SSE2:PROC
EXTRN	_ARGBPolynomialRow_C:PROC
EXTRN	_ARGBPolynomialRow_SSE2:PROC
EXTRN	_ARGBPolynomialRow_AVX2:PROC
EXTRN	_ARGBLumaColorTableRow_C:PROC
EXTRN	_ARGBLumaColorTableRow_SSSE3:PROC
EXTRN	_ScaleRowDown2Box_C:PROC
EXTRN	_ScaleRowDown2Box_Odd_C:PROC
EXTRN	_ScaleRowDown2Box_SSSE3:PROC
EXTRN	_ScaleRowDown2Box_AVX2:PROC
EXTRN	_ScaleRowDown2Box_Any_SSSE3:PROC
EXTRN	_ScaleRowDown2Box_Odd_SSSE3:PROC
EXTRN	_ScaleRowDown2Box_Any_AVX2:PROC
EXTRN	_ScaleRowDown2Box_Odd_AVX2:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_cpu_info_:DWORD
EXTRN	_kYuvI601Constants:BYTE
EXTRN	_kYvuI601Constants:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSobelize
_TEXT	SEGMENT
_row_yt$1 = -60						; size = 4
_row_y2$2 = -56						; size = 4
_row_y1$3 = -52						; size = 4
_row_y0$4 = -48						; size = 4
_row_y$5 = -44						; size = 4
_row_sobely$6 = -40					; size = 4
_row_sobelx$7 = -36					; size = 4
_rows$8 = -32						; size = 4
_rows_mem$9 = -28					; size = 4
_kRowSize$10 = -24					; size = 4
_kEdge$ = -20						; size = 4
_SobelXRow$ = -16					; size = 4
_SobelYRow$ = -12					; size = 4
_ARGBToYJRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_SobelRow$ = 32						; size = 4
_ARGBSobelize PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2048
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2050
	mov	DWORD PTR _ARGBToYJRow$[ebp], OFFSET _ARGBToYJRow_C
; Line 2052
	mov	DWORD PTR _SobelYRow$[ebp], OFFSET _SobelYRow_C
; Line 2054
	mov	DWORD PTR _SobelXRow$[ebp], OFFSET _SobelXRow_C
; Line 2057
	mov	DWORD PTR _kEdge$[ebp], 16		; 00000010H
; Line 2058
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN12@ARGBSobeli
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN12@ARGBSobeli
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN12@ARGBSobeli
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN13@ARGBSobeli
$LN12@ARGBSobeli:
; Line 2059
	or	eax, -1
	jmp	$LN14@ARGBSobeli
$LN13@ARGBSobeli:
; Line 2062
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN11@ARGBSobeli
; Line 2063
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 2064
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 2065
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN11@ARGBSobeli:
; Line 2069
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@ARGBSobeli
; Line 2070
	mov	DWORD PTR _ARGBToYJRow$[ebp], OFFSET _ARGBToYJRow_Any_SSSE3
; Line 2071
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN10@ARGBSobeli
; Line 2072
	mov	DWORD PTR _ARGBToYJRow$[ebp], OFFSET _ARGBToYJRow_SSSE3
$LN10@ARGBSobeli:
; Line 2077
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@ARGBSobeli
; Line 2078
	mov	DWORD PTR _ARGBToYJRow$[ebp], OFFSET _ARGBToYJRow_Any_AVX2
; Line 2079
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 31					; 0000001fH
	jne	SHORT $LN8@ARGBSobeli
; Line 2080
	mov	DWORD PTR _ARGBToYJRow$[ebp], OFFSET _ARGBToYJRow_AVX2
$LN8@ARGBSobeli:
; Line 2094
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@ARGBSobeli
; Line 2095
	mov	DWORD PTR _SobelYRow$[ebp], OFFSET _SobelYRow_SSE2
$LN6@ARGBSobeli:
; Line 2104
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBSobeli
; Line 2105
	mov	DWORD PTR _SobelXRow$[ebp], OFFSET _SobelXRow_SSE2
$LN5@ARGBSobeli:
; Line 2115
	mov	edx, DWORD PTR _width$[ebp]
	add	edx, 47					; 0000002fH
	and	edx, -32				; ffffffe0H
	mov	DWORD PTR _kRowSize$10[ebp], edx
; Line 2116
	imul	eax, DWORD PTR _kRowSize$10[ebp], 3
	mov	ecx, DWORD PTR _kRowSize$10[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+95]
	push	edx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _rows_mem$9[ebp], eax
	mov	eax, DWORD PTR _rows_mem$9[ebp]
	add	eax, 63					; 0000003fH
	and	eax, -64				; ffffffc0H
	mov	DWORD PTR _rows$8[ebp], eax
; Line 2117
	mov	ecx, DWORD PTR _rows$8[ebp]
	mov	DWORD PTR _row_sobelx$7[ebp], ecx
; Line 2118
	mov	edx, DWORD PTR _rows$8[ebp]
	add	edx, DWORD PTR _kRowSize$10[ebp]
	mov	DWORD PTR _row_sobely$6[ebp], edx
; Line 2119
	mov	eax, DWORD PTR _kRowSize$10[ebp]
	mov	ecx, DWORD PTR _rows$8[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _row_y$5[ebp], edx
; Line 2122
	mov	eax, DWORD PTR _row_y$5[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _row_y0$4[ebp], eax
; Line 2123
	mov	ecx, DWORD PTR _row_y0$4[ebp]
	add	ecx, DWORD PTR _kRowSize$10[ebp]
	mov	DWORD PTR _row_y1$3[ebp], ecx
; Line 2124
	mov	edx, DWORD PTR _row_y1$3[ebp]
	add	edx, DWORD PTR _kRowSize$10[ebp]
	mov	DWORD PTR _row_y2$2[ebp], edx
; Line 2125
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row_y0$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb$[ebp]
	push	edx
	call	DWORD PTR _ARGBToYJRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2126
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, -1
	mov	edx, DWORD PTR _row_y0$4[ebp]
	mov	esi, DWORD PTR _row_y0$4[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
; Line 2127
	push	16					; 00000010H
	mov	edx, DWORD PTR _row_y0$4[ebp]
	add	edx, DWORD PTR _width$[ebp]
	movzx	eax, BYTE PTR [edx-1]
	push	eax
	mov	ecx, DWORD PTR _row_y0$4[ebp]
	add	ecx, DWORD PTR _width$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2128
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _row_y1$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBToYJRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2129
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, 1
	imul	edx, ecx, -1
	mov	ecx, DWORD PTR _row_y1$3[ebp]
	mov	esi, DWORD PTR _row_y1$3[ebp]
	mov	al, BYTE PTR [esi+eax]
	mov	BYTE PTR [ecx+edx], al
; Line 2130
	push	16					; 00000010H
	mov	ecx, DWORD PTR _row_y1$3[ebp]
	add	ecx, DWORD PTR _width$[ebp]
	movzx	edx, BYTE PTR [ecx-1]
	push	edx
	mov	eax, DWORD PTR _row_y1$3[ebp]
	add	eax, DWORD PTR _width$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2131
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _row_y2$2[ebp]
	add	ecx, DWORD PTR _width$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2133
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@ARGBSobeli
$LN3@ARGBSobeli:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN4@ARGBSobeli:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN2@ARGBSobeli
; Line 2135
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _y$[ebp], ecx
	jge	SHORT $LN1@ARGBSobeli
; Line 2136
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
$LN1@ARGBSobeli:
; Line 2138
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row_y2$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb$[ebp]
	push	edx
	call	DWORD PTR _ARGBToYJRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2139
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, 1
	imul	eax, edx, -1
	mov	edx, DWORD PTR _row_y2$2[ebp]
	mov	esi, DWORD PTR _row_y2$2[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
; Line 2140
	mov	edx, DWORD PTR _row_y2$2[ebp]
	add	edx, DWORD PTR _width$[ebp]
	mov	eax, DWORD PTR _row_y2$2[ebp]
	add	eax, DWORD PTR _width$[ebp]
	mov	cl, BYTE PTR [eax-1]
	mov	BYTE PTR [edx], cl
; Line 2142
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _row_sobelx$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _row_y2$2[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _row_y1$3[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _row_y0$4[ebp]
	sub	eax, 1
	push	eax
	call	DWORD PTR _SobelXRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2143
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _row_sobely$6[ebp]
	push	edx
	mov	eax, DWORD PTR _row_y2$2[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _row_y0$4[ebp]
	sub	ecx, 1
	push	ecx
	call	DWORD PTR _SobelYRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2144
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _row_sobely$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _row_sobelx$7[ebp]
	push	edx
	call	DWORD PTR _SobelRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2148
	mov	eax, DWORD PTR _row_y0$4[ebp]
	mov	DWORD PTR _row_yt$1[ebp], eax
; Line 2149
	mov	ecx, DWORD PTR _row_y1$3[ebp]
	mov	DWORD PTR _row_y0$4[ebp], ecx
; Line 2150
	mov	edx, DWORD PTR _row_y2$2[ebp]
	mov	DWORD PTR _row_y1$3[ebp], edx
; Line 2151
	mov	eax, DWORD PTR _row_yt$1[ebp]
	mov	DWORD PTR _row_y2$2[ebp], eax
; Line 2154
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 2155
	jmp	$LN3@ARGBSobeli
$LN2@ARGBSobeli:
; Line 2156
	mov	edx, DWORD PTR _rows_mem$9[ebp]
	push	edx
	call	_free
	add	esp, 4
	mov	DWORD PTR _rows$8[ebp], 0
; Line 2158
	xor	eax, eax
$LN14@ARGBSobeli:
; Line 2159
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSobelize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I422ToRGBAMatrix
_TEXT	SEGMENT
_I422ToRGBARow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_rgba$ = 32						; size = 4
_dst_stride_rgba$ = 36					; size = 4
_yuvconstants$ = 40					; size = 4
_width$ = 44						; size = 4
_height$ = 48						; size = 4
_I422ToRGBAMatrix PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 947
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 949
	mov	DWORD PTR _I422ToRGBARow$[ebp], OFFSET _I422ToRGBARow_C
; Line 956
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN9@I422ToRGBA
	cmp	DWORD PTR _src_u$[ebp], 0
	je	SHORT $LN9@I422ToRGBA
	cmp	DWORD PTR _src_v$[ebp], 0
	je	SHORT $LN9@I422ToRGBA
	cmp	DWORD PTR _dst_rgba$[ebp], 0
	je	SHORT $LN9@I422ToRGBA
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN9@I422ToRGBA
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN10@I422ToRGBA
$LN9@I422ToRGBA:
; Line 957
	or	eax, -1
	jmp	$LN11@I422ToRGBA
$LN10@I422ToRGBA:
; Line 960
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN8@I422ToRGBA
; Line 961
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 962
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_rgba$[ebp]
	add	ecx, DWORD PTR _dst_rgba$[ebp]
	mov	DWORD PTR _dst_rgba$[ebp], ecx
; Line 963
	mov	edx, DWORD PTR _dst_stride_rgba$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_rgba$[ebp], edx
$LN8@I422ToRGBA:
; Line 966
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@I422ToRGBA
; Line 967
	mov	DWORD PTR _I422ToRGBARow$[ebp], OFFSET _I422ToRGBARow_Any_SSSE3
; Line 968
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 7
	jne	SHORT $LN7@I422ToRGBA
; Line 969
	mov	DWORD PTR _I422ToRGBARow$[ebp], OFFSET _I422ToRGBARow_SSSE3
$LN7@I422ToRGBA:
; Line 974
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@I422ToRGBA
; Line 975
	mov	DWORD PTR _I422ToRGBARow$[ebp], OFFSET _I422ToRGBARow_Any_AVX2
; Line 976
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN5@I422ToRGBA
; Line 977
	mov	DWORD PTR _I422ToRGBARow$[ebp], OFFSET _I422ToRGBARow_AVX2
$LN5@I422ToRGBA:
; Line 999
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@I422ToRGBA
$LN2@I422ToRGBA:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@I422ToRGBA:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@I422ToRGBA
; Line 1000
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yuvconstants$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_rgba$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	DWORD PTR _I422ToRGBARow$[ebp]
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1001
	mov	ecx, DWORD PTR _dst_rgba$[ebp]
	add	ecx, DWORD PTR _dst_stride_rgba$[ebp]
	mov	DWORD PTR _dst_rgba$[ebp], ecx
; Line 1002
	mov	edx, DWORD PTR _src_y$[ebp]
	add	edx, DWORD PTR _src_stride_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], edx
; Line 1003
	mov	eax, DWORD PTR _src_u$[ebp]
	add	eax, DWORD PTR _src_stride_u$[ebp]
	mov	DWORD PTR _src_u$[ebp], eax
; Line 1004
	mov	ecx, DWORD PTR _src_v$[ebp]
	add	ecx, DWORD PTR _src_stride_v$[ebp]
	mov	DWORD PTR _src_v$[ebp], ecx
; Line 1005
	jmp	SHORT $LN2@I422ToRGBA
$LN1@I422ToRGBA:
; Line 1006
	xor	eax, eax
$LN11@I422ToRGBA:
; Line 1007
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I422ToRGBAMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _MirrorPlane
_TEXT	SEGMENT
_MirrorRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_MirrorPlane PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 226
	mov	DWORD PTR _MirrorRow$[ebp], OFFSET _MirrorRow_C
; Line 228
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN8@MirrorPlan
; Line 229
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 230
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 231
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
$LN8@MirrorPlan:
; Line 242
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@MirrorPlan
; Line 243
	mov	DWORD PTR _MirrorRow$[ebp], OFFSET _MirrorRow_Any_SSSE3
; Line 244
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN7@MirrorPlan
; Line 245
	mov	DWORD PTR _MirrorRow$[ebp], OFFSET _MirrorRow_SSSE3
$LN7@MirrorPlan:
; Line 250
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@MirrorPlan
; Line 251
	mov	DWORD PTR _MirrorRow$[ebp], OFFSET _MirrorRow_Any_AVX2
; Line 252
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 31					; 0000001fH
	jne	SHORT $LN5@MirrorPlan
; Line 253
	mov	DWORD PTR _MirrorRow$[ebp], OFFSET _MirrorRow_AVX2
$LN5@MirrorPlan:
; Line 267
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@MirrorPlan
$LN2@MirrorPlan:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@MirrorPlan:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN9@MirrorPlan
; Line 268
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	DWORD PTR _MirrorRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 269
	mov	ecx, DWORD PTR _src_y$[ebp]
	add	ecx, DWORD PTR _src_stride_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 270
	mov	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 271
	jmp	SHORT $LN2@MirrorPlan
$LN9@MirrorPlan:
; Line 272
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_MirrorPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _TestCpuFlag
_TEXT	SEGMENT
tv66 = -4						; size = 4
_test_flag$ = 8						; size = 4
_TestCpuFlag PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\include\libyuv\cpu_id.h
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 59
	cmp	DWORD PTR _cpu_info_, 0
	jne	SHORT $LN3@TestCpuFla
	call	_InitCpuFlags
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@TestCpuFla
$LN3@TestCpuFla:
	mov	eax, DWORD PTR _cpu_info_
	mov	DWORD PTR tv66[ebp], eax
$LN4@TestCpuFla:
	mov	eax, DWORD PTR tv66[ebp]
	and	eax, DWORD PTR _test_flag$[ebp]
; Line 60
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TestCpuFlag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSobelXY
_TEXT	SEGMENT
_SobelXYRow$ = -4					; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBSobelXY PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2220
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2221
	mov	DWORD PTR _SobelXYRow$[ebp], OFFSET _SobelXYRow_C
; Line 2224
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@ARGBSobelX
; Line 2225
	mov	DWORD PTR _SobelXYRow$[ebp], OFFSET _SobelXYRow_Any_SSE2
; Line 2226
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN2@ARGBSobelX
; Line 2227
	mov	DWORD PTR _SobelXYRow$[ebp], OFFSET _SobelXYRow_SSE2
$LN2@ARGBSobelX:
; Line 2240
	mov	ecx, DWORD PTR _SobelXYRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	_ARGBSobelize
	add	esp, 28					; 0000001cH
; Line 2241
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSobelXY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSobel
_TEXT	SEGMENT
_SobelRow$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBSobel PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2166
	mov	DWORD PTR _SobelRow$[ebp], OFFSET _SobelRow_C
; Line 2169
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@ARGBSobel
; Line 2170
	mov	DWORD PTR _SobelRow$[ebp], OFFSET _SobelRow_Any_SSE2
; Line 2171
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN2@ARGBSobel
; Line 2172
	mov	DWORD PTR _SobelRow$[ebp], OFFSET _SobelRow_SSE2
$LN2@ARGBSobel:
; Line 2185
	mov	ecx, DWORD PTR _SobelRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	_ARGBSobelize
	add	esp, 28					; 0000001cH
; Line 2186
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSobel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSobelToPlane
_TEXT	SEGMENT
_SobelToPlaneRow$ = -4					; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBSobelToPlane PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2192
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2193
	mov	DWORD PTR _SobelToPlaneRow$[ebp], OFFSET _SobelToPlaneRow_C
; Line 2196
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@ARGBSobelT
; Line 2197
	mov	DWORD PTR _SobelToPlaneRow$[ebp], OFFSET _SobelToPlaneRow_Any_SSE2
; Line 2198
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN2@ARGBSobelT
; Line 2199
	mov	DWORD PTR _SobelToPlaneRow$[ebp], OFFSET _SobelToPlaneRow_SSE2
$LN2@ARGBSobelT:
; Line 2212
	mov	ecx, DWORD PTR _SobelToPlaneRow$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	_ARGBSobelize
	add	esp, 28					; 0000001cH
; Line 2213
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSobelToPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBShuffle
_TEXT	SEGMENT
_ARGBShuffleRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_bgra$ = 8						; size = 4
_src_stride_bgra$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_shuffler$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_ARGBShuffle PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1980
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1982
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_C
; Line 1985
	cmp	DWORD PTR _src_bgra$[ebp], 0
	je	SHORT $LN12@ARGBShuffl
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN12@ARGBShuffl
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN12@ARGBShuffl
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN13@ARGBShuffl
$LN12@ARGBShuffl:
; Line 1986
	or	eax, -1
	jmp	$LN14@ARGBShuffl
$LN13@ARGBShuffl:
; Line 1989
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN11@ARGBShuffl
; Line 1990
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1991
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_bgra$[ebp]
	add	ecx, DWORD PTR _src_bgra$[ebp]
	mov	DWORD PTR _src_bgra$[ebp], ecx
; Line 1992
	mov	edx, DWORD PTR _src_stride_bgra$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_bgra$[ebp], edx
$LN11@ARGBShuffl:
; Line 1996
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_bgra$[ebp], eax
	jne	SHORT $LN10@ARGBShuffl
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN10@ARGBShuffl
; Line 1997
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1998
	mov	DWORD PTR _height$[ebp], 1
; Line 1999
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_bgra$[ebp], eax
$LN10@ARGBShuffl:
; Line 2002
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN9@ARGBShuffl
; Line 2003
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_Any_SSE2
; Line 2004
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 3
	jne	SHORT $LN9@ARGBShuffl
; Line 2005
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_SSE2
$LN9@ARGBShuffl:
; Line 2010
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBShuffl
; Line 2011
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_Any_SSSE3
; Line 2012
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN7@ARGBShuffl
; Line 2013
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_SSSE3
$LN7@ARGBShuffl:
; Line 2018
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBShuffl
; Line 2019
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_Any_AVX2
; Line 2020
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN5@ARGBShuffl
; Line 2021
	mov	DWORD PTR _ARGBShuffleRow$[ebp], OFFSET _ARGBShuffleRow_AVX2
$LN5@ARGBShuffl:
; Line 2034
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBShuffl
$LN2@ARGBShuffl:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@ARGBShuffl:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBShuffl
; Line 2035
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shuffler$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_bgra$[ebp]
	push	eax
	call	DWORD PTR _ARGBShuffleRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2036
	mov	ecx, DWORD PTR _src_bgra$[ebp]
	add	ecx, DWORD PTR _src_stride_bgra$[ebp]
	mov	DWORD PTR _src_bgra$[ebp], ecx
; Line 2037
	mov	edx, DWORD PTR _dst_argb$[ebp]
	add	edx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], edx
; Line 2038
	jmp	SHORT $LN2@ARGBShuffl
$LN1@ARGBShuffl:
; Line 2039
	xor	eax, eax
$LN14@ARGBShuffl:
; Line 2040
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBShuffle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I420Interpolate
_TEXT	SEGMENT
_halfheight$ = -8					; size = 4
_halfwidth$ = -4					; size = 4
_src0_y$ = 8						; size = 4
_src0_stride_y$ = 12					; size = 4
_src0_u$ = 16						; size = 4
_src0_stride_u$ = 20					; size = 4
_src0_v$ = 24						; size = 4
_src0_stride_v$ = 28					; size = 4
_src1_y$ = 32						; size = 4
_src1_stride_y$ = 36					; size = 4
_src1_u$ = 40						; size = 4
_src1_stride_u$ = 44					; size = 4
_src1_v$ = 48						; size = 4
_src1_stride_v$ = 52					; size = 4
_dst_y$ = 56						; size = 4
_dst_stride_y$ = 60					; size = 4
_dst_u$ = 64						; size = 4
_dst_stride_u$ = 68					; size = 4
_dst_v$ = 72						; size = 4
_dst_stride_v$ = 76					; size = 4
_width$ = 80						; size = 4
_height$ = 84						; size = 4
_interpolation$ = 88					; size = 4
_I420Interpolate PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1952
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1953
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 1954
	mov	ecx, DWORD PTR _height$[ebp]
	add	ecx, 1
	sar	ecx, 1
	mov	DWORD PTR _halfheight$[ebp], ecx
; Line 1958
	cmp	DWORD PTR _src0_y$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _src0_u$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _src0_v$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _src1_y$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _src1_u$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _src1_v$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN1@I420Interp
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN1@I420Interp
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN2@I420Interp
$LN1@I420Interp:
; Line 1959
	or	eax, -1
	jmp	$LN3@I420Interp
$LN2@I420Interp:
; Line 1964
	mov	edx, DWORD PTR _interpolation$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src1_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src0_stride_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src0_y$[ebp]
	push	ecx
	call	_InterpolatePlane
	add	esp, 36					; 00000024H
; Line 1968
	mov	edx, DWORD PTR _interpolation$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfheight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _halfwidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src1_stride_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src0_stride_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src0_u$[ebp]
	push	ecx
	call	_InterpolatePlane
	add	esp, 36					; 00000024H
; Line 1972
	mov	edx, DWORD PTR _interpolation$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfheight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _halfwidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src1_stride_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src1_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _src0_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src0_v$[ebp]
	push	ecx
	call	_InterpolatePlane
	add	esp, 36					; 00000024H
; Line 1973
	xor	eax, eax
$LN3@I420Interp:
; Line 1974
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I420Interpolate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBInterpolate
_TEXT	SEGMENT
_src_argb0$ = 8						; size = 4
_src_stride_argb0$ = 12					; size = 4
_src_argb1$ = 16					; size = 4
_src_stride_argb1$ = 20					; size = 4
_dst_argb$ = 24						; size = 4
_dst_stride_argb$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_interpolation$ = 40					; size = 4
_ARGBInterpolate PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1934
	push	ebp
	mov	ebp, esp
; Line 1938
	mov	eax, DWORD PTR _interpolation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_argb1$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_argb0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb0$[ebp]
	push	edx
	call	_InterpolatePlane
	add	esp, 36					; 00000024H
; Line 1939
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ARGBInterpolate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _InterpolatePlane
_TEXT	SEGMENT
_InterpolateRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src0$ = 8						; size = 4
_src_stride0$ = 12					; size = 4
_src1$ = 16						; size = 4
_src_stride1$ = 20					; size = 4
_dst$ = 24						; size = 4
_dst_stride$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_interpolation$ = 40					; size = 4
_InterpolatePlane PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1863
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1865
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_C
; Line 1868
	cmp	DWORD PTR _src0$[ebp], 0
	je	SHORT $LN10@Interpolat
	cmp	DWORD PTR _src1$[ebp], 0
	je	SHORT $LN10@Interpolat
	cmp	DWORD PTR _dst$[ebp], 0
	je	SHORT $LN10@Interpolat
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@Interpolat
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@Interpolat
$LN10@Interpolat:
; Line 1869
	or	eax, -1
	jmp	$LN12@Interpolat
$LN11@Interpolat:
; Line 1872
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@Interpolat
; Line 1873
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1874
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride$[ebp]
	add	ecx, DWORD PTR _dst$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
; Line 1875
	mov	edx, DWORD PTR _dst_stride$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride$[ebp], edx
$LN9@Interpolat:
; Line 1880
	mov	eax, DWORD PTR _src_stride0$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@Interpolat
	mov	ecx, DWORD PTR _src_stride1$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@Interpolat
	mov	edx, DWORD PTR _dst_stride$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@Interpolat
; Line 1881
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 1882
	mov	DWORD PTR _height$[ebp], 1
; Line 1883
	mov	DWORD PTR _dst_stride$[ebp], 0
	mov	ecx, DWORD PTR _dst_stride$[ebp]
	mov	DWORD PTR _src_stride1$[ebp], ecx
	mov	edx, DWORD PTR _src_stride1$[ebp]
	mov	DWORD PTR _src_stride0$[ebp], edx
$LN8@Interpolat:
; Line 1886
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@Interpolat
; Line 1887
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_SSSE3
; Line 1888
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN7@Interpolat
; Line 1889
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_SSSE3
$LN7@Interpolat:
; Line 1894
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@Interpolat
; Line 1895
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_AVX2
; Line 1896
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 31					; 0000001fH
	jne	SHORT $LN5@Interpolat
; Line 1897
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_AVX2
$LN5@Interpolat:
; Line 1919
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@Interpolat
$LN2@Interpolat:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@Interpolat:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@Interpolat
; Line 1921
	mov	esi, esp
	mov	ecx, DWORD PTR _interpolation$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _src1$[ebp]
	sub	eax, DWORD PTR _src0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src0$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	DWORD PTR _InterpolateRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1922
	mov	eax, DWORD PTR _src0$[ebp]
	add	eax, DWORD PTR _src_stride0$[ebp]
	mov	DWORD PTR _src0$[ebp], eax
; Line 1923
	mov	ecx, DWORD PTR _src1$[ebp]
	add	ecx, DWORD PTR _src_stride1$[ebp]
	mov	DWORD PTR _src1$[ebp], ecx
; Line 1924
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, DWORD PTR _dst_stride$[ebp]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1925
	jmp	SHORT $LN2@Interpolat
$LN1@Interpolat:
; Line 1926
	xor	eax, eax
$LN12@Interpolat:
; Line 1927
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_InterpolatePlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBShade
_TEXT	SEGMENT
_ARGBShadeRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_value$ = 32						; size = 4
_ARGBShade PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1820
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1822
	mov	DWORD PTR _ARGBShadeRow$[ebp], OFFSET _ARGBShadeRow_C
; Line 1824
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN7@ARGBShade
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN7@ARGBShade
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN7@ARGBShade
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN7@ARGBShade
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN8@ARGBShade
$LN7@ARGBShade:
; Line 1825
	or	eax, -1
	jmp	$LN9@ARGBShade
$LN8@ARGBShade:
; Line 1827
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN6@ARGBShade
; Line 1828
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1829
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1830
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN6@ARGBShade:
; Line 1834
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBShade
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN5@ARGBShade
; Line 1835
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1836
	mov	DWORD PTR _height$[ebp], 1
; Line 1837
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN5@ARGBShade:
; Line 1840
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBShade
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 3
	jne	SHORT $LN4@ARGBShade
; Line 1841
	mov	DWORD PTR _ARGBShadeRow$[ebp], OFFSET _ARGBShadeRow_SSE2
$LN4@ARGBShade:
; Line 1850
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBShade
$LN2@ARGBShade:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBShade:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBShade
; Line 1851
	mov	esi, esp
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBShadeRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1852
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 1853
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 1854
	jmp	SHORT $LN2@ARGBShade
$LN1@ARGBShade:
; Line 1855
	xor	eax, eax
$LN9@ARGBShade:
; Line 1856
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBShade ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBBlur
_TEXT	SEGMENT
tv147 = -60						; size = 4
tv142 = -56						; size = 4
_prev_cumsum_bot_row$1 = -52				; size = 4
_n$2 = -48						; size = 4
_x$3 = -44						; size = 4
_boxwidth$4 = -40					; size = 4
_area$5 = -36						; size = 4
_bot_y$6 = -32						; size = 4
_top_y$7 = -28						; size = 4
_cumsum_top_row$ = -24					; size = 4
_max_cumsum_bot_row$ = -20				; size = 4
_cumsum_bot_row$ = -16					; size = 4
_CumulativeSumToAverageRow$ = -12			; size = 4
_ComputeCumulativeSumRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_dst_cumsum$ = 24					; size = 4
_dst_stride32_cumsum$ = 28				; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_radius$ = 40						; size = 4
_ARGBBlur PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1717
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1719
	mov	DWORD PTR _ComputeCumulativeSumRow$[ebp], OFFSET _ComputeCumulativeSumRow_C
; Line 1721
	mov	DWORD PTR _CumulativeSumToAverageRow$[ebp], OFFSET _CumulativeSumToAverageRow_C
; Line 1727
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN19@ARGBBlur
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN19@ARGBBlur
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN19@ARGBBlur
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN20@ARGBBlur
$LN19@ARGBBlur:
; Line 1728
	or	eax, -1
	jmp	$LN21@ARGBBlur
$LN20@ARGBBlur:
; Line 1730
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN18@ARGBBlur
; Line 1731
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1732
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1733
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN18@ARGBBlur:
; Line 1735
	mov	eax, DWORD PTR _radius$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jle	SHORT $LN17@ARGBBlur
; Line 1736
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _radius$[ebp], ecx
$LN17@ARGBBlur:
; Line 1738
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	cmp	DWORD PTR _radius$[ebp], eax
	jle	SHORT $LN16@ARGBBlur
; Line 1739
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	sub	eax, 1
	mov	DWORD PTR _radius$[ebp], eax
$LN16@ARGBBlur:
; Line 1741
	cmp	DWORD PTR _radius$[ebp], 0
	jg	SHORT $LN15@ARGBBlur
; Line 1742
	or	eax, -1
	jmp	$LN21@ARGBBlur
$LN15@ARGBBlur:
; Line 1745
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@ARGBBlur
; Line 1746
	mov	DWORD PTR _ComputeCumulativeSumRow$[ebp], OFFSET _ComputeCumulativeSumRow_SSE2
; Line 1747
	mov	DWORD PTR _CumulativeSumToAverageRow$[ebp], OFFSET _CumulativeSumToAverageRow_SSE2
$LN14@ARGBBlur:
; Line 1754
	mov	edx, DWORD PTR _radius$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride32_cumsum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_cumsum$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	_ARGBComputeCumulativeSum
	add	esp, 24					; 00000018H
; Line 1756
	mov	edx, DWORD PTR _radius$[ebp]
	imul	edx, DWORD PTR _src_stride_argb$[ebp]
	add	edx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 1757
	mov	eax, DWORD PTR _radius$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _dst_stride32_cumsum$[ebp]
	mov	ecx, DWORD PTR _dst_cumsum$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cumsum_bot_row$[ebp], edx
; Line 1759
	mov	eax, DWORD PTR _radius$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	imul	ecx, DWORD PTR _dst_stride32_cumsum$[ebp]
	mov	edx, DWORD PTR _dst_cumsum$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _max_cumsum_bot_row$[ebp], eax
; Line 1760
	mov	ecx, 4
	imul	edx, ecx, 0
	add	edx, DWORD PTR _dst_cumsum$[ebp]
	mov	DWORD PTR _cumsum_top_row$[ebp], edx
; Line 1762
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN13@ARGBBlur
$LN12@ARGBBlur:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN13@ARGBBlur:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	$LN11@ARGBBlur
; Line 1763
	mov	edx, DWORD PTR _y$[ebp]
	sub	edx, DWORD PTR _radius$[ebp]
	sub	edx, 1
	js	SHORT $LN23@ARGBBlur
	mov	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _radius$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN24@ARGBBlur
$LN23@ARGBBlur:
	mov	DWORD PTR tv142[ebp], 0
$LN24@ARGBBlur:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _top_y$7[ebp], ecx
; Line 1764
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _radius$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN25@ARGBBlur
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _radius$[ebp]
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN26@ARGBBlur
$LN25@ARGBBlur:
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv147[ebp], ecx
$LN26@ARGBBlur:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _bot_y$6[ebp], edx
; Line 1765
	mov	eax, DWORD PTR _bot_y$6[ebp]
	sub	eax, DWORD PTR _top_y$7[ebp]
	imul	eax, DWORD PTR _radius$[ebp]
	mov	DWORD PTR _area$5[ebp], eax
; Line 1766
	mov	ecx, DWORD PTR _radius$[ebp]
	shl	ecx, 2
	mov	DWORD PTR _boxwidth$4[ebp], ecx
; Line 1771
	cmp	DWORD PTR _top_y$7[ebp], 0
	je	SHORT $LN10@ARGBBlur
; Line 1772
	mov	edx, DWORD PTR _dst_stride32_cumsum$[ebp]
	mov	eax, DWORD PTR _cumsum_top_row$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _cumsum_top_row$[ebp], ecx
; Line 1773
	mov	edx, DWORD PTR _cumsum_top_row$[ebp]
	cmp	edx, DWORD PTR _max_cumsum_bot_row$[ebp]
	jb	SHORT $LN10@ARGBBlur
; Line 1774
	mov	eax, DWORD PTR _dst_cumsum$[ebp]
	mov	DWORD PTR _cumsum_top_row$[ebp], eax
$LN10@ARGBBlur:
; Line 1779
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _radius$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN8@ARGBBlur
; Line 1780
	mov	edx, DWORD PTR _cumsum_bot_row$[ebp]
	mov	DWORD PTR _prev_cumsum_bot_row$1[ebp], edx
; Line 1781
	mov	eax, DWORD PTR _dst_stride32_cumsum$[ebp]
	mov	ecx, DWORD PTR _cumsum_bot_row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _cumsum_bot_row$[ebp], edx
; Line 1782
	mov	eax, DWORD PTR _cumsum_bot_row$[ebp]
	cmp	eax, DWORD PTR _max_cumsum_bot_row$[ebp]
	jb	SHORT $LN7@ARGBBlur
; Line 1783
	mov	ecx, DWORD PTR _dst_cumsum$[ebp]
	mov	DWORD PTR _cumsum_bot_row$[ebp], ecx
$LN7@ARGBBlur:
; Line 1786
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _prev_cumsum_bot_row$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cumsum_bot_row$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb$[ebp]
	push	edx
	call	DWORD PTR _ComputeCumulativeSumRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1787
	mov	eax, DWORD PTR _src_argb$[ebp]
	add	eax, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], eax
$LN8@ARGBBlur:
; Line 1791
	mov	DWORD PTR _x$3[ebp], 0
	jmp	SHORT $LN6@ARGBBlur
$LN5@ARGBBlur:
	mov	ecx, DWORD PTR _x$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$3[ebp], ecx
$LN6@ARGBBlur:
	mov	edx, DWORD PTR _radius$[ebp]
	add	edx, 1
	cmp	DWORD PTR _x$3[ebp], edx
	jge	SHORT $LN4@ARGBBlur
; Line 1793
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _x$3[ebp]
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _area$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _boxwidth$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _cumsum_bot_row$[ebp]
	push	edx
	mov	eax, DWORD PTR _cumsum_top_row$[ebp]
	push	eax
	call	DWORD PTR _CumulativeSumToAverageRow$[ebp]
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1794
	mov	ecx, DWORD PTR _bot_y$6[ebp]
	sub	ecx, DWORD PTR _top_y$7[ebp]
	add	ecx, DWORD PTR _area$5[ebp]
	mov	DWORD PTR _area$5[ebp], ecx
; Line 1795
	mov	edx, DWORD PTR _boxwidth$4[ebp]
	add	edx, 4
	mov	DWORD PTR _boxwidth$4[ebp], edx
; Line 1796
	jmp	SHORT $LN5@ARGBBlur
$LN4@ARGBBlur:
; Line 1799
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _radius$[ebp]
	sub	eax, DWORD PTR _x$3[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
; Line 1801
	mov	esi, esp
	mov	ecx, DWORD PTR _n$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$3[ebp]
	mov	eax, DWORD PTR _dst_argb$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _area$5[ebp]
	push	edx
	mov	eax, DWORD PTR _boxwidth$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _cumsum_bot_row$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cumsum_top_row$[ebp]
	push	edx
	call	DWORD PTR _CumulativeSumToAverageRow$[ebp]
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1804
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, DWORD PTR _n$2[ebp]
	mov	DWORD PTR _x$3[ebp], eax
	jmp	SHORT $LN3@ARGBBlur
$LN2@ARGBBlur:
	mov	ecx, DWORD PTR _x$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _x$3[ebp], ecx
$LN3@ARGBBlur:
	mov	edx, DWORD PTR _width$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _x$3[ebp], edx
	jg	SHORT $LN1@ARGBBlur
; Line 1805
	mov	eax, DWORD PTR _bot_y$6[ebp]
	sub	eax, DWORD PTR _top_y$7[ebp]
	mov	ecx, DWORD PTR _area$5[ebp]
	sub	ecx, eax
	mov	DWORD PTR _area$5[ebp], ecx
; Line 1806
	mov	edx, DWORD PTR _boxwidth$4[ebp]
	sub	edx, 4
	mov	DWORD PTR _boxwidth$4[ebp], edx
; Line 1809
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _x$3[ebp]
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _area$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _boxwidth$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$3[ebp]
	sub	edx, DWORD PTR _radius$[ebp]
	lea	eax, DWORD PTR [edx*4-4]
	mov	ecx, DWORD PTR _cumsum_bot_row$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _x$3[ebp]
	sub	eax, DWORD PTR _radius$[ebp]
	lea	ecx, DWORD PTR [eax*4-4]
	mov	edx, DWORD PTR _cumsum_top_row$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR _CumulativeSumToAverageRow$[ebp]
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1810
	jmp	SHORT $LN2@ARGBBlur
$LN1@ARGBBlur:
; Line 1811
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 1812
	jmp	$LN12@ARGBBlur
$LN11@ARGBBlur:
; Line 1813
	xor	eax, eax
$LN21@ARGBBlur:
; Line 1814
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBBlur ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBComputeCumulativeSum
_TEXT	SEGMENT
_previous_cumsum$ = -12					; size = 4
_ComputeCumulativeSumRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_cumsum$ = 16					; size = 4
_dst_stride32_cumsum$ = 20				; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBComputeCumulativeSum PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1686
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1688
	mov	DWORD PTR _ComputeCumulativeSumRow$[ebp], OFFSET _ComputeCumulativeSumRow_C
; Line 1690
	mov	eax, DWORD PTR _dst_cumsum$[ebp]
	mov	DWORD PTR _previous_cumsum$[ebp], eax
; Line 1691
	cmp	DWORD PTR _dst_cumsum$[ebp], 0
	je	SHORT $LN5@ARGBComput
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN5@ARGBComput
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN5@ARGBComput
	cmp	DWORD PTR _height$[ebp], 0
	jg	SHORT $LN6@ARGBComput
$LN5@ARGBComput:
; Line 1692
	or	eax, -1
	jmp	$LN7@ARGBComput
$LN6@ARGBComput:
; Line 1695
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBComput
; Line 1696
	mov	DWORD PTR _ComputeCumulativeSumRow$[ebp], OFFSET _ComputeCumulativeSumRow_SSE2
$LN4@ARGBComput:
; Line 1699
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _dst_cumsum$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1700
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBComput
$LN2@ARGBComput:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBComput:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBComput
; Line 1701
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _previous_cumsum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_cumsum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb$[ebp]
	push	edx
	call	DWORD PTR _ComputeCumulativeSumRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1702
	mov	eax, DWORD PTR _dst_cumsum$[ebp]
	mov	DWORD PTR _previous_cumsum$[ebp], eax
; Line 1703
	mov	ecx, DWORD PTR _dst_stride32_cumsum$[ebp]
	mov	edx, DWORD PTR _dst_cumsum$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _dst_cumsum$[ebp], eax
; Line 1704
	mov	ecx, DWORD PTR _src_argb$[ebp]
	add	ecx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1705
	jmp	SHORT $LN2@ARGBComput
$LN1@ARGBComput:
; Line 1706
	xor	eax, eax
$LN7@ARGBComput:
; Line 1707
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBComputeCumulativeSum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBUnattenuate
_TEXT	SEGMENT
_ARGBUnattenuateRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBUnattenuate PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1341
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1343
	mov	DWORD PTR _ARGBUnattenuateRow$[ebp], OFFSET _ARGBUnattenuateRow_C
; Line 1345
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN10@ARGBUnatte
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBUnatte
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBUnatte
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBUnatte
$LN10@ARGBUnatte:
; Line 1346
	or	eax, -1
	jmp	$LN12@ARGBUnatte
$LN11@ARGBUnatte:
; Line 1348
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBUnatte
; Line 1349
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1350
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1351
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN9@ARGBUnatte:
; Line 1355
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN8@ARGBUnatte
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN8@ARGBUnatte
; Line 1356
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1357
	mov	DWORD PTR _height$[ebp], 1
; Line 1358
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN8@ARGBUnatte:
; Line 1361
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBUnatte
; Line 1362
	mov	DWORD PTR _ARGBUnattenuateRow$[ebp], OFFSET _ARGBUnattenuateRow_Any_SSE2
; Line 1363
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 3
	jne	SHORT $LN7@ARGBUnatte
; Line 1364
	mov	DWORD PTR _ARGBUnattenuateRow$[ebp], OFFSET _ARGBUnattenuateRow_SSE2
$LN7@ARGBUnatte:
; Line 1369
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBUnatte
; Line 1370
	mov	DWORD PTR _ARGBUnattenuateRow$[ebp], OFFSET _ARGBUnattenuateRow_Any_AVX2
; Line 1371
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN5@ARGBUnatte
; Line 1372
	mov	DWORD PTR _ARGBUnattenuateRow$[ebp], OFFSET _ARGBUnattenuateRow_AVX2
$LN5@ARGBUnatte:
; Line 1378
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBUnatte
$LN2@ARGBUnatte:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBUnatte:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBUnatte
; Line 1379
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBUnattenuateRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1380
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 1381
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 1382
	jmp	SHORT $LN2@ARGBUnatte
$LN1@ARGBUnatte:
; Line 1383
	xor	eax, eax
$LN12@ARGBUnatte:
; Line 1384
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBUnattenuate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBAttenuate
_TEXT	SEGMENT
_ARGBAttenuateRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBAttenuate PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1285
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1287
	mov	DWORD PTR _ARGBAttenuateRow$[ebp], OFFSET _ARGBAttenuateRow_C
; Line 1289
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN10@ARGBAttenu
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBAttenu
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBAttenu
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBAttenu
$LN10@ARGBAttenu:
; Line 1290
	or	eax, -1
	jmp	$LN12@ARGBAttenu
$LN11@ARGBAttenu:
; Line 1292
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBAttenu
; Line 1293
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1294
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1295
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN9@ARGBAttenu:
; Line 1299
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN8@ARGBAttenu
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN8@ARGBAttenu
; Line 1300
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1301
	mov	DWORD PTR _height$[ebp], 1
; Line 1302
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN8@ARGBAttenu:
; Line 1305
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBAttenu
; Line 1306
	mov	DWORD PTR _ARGBAttenuateRow$[ebp], OFFSET _ARGBAttenuateRow_Any_SSSE3
; Line 1307
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 3
	jne	SHORT $LN7@ARGBAttenu
; Line 1308
	mov	DWORD PTR _ARGBAttenuateRow$[ebp], OFFSET _ARGBAttenuateRow_SSSE3
$LN7@ARGBAttenu:
; Line 1313
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBAttenu
; Line 1314
	mov	DWORD PTR _ARGBAttenuateRow$[ebp], OFFSET _ARGBAttenuateRow_Any_AVX2
; Line 1315
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN5@ARGBAttenu
; Line 1316
	mov	DWORD PTR _ARGBAttenuateRow$[ebp], OFFSET _ARGBAttenuateRow_AVX2
$LN5@ARGBAttenu:
; Line 1329
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBAttenu
$LN2@ARGBAttenu:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBAttenu:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBAttenu
; Line 1330
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBAttenuateRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1331
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 1332
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 1333
	jmp	SHORT $LN2@ARGBAttenu
$LN1@ARGBAttenu:
; Line 1334
	xor	eax, eax
$LN12@ARGBAttenu:
; Line 1335
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBAttenuate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSubtract
_TEXT	SEGMENT
_ARGBSubtractRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb0$ = 8						; size = 4
_src_stride_argb0$ = 12					; size = 4
_src_argb1$ = 16					; size = 4
_src_stride_argb1$ = 20					; size = 4
_dst_argb$ = 24						; size = 4
_dst_stride_argb$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_ARGBSubtract PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 886
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 888
	mov	DWORD PTR _ARGBSubtractRow$[ebp], OFFSET _ARGBSubtractRow_C
; Line 890
	cmp	DWORD PTR _src_argb0$[ebp], 0
	je	SHORT $LN10@ARGBSubtra
	cmp	DWORD PTR _src_argb1$[ebp], 0
	je	SHORT $LN10@ARGBSubtra
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBSubtra
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBSubtra
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBSubtra
$LN10@ARGBSubtra:
; Line 891
	or	eax, -1
	jmp	$LN12@ARGBSubtra
$LN11@ARGBSubtra:
; Line 894
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBSubtra
; Line 895
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 896
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_argb$[ebp]
	add	ecx, DWORD PTR _dst_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 897
	mov	edx, DWORD PTR _dst_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_argb$[ebp], edx
$LN9@ARGBSubtra:
; Line 902
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb0$[ebp], eax
	jne	SHORT $LN8@ARGBSubtra
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _src_stride_argb1$[ebp], ecx
	jne	SHORT $LN8@ARGBSubtra
	mov	edx, DWORD PTR _width$[ebp]
	shl	edx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], edx
	jne	SHORT $LN8@ARGBSubtra
; Line 903
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 904
	mov	DWORD PTR _height$[ebp], 1
; Line 905
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb1$[ebp], ecx
	mov	edx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_stride_argb0$[ebp], edx
$LN8@ARGBSubtra:
; Line 908
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBSubtra
; Line 909
	mov	DWORD PTR _ARGBSubtractRow$[ebp], OFFSET _ARGBSubtractRow_Any_SSE2
; Line 910
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 3
	jne	SHORT $LN7@ARGBSubtra
; Line 911
	mov	DWORD PTR _ARGBSubtractRow$[ebp], OFFSET _ARGBSubtractRow_SSE2
$LN7@ARGBSubtra:
; Line 916
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBSubtra
; Line 917
	mov	DWORD PTR _ARGBSubtractRow$[ebp], OFFSET _ARGBSubtractRow_Any_AVX2
; Line 918
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN5@ARGBSubtra
; Line 919
	mov	DWORD PTR _ARGBSubtractRow$[ebp], OFFSET _ARGBSubtractRow_AVX2
$LN5@ARGBSubtra:
; Line 933
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBSubtra
$LN2@ARGBSubtra:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBSubtra:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBSubtra
; Line 934
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb0$[ebp]
	push	ecx
	call	DWORD PTR _ARGBSubtractRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 935
	mov	edx, DWORD PTR _src_argb0$[ebp]
	add	edx, DWORD PTR _src_stride_argb0$[ebp]
	mov	DWORD PTR _src_argb0$[ebp], edx
; Line 936
	mov	eax, DWORD PTR _src_argb1$[ebp]
	add	eax, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_argb1$[ebp], eax
; Line 937
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 938
	jmp	SHORT $LN2@ARGBSubtra
$LN1@ARGBSubtra:
; Line 939
	xor	eax, eax
$LN12@ARGBSubtra:
; Line 940
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSubtract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBAdd
_TEXT	SEGMENT
_ARGBAddRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb0$ = 8						; size = 4
_src_stride_argb0$ = 12					; size = 4
_src_argb1$ = 16					; size = 4
_src_stride_argb1$ = 20					; size = 4
_dst_argb$ = 24						; size = 4
_dst_stride_argb$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_ARGBAdd PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 820
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 822
	mov	DWORD PTR _ARGBAddRow$[ebp], OFFSET _ARGBAddRow_C
; Line 824
	cmp	DWORD PTR _src_argb0$[ebp], 0
	je	SHORT $LN9@ARGBAdd
	cmp	DWORD PTR _src_argb1$[ebp], 0
	je	SHORT $LN9@ARGBAdd
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN9@ARGBAdd
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN9@ARGBAdd
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN10@ARGBAdd
$LN9@ARGBAdd:
; Line 825
	or	eax, -1
	jmp	$LN11@ARGBAdd
$LN10@ARGBAdd:
; Line 828
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN8@ARGBAdd
; Line 829
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 830
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_argb$[ebp]
	add	ecx, DWORD PTR _dst_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 831
	mov	edx, DWORD PTR _dst_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_argb$[ebp], edx
$LN8@ARGBAdd:
; Line 836
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb0$[ebp], eax
	jne	SHORT $LN7@ARGBAdd
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _src_stride_argb1$[ebp], ecx
	jne	SHORT $LN7@ARGBAdd
	mov	edx, DWORD PTR _width$[ebp]
	shl	edx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], edx
	jne	SHORT $LN7@ARGBAdd
; Line 837
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 838
	mov	DWORD PTR _height$[ebp], 1
; Line 839
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb1$[ebp], ecx
	mov	edx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_stride_argb0$[ebp], edx
$LN7@ARGBAdd:
; Line 842
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@ARGBAdd
; Line 843
	mov	DWORD PTR _ARGBAddRow$[ebp], OFFSET _ARGBAddRow_SSE2
$LN6@ARGBAdd:
; Line 855
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBAdd
; Line 856
	mov	DWORD PTR _ARGBAddRow$[ebp], OFFSET _ARGBAddRow_Any_AVX2
; Line 857
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 7
	jne	SHORT $LN5@ARGBAdd
; Line 858
	mov	DWORD PTR _ARGBAddRow$[ebp], OFFSET _ARGBAddRow_AVX2
$LN5@ARGBAdd:
; Line 872
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBAdd
$LN2@ARGBAdd:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@ARGBAdd:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBAdd
; Line 873
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb1$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb0$[ebp]
	push	eax
	call	DWORD PTR _ARGBAddRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 874
	mov	ecx, DWORD PTR _src_argb0$[ebp]
	add	ecx, DWORD PTR _src_stride_argb0$[ebp]
	mov	DWORD PTR _src_argb0$[ebp], ecx
; Line 875
	mov	edx, DWORD PTR _src_argb1$[ebp]
	add	edx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_argb1$[ebp], edx
; Line 876
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 877
	jmp	SHORT $LN2@ARGBAdd
$LN1@ARGBAdd:
; Line 878
	xor	eax, eax
$LN11@ARGBAdd:
; Line 879
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBMultiply
_TEXT	SEGMENT
_ARGBMultiplyRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb0$ = 8						; size = 4
_src_stride_argb0$ = 12					; size = 4
_src_argb1$ = 16					; size = 4
_src_stride_argb1$ = 20					; size = 4
_dst_argb$ = 24						; size = 4
_dst_stride_argb$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_ARGBMultiply PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 759
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 761
	mov	DWORD PTR _ARGBMultiplyRow$[ebp], OFFSET _ARGBMultiplyRow_C
; Line 763
	cmp	DWORD PTR _src_argb0$[ebp], 0
	je	SHORT $LN10@ARGBMultip
	cmp	DWORD PTR _src_argb1$[ebp], 0
	je	SHORT $LN10@ARGBMultip
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBMultip
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBMultip
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBMultip
$LN10@ARGBMultip:
; Line 764
	or	eax, -1
	jmp	$LN12@ARGBMultip
$LN11@ARGBMultip:
; Line 767
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBMultip
; Line 768
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 769
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_argb$[ebp]
	add	ecx, DWORD PTR _dst_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 770
	mov	edx, DWORD PTR _dst_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_argb$[ebp], edx
$LN9@ARGBMultip:
; Line 775
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb0$[ebp], eax
	jne	SHORT $LN8@ARGBMultip
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _src_stride_argb1$[ebp], ecx
	jne	SHORT $LN8@ARGBMultip
	mov	edx, DWORD PTR _width$[ebp]
	shl	edx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], edx
	jne	SHORT $LN8@ARGBMultip
; Line 776
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 777
	mov	DWORD PTR _height$[ebp], 1
; Line 778
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb1$[ebp], ecx
	mov	edx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_stride_argb0$[ebp], edx
$LN8@ARGBMultip:
; Line 781
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBMultip
; Line 782
	mov	DWORD PTR _ARGBMultiplyRow$[ebp], OFFSET _ARGBMultiplyRow_Any_SSE2
; Line 783
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 3
	jne	SHORT $LN7@ARGBMultip
; Line 784
	mov	DWORD PTR _ARGBMultiplyRow$[ebp], OFFSET _ARGBMultiplyRow_SSE2
$LN7@ARGBMultip:
; Line 789
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBMultip
; Line 790
	mov	DWORD PTR _ARGBMultiplyRow$[ebp], OFFSET _ARGBMultiplyRow_Any_AVX2
; Line 791
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN5@ARGBMultip
; Line 792
	mov	DWORD PTR _ARGBMultiplyRow$[ebp], OFFSET _ARGBMultiplyRow_AVX2
$LN5@ARGBMultip:
; Line 806
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBMultip
$LN2@ARGBMultip:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBMultip:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBMultip
; Line 807
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb0$[ebp]
	push	ecx
	call	DWORD PTR _ARGBMultiplyRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 808
	mov	edx, DWORD PTR _src_argb0$[ebp]
	add	edx, DWORD PTR _src_stride_argb0$[ebp]
	mov	DWORD PTR _src_argb0$[ebp], edx
; Line 809
	mov	eax, DWORD PTR _src_argb1$[ebp]
	add	eax, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_argb1$[ebp], eax
; Line 810
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 811
	jmp	SHORT $LN2@ARGBMultip
$LN1@ARGBMultip:
; Line 812
	xor	eax, eax
$LN12@ARGBMultip:
; Line 813
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBMultiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I420Blend
_TEXT	SEGMENT
_halfalpha$ = -24					; size = 4
_halfalpha_mem$ = -20					; size = 4
_ScaleRowDown2$ = -16					; size = 4
_BlendPlaneRow$ = -12					; size = 4
_halfwidth$ = -8					; size = 4
_y$ = -4						; size = 4
_src_y0$ = 8						; size = 4
_src_stride_y0$ = 12					; size = 4
_src_u0$ = 16						; size = 4
_src_stride_u0$ = 20					; size = 4
_src_v0$ = 24						; size = 4
_src_stride_v0$ = 28					; size = 4
_src_y1$ = 32						; size = 4
_src_stride_y1$ = 36					; size = 4
_src_u1$ = 40						; size = 4
_src_stride_u1$ = 44					; size = 4
_src_v1$ = 48						; size = 4
_src_stride_v1$ = 52					; size = 4
_alpha$ = 56						; size = 4
_alpha_stride$ = 60					; size = 4
_dst_y$ = 64						; size = 4
_dst_stride_y$ = 68					; size = 4
_dst_u$ = 72						; size = 4
_dst_stride_u$ = 76					; size = 4
_dst_v$ = 80						; size = 4
_dst_stride_v$ = 84					; size = 4
_width$ = 88						; size = 4
_height$ = 92						; size = 4
_I420Blend PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 651
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 654
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 655
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_C
; Line 657
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_C
; Line 660
	cmp	DWORD PTR _src_y0$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _src_u0$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _src_v0$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _src_y1$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _src_u1$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _src_v1$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _alpha$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN17@I420Blend
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN17@I420Blend
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN18@I420Blend
$LN17@I420Blend:
; Line 661
	or	eax, -1
	jmp	$LN19@I420Blend
$LN18@I420Blend:
; Line 665
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN16@I420Blend
; Line 666
	mov	ecx, DWORD PTR _height$[ebp]
	neg	ecx
	mov	DWORD PTR _height$[ebp], ecx
; Line 667
	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _dst_stride_y$[ebp]
	add	edx, DWORD PTR _dst_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 668
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	neg	eax
	mov	DWORD PTR _dst_stride_y$[ebp], eax
$LN16@I420Blend:
; Line 676
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alpha_stride$[ebp]
	push	edx
	mov	eax, DWORD PTR _alpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_y1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y1$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_y0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_y0$[ebp]
	push	ecx
	call	_BlendPlane
	add	esp, 40					; 00000028H
; Line 679
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@I420Blend
; Line 680
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_Any_SSSE3
; Line 681
	mov	edx, DWORD PTR _halfwidth$[ebp]
	and	edx, 7
	jne	SHORT $LN15@I420Blend
; Line 682
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_SSSE3
$LN15@I420Blend:
; Line 687
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@I420Blend
; Line 688
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_Any_AVX2
; Line 689
	mov	eax, DWORD PTR _halfwidth$[ebp]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN13@I420Blend
; Line 690
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_AVX2
$LN13@I420Blend:
; Line 694
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 1
	je	SHORT $LN11@I420Blend
; Line 695
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_Odd_C
$LN11@I420Blend:
; Line 709
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@I420Blend
; Line 710
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_Odd_SSSE3
; Line 711
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 1
	jne	SHORT $LN10@I420Blend
; Line 712
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_Any_SSSE3
; Line 713
	mov	eax, DWORD PTR _halfwidth$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN10@I420Blend
; Line 714
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_SSSE3
$LN10@I420Blend:
; Line 720
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@I420Blend
; Line 721
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_Odd_AVX2
; Line 722
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 1
	jne	SHORT $LN7@I420Blend
; Line 723
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_Any_AVX2
; Line 724
	mov	edx, DWORD PTR _halfwidth$[ebp]
	and	edx, 31					; 0000001fH
	jne	SHORT $LN7@I420Blend
; Line 725
	mov	DWORD PTR _ScaleRowDown2$[ebp], OFFSET _ScaleRowDown2Box_AVX2
$LN7@I420Blend:
; Line 732
	mov	eax, DWORD PTR _halfwidth$[ebp]
	add	eax, 63					; 0000003fH
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _halfalpha_mem$[ebp], eax
	mov	ecx, DWORD PTR _halfalpha_mem$[ebp]
	add	ecx, 63					; 0000003fH
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _halfalpha$[ebp], ecx
; Line 733
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@I420Blend
$LN3@I420Blend:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 2
	mov	DWORD PTR _y$[ebp], edx
$LN4@I420Blend:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	$LN2@I420Blend
; Line 735
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _y$[ebp], ecx
	jne	SHORT $LN1@I420Blend
; Line 736
	mov	DWORD PTR _alpha_stride$[ebp], 0
$LN1@I420Blend:
; Line 739
	mov	esi, esp
	mov	edx, DWORD PTR _halfwidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfalpha$[ebp]
	push	eax
	mov	ecx, DWORD PTR _alpha_stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alpha$[ebp]
	push	edx
	call	DWORD PTR _ScaleRowDown2$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 740
	mov	eax, DWORD PTR _alpha_stride$[ebp]
	mov	ecx, DWORD PTR _alpha$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _alpha$[ebp], edx
; Line 741
	mov	esi, esp
	mov	eax, DWORD PTR _halfwidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _halfalpha$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_u1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_u0$[ebp]
	push	ecx
	call	DWORD PTR _BlendPlaneRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 742
	mov	esi, esp
	mov	edx, DWORD PTR _halfwidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _halfalpha$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_v1$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_v0$[ebp]
	push	eax
	call	DWORD PTR _BlendPlaneRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 743
	mov	ecx, DWORD PTR _src_u0$[ebp]
	add	ecx, DWORD PTR _src_stride_u0$[ebp]
	mov	DWORD PTR _src_u0$[ebp], ecx
; Line 744
	mov	edx, DWORD PTR _src_u1$[ebp]
	add	edx, DWORD PTR _src_stride_u1$[ebp]
	mov	DWORD PTR _src_u1$[ebp], edx
; Line 745
	mov	eax, DWORD PTR _dst_u$[ebp]
	add	eax, DWORD PTR _dst_stride_u$[ebp]
	mov	DWORD PTR _dst_u$[ebp], eax
; Line 746
	mov	ecx, DWORD PTR _src_v0$[ebp]
	add	ecx, DWORD PTR _src_stride_v0$[ebp]
	mov	DWORD PTR _src_v0$[ebp], ecx
; Line 747
	mov	edx, DWORD PTR _src_v1$[ebp]
	add	edx, DWORD PTR _src_stride_v1$[ebp]
	mov	DWORD PTR _src_v1$[ebp], edx
; Line 748
	mov	eax, DWORD PTR _dst_v$[ebp]
	add	eax, DWORD PTR _dst_stride_v$[ebp]
	mov	DWORD PTR _dst_v$[ebp], eax
; Line 749
	jmp	$LN3@I420Blend
$LN2@I420Blend:
; Line 750
	mov	ecx, DWORD PTR _halfalpha_mem$[ebp]
	push	ecx
	call	_free
	add	esp, 4
	mov	DWORD PTR _halfalpha$[ebp], 0
; Line 751
	xor	eax, eax
$LN19@I420Blend:
; Line 752
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I420Blend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _BlendPlane
_TEXT	SEGMENT
_BlendPlaneRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_y0$ = 8						; size = 4
_src_stride_y0$ = 12					; size = 4
_src_y1$ = 16						; size = 4
_src_stride_y1$ = 20					; size = 4
_alpha$ = 24						; size = 4
_alpha_stride$ = 28					; size = 4
_dst_y$ = 32						; size = 4
_dst_stride_y$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_BlendPlane PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 587
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 589
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_C
; Line 591
	cmp	DWORD PTR _src_y0$[ebp], 0
	je	SHORT $LN10@BlendPlane
	cmp	DWORD PTR _src_y1$[ebp], 0
	je	SHORT $LN10@BlendPlane
	cmp	DWORD PTR _alpha$[ebp], 0
	je	SHORT $LN10@BlendPlane
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN10@BlendPlane
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@BlendPlane
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@BlendPlane
$LN10@BlendPlane:
; Line 592
	or	eax, -1
	jmp	$LN12@BlendPlane
$LN11@BlendPlane:
; Line 595
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@BlendPlane
; Line 596
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 597
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_y$[ebp]
	add	ecx, DWORD PTR _dst_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], ecx
; Line 598
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_y$[ebp], edx
$LN9@BlendPlane:
; Line 605
	mov	eax, DWORD PTR _src_stride_y0$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@BlendPlane
	mov	ecx, DWORD PTR _src_stride_y1$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@BlendPlane
	mov	edx, DWORD PTR _alpha_stride$[ebp]
	cmp	edx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@BlendPlane
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@BlendPlane
; Line 606
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 607
	mov	DWORD PTR _height$[ebp], 1
; Line 608
	mov	DWORD PTR _dst_stride_y$[ebp], 0
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _alpha_stride$[ebp], edx
	mov	eax, DWORD PTR _alpha_stride$[ebp]
	mov	DWORD PTR _src_stride_y1$[ebp], eax
	mov	ecx, DWORD PTR _src_stride_y1$[ebp]
	mov	DWORD PTR _src_stride_y0$[ebp], ecx
$LN8@BlendPlane:
; Line 612
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@BlendPlane
; Line 613
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_Any_SSSE3
; Line 614
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN7@BlendPlane
; Line 615
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_SSSE3
$LN7@BlendPlane:
; Line 620
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@BlendPlane
; Line 621
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_Any_AVX2
; Line 622
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN5@BlendPlane
; Line 623
	mov	DWORD PTR _BlendPlaneRow$[ebp], OFFSET _BlendPlaneRow_AVX2
$LN5@BlendPlane:
; Line 628
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@BlendPlane
$LN2@BlendPlane:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@BlendPlane:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@BlendPlane
; Line 629
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alpha$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_y0$[ebp]
	push	ecx
	call	DWORD PTR _BlendPlaneRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 630
	mov	edx, DWORD PTR _src_y0$[ebp]
	add	edx, DWORD PTR _src_stride_y0$[ebp]
	mov	DWORD PTR _src_y0$[ebp], edx
; Line 631
	mov	eax, DWORD PTR _src_y1$[ebp]
	add	eax, DWORD PTR _src_stride_y1$[ebp]
	mov	DWORD PTR _src_y1$[ebp], eax
; Line 632
	mov	ecx, DWORD PTR _alpha$[ebp]
	add	ecx, DWORD PTR _alpha_stride$[ebp]
	mov	DWORD PTR _alpha$[ebp], ecx
; Line 633
	mov	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 634
	jmp	SHORT $LN2@BlendPlane
$LN1@BlendPlane:
; Line 635
	xor	eax, eax
$LN12@BlendPlane:
; Line 636
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_BlendPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBBlend
_TEXT	SEGMENT
_ARGBBlendRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb0$ = 8						; size = 4
_src_stride_argb0$ = 12					; size = 4
_src_argb1$ = 16					; size = 4
_src_stride_argb1$ = 20					; size = 4
_dst_argb$ = 24						; size = 4
_dst_stride_argb$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_ARGBBlend PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 550
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 552
	call	_GetARGBBlend
	mov	DWORD PTR _ARGBBlendRow$[ebp], eax
; Line 554
	cmp	DWORD PTR _src_argb0$[ebp], 0
	je	SHORT $LN6@ARGBBlend
	cmp	DWORD PTR _src_argb1$[ebp], 0
	je	SHORT $LN6@ARGBBlend
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@ARGBBlend
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@ARGBBlend
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN7@ARGBBlend
$LN6@ARGBBlend:
; Line 555
	or	eax, -1
	jmp	$LN8@ARGBBlend
$LN7@ARGBBlend:
; Line 558
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN5@ARGBBlend
; Line 559
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 560
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_argb$[ebp]
	add	ecx, DWORD PTR _dst_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 561
	mov	edx, DWORD PTR _dst_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_argb$[ebp], edx
$LN5@ARGBBlend:
; Line 566
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb0$[ebp], eax
	jne	SHORT $LN4@ARGBBlend
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _src_stride_argb1$[ebp], ecx
	jne	SHORT $LN4@ARGBBlend
	mov	edx, DWORD PTR _width$[ebp]
	shl	edx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], edx
	jne	SHORT $LN4@ARGBBlend
; Line 567
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], eax
; Line 568
	mov	DWORD PTR _height$[ebp], 1
; Line 569
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb1$[ebp], ecx
	mov	edx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_stride_argb0$[ebp], edx
$LN4@ARGBBlend:
; Line 572
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBBlend
$LN2@ARGBBlend:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBBlend:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBBlend
; Line 573
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb0$[ebp]
	push	edx
	call	DWORD PTR _ARGBBlendRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 574
	mov	eax, DWORD PTR _src_argb0$[ebp]
	add	eax, DWORD PTR _src_stride_argb0$[ebp]
	mov	DWORD PTR _src_argb0$[ebp], eax
; Line 575
	mov	ecx, DWORD PTR _src_argb1$[ebp]
	add	ecx, DWORD PTR _src_stride_argb1$[ebp]
	mov	DWORD PTR _src_argb1$[ebp], ecx
; Line 576
	mov	edx, DWORD PTR _dst_argb$[ebp]
	add	edx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], edx
; Line 577
	jmp	SHORT $LN2@ARGBBlend
$LN1@ARGBBlend:
; Line 578
	xor	eax, eax
$LN8@ARGBBlend:
; Line 579
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBBlend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _GetARGBBlend
_TEXT	SEGMENT
_ARGBBlendRow$ = -4					; size = 4
_GetARGBBlend PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 528
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 529
	mov	DWORD PTR _ARGBBlendRow$[ebp], OFFSET _ARGBBlendRow_C
; Line 532
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@GetARGBBle
; Line 533
	mov	DWORD PTR _ARGBBlendRow$[ebp], OFFSET _ARGBBlendRow_SSSE3
; Line 534
	mov	eax, DWORD PTR _ARGBBlendRow$[ebp]
	jmp	SHORT $LN2@GetARGBBle
$LN1@GetARGBBle:
; Line 542
	mov	eax, DWORD PTR _ARGBBlendRow$[ebp]
$LN2@GetARGBBle:
; Line 543
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_GetARGBBlend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBCopyYToAlpha
_TEXT	SEGMENT
_ARGBCopyYToAlphaRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBCopyYToAlpha PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2382
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2384
	mov	DWORD PTR _ARGBCopyYToAlphaRow$[ebp], OFFSET _ARGBCopyYToAlphaRow_C
; Line 2386
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN10@ARGBCopyYT
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBCopyYT
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBCopyYT
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBCopyYT
$LN10@ARGBCopyYT:
; Line 2387
	or	eax, -1
	jmp	$LN12@ARGBCopyYT
$LN11@ARGBCopyYT:
; Line 2390
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBCopyYT
; Line 2391
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 2392
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 2393
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
$LN9@ARGBCopyYT:
; Line 2397
	mov	eax, DWORD PTR _src_stride_y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@ARGBCopyYT
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN8@ARGBCopyYT
; Line 2398
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 2399
	mov	DWORD PTR _height$[ebp], 1
; Line 2400
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_y$[ebp], eax
$LN8@ARGBCopyYT:
; Line 2403
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBCopyYT
; Line 2404
	mov	DWORD PTR _ARGBCopyYToAlphaRow$[ebp], OFFSET _ARGBCopyYToAlphaRow_Any_SSE2
; Line 2405
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN7@ARGBCopyYT
; Line 2406
	mov	DWORD PTR _ARGBCopyYToAlphaRow$[ebp], OFFSET _ARGBCopyYToAlphaRow_SSE2
$LN7@ARGBCopyYT:
; Line 2411
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBCopyYT
; Line 2412
	mov	DWORD PTR _ARGBCopyYToAlphaRow$[ebp], OFFSET _ARGBCopyYToAlphaRow_Any_AVX2
; Line 2413
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 15					; 0000000fH
	jne	SHORT $LN5@ARGBCopyYT
; Line 2414
	mov	DWORD PTR _ARGBCopyYToAlphaRow$[ebp], OFFSET _ARGBCopyYToAlphaRow_AVX2
$LN5@ARGBCopyYT:
; Line 2419
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBCopyYT
$LN2@ARGBCopyYT:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBCopyYT:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBCopyYT
; Line 2420
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_y$[ebp]
	push	ecx
	call	DWORD PTR _ARGBCopyYToAlphaRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2421
	mov	edx, DWORD PTR _src_y$[ebp]
	add	edx, DWORD PTR _src_stride_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], edx
; Line 2422
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 2423
	jmp	SHORT $LN2@ARGBCopyYT
$LN1@ARGBCopyYT:
; Line 2424
	xor	eax, eax
$LN12@ARGBCopyYT:
; Line 2425
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBCopyYToAlpha ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBCopyAlpha
_TEXT	SEGMENT
_ARGBCopyAlphaRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBCopyAlpha PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2333
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2335
	mov	DWORD PTR _ARGBCopyAlphaRow$[ebp], OFFSET _ARGBCopyAlphaRow_C
; Line 2337
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN10@ARGBCopyAl
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN10@ARGBCopyAl
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@ARGBCopyAl
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@ARGBCopyAl
$LN10@ARGBCopyAl:
; Line 2338
	or	eax, -1
	jmp	$LN12@ARGBCopyAl
$LN11@ARGBCopyAl:
; Line 2341
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@ARGBCopyAl
; Line 2342
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 2343
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 2344
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN9@ARGBCopyAl:
; Line 2348
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN8@ARGBCopyAl
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN8@ARGBCopyAl
; Line 2349
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 2350
	mov	DWORD PTR _height$[ebp], 1
; Line 2351
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN8@ARGBCopyAl:
; Line 2354
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBCopyAl
; Line 2355
	mov	DWORD PTR _ARGBCopyAlphaRow$[ebp], OFFSET _ARGBCopyAlphaRow_Any_SSE2
; Line 2356
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN7@ARGBCopyAl
; Line 2357
	mov	DWORD PTR _ARGBCopyAlphaRow$[ebp], OFFSET _ARGBCopyAlphaRow_SSE2
$LN7@ARGBCopyAl:
; Line 2362
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBCopyAl
; Line 2363
	mov	DWORD PTR _ARGBCopyAlphaRow$[ebp], OFFSET _ARGBCopyAlphaRow_Any_AVX2
; Line 2364
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 15					; 0000000fH
	jne	SHORT $LN5@ARGBCopyAl
; Line 2365
	mov	DWORD PTR _ARGBCopyAlphaRow$[ebp], OFFSET _ARGBCopyAlphaRow_AVX2
$LN5@ARGBCopyAl:
; Line 2370
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBCopyAl
$LN2@ARGBCopyAl:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBCopyAl:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBCopyAl
; Line 2371
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBCopyAlphaRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2372
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 2373
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 2374
	jmp	SHORT $LN2@ARGBCopyAl
$LN1@ARGBCopyAl:
; Line 2375
	xor	eax, eax
$LN12@ARGBCopyAl:
; Line 2376
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBCopyAlpha ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBQuantize
_TEXT	SEGMENT
_dst$ = -12						; size = 4
_ARGBQuantizeRow$ = -8					; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_scale$ = 16						; size = 4
_interval_size$ = 20					; size = 4
_interval_offset$ = 24					; size = 4
_dst_x$ = 28						; size = 4
_dst_y$ = 32						; size = 4
_width$ = 36						; size = 4
_height$ = 40						; size = 4
_ARGBQuantize PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1649
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1651
	mov	DWORD PTR _ARGBQuantizeRow$[ebp], OFFSET _ARGBQuantizeRow_C
; Line 1653
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1655
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _height$[ebp], 0
	jle	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _dst_y$[ebp], 0
	jl	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _interval_size$[ebp], 1
	jl	SHORT $LN6@ARGBQuanti
	cmp	DWORD PTR _interval_size$[ebp], 255	; 000000ffH
	jle	SHORT $LN7@ARGBQuanti
$LN6@ARGBQuanti:
; Line 1656
	or	eax, -1
	jmp	$LN8@ARGBQuanti
$LN7@ARGBQuanti:
; Line 1659
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBQuanti
; Line 1660
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1661
	mov	DWORD PTR _height$[ebp], 1
; Line 1662
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@ARGBQuanti:
; Line 1665
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBQuanti
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 3
	jne	SHORT $LN4@ARGBQuanti
; Line 1666
	mov	DWORD PTR _ARGBQuantizeRow$[ebp], OFFSET _ARGBQuantizeRow_SSE2
$LN4@ARGBQuanti:
; Line 1674
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBQuanti
$LN2@ARGBQuanti:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBQuanti:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBQuanti
; Line 1675
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _interval_offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _interval_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scale$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	DWORD PTR _ARGBQuantizeRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1676
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
; Line 1677
	jmp	SHORT $LN2@ARGBQuanti
$LN1@ARGBQuanti:
; Line 1678
	xor	eax, eax
$LN8@ARGBQuanti:
; Line 1679
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBQuantize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBPolynomial
_TEXT	SEGMENT
_ARGBPolynomialRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_poly$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_ARGBPolynomial PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2248
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2250
	mov	DWORD PTR _ARGBPolynomialRow$[ebp], OFFSET _ARGBPolynomialRow_C
; Line 2253
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN8@ARGBPolyno
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN8@ARGBPolyno
	cmp	DWORD PTR _poly$[ebp], 0
	je	SHORT $LN8@ARGBPolyno
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN8@ARGBPolyno
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN9@ARGBPolyno
$LN8@ARGBPolyno:
; Line 2254
	or	eax, -1
	jmp	$LN10@ARGBPolyno
$LN9@ARGBPolyno:
; Line 2257
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN7@ARGBPolyno
; Line 2258
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 2259
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 2260
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN7@ARGBPolyno:
; Line 2264
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN6@ARGBPolyno
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN6@ARGBPolyno
; Line 2265
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 2266
	mov	DWORD PTR _height$[ebp], 1
; Line 2267
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN6@ARGBPolyno:
; Line 2270
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBPolyno
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 1
	jne	SHORT $LN5@ARGBPolyno
; Line 2271
	mov	DWORD PTR _ARGBPolynomialRow$[ebp], OFFSET _ARGBPolynomialRow_SSE2
$LN5@ARGBPolyno:
; Line 2276
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBPolyno
	push	4096					; 00001000H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBPolyno
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 1
	jne	SHORT $LN4@ARGBPolyno
; Line 2277
	mov	DWORD PTR _ARGBPolynomialRow$[ebp], OFFSET _ARGBPolynomialRow_AVX2
$LN4@ARGBPolyno:
; Line 2281
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBPolyno
$LN2@ARGBPolyno:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBPolyno:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBPolyno
; Line 2282
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _poly$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_argb$[ebp]
	push	edx
	call	DWORD PTR _ARGBPolynomialRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2283
	mov	eax, DWORD PTR _src_argb$[ebp]
	add	eax, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], eax
; Line 2284
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 2285
	jmp	SHORT $LN2@ARGBPolyno
$LN1@ARGBPolyno:
; Line 2286
	xor	eax, eax
$LN10@ARGBPolyno:
; Line 2287
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBPolynomial ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBLumaColorTable
_TEXT	SEGMENT
_ARGBLumaColorTableRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_luma$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_ARGBLumaColorTable PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2294
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 2296
	mov	DWORD PTR _ARGBLumaColorTableRow$[ebp], OFFSET _ARGBLumaColorTableRow_C
; Line 2299
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN7@ARGBLumaCo
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN7@ARGBLumaCo
	cmp	DWORD PTR _luma$[ebp], 0
	je	SHORT $LN7@ARGBLumaCo
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN7@ARGBLumaCo
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN8@ARGBLumaCo
$LN7@ARGBLumaCo:
; Line 2300
	or	eax, -1
	jmp	$LN9@ARGBLumaCo
$LN8@ARGBLumaCo:
; Line 2303
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN6@ARGBLumaCo
; Line 2304
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 2305
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 2306
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN6@ARGBLumaCo:
; Line 2310
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBLumaCo
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN5@ARGBLumaCo
; Line 2311
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 2312
	mov	DWORD PTR _height$[ebp], 1
; Line 2313
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN5@ARGBLumaCo:
; Line 2316
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBLumaCo
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 3
	jne	SHORT $LN4@ARGBLumaCo
; Line 2317
	mov	DWORD PTR _ARGBLumaColorTableRow$[ebp], OFFSET _ARGBLumaColorTableRow_SSSE3
$LN4@ARGBLumaCo:
; Line 2321
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBLumaCo
$LN2@ARGBLumaCo:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBLumaCo:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBLumaCo
; Line 2322
	mov	esi, esp
	push	2509583					; 00264b0fH
	mov	ecx, DWORD PTR _luma$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBLumaColorTableRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2323
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 2324
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 2325
	jmp	SHORT $LN2@ARGBLumaCo
$LN1@ARGBLumaCo:
; Line 2326
	xor	eax, eax
$LN9@ARGBLumaCo:
; Line 2327
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBLumaColorTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _RGBColorTable
_TEXT	SEGMENT
_dst$ = -12						; size = 4
_RGBColorTableRow$ = -8					; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_table_argb$ = 16					; size = 4
_dst_x$ = 20						; size = 4
_dst_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_RGBColorTable PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1610
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1612
	mov	DWORD PTR _RGBColorTableRow$[ebp], OFFSET _RGBColorTableRow_C
; Line 1614
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1616
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@RGBColorTa
	cmp	DWORD PTR _table_argb$[ebp], 0
	je	SHORT $LN6@RGBColorTa
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@RGBColorTa
	cmp	DWORD PTR _height$[ebp], 0
	jle	SHORT $LN6@RGBColorTa
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN6@RGBColorTa
	cmp	DWORD PTR _dst_y$[ebp], 0
	jge	SHORT $LN7@RGBColorTa
$LN6@RGBColorTa:
; Line 1617
	or	eax, -1
	jmp	SHORT $LN8@RGBColorTa
$LN7@RGBColorTa:
; Line 1620
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@RGBColorTa
; Line 1621
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1622
	mov	DWORD PTR _height$[ebp], 1
; Line 1623
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@RGBColorTa:
; Line 1626
	push	16					; 00000010H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@RGBColorTa
; Line 1627
	mov	DWORD PTR _RGBColorTableRow$[ebp], OFFSET _RGBColorTableRow_X86
$LN4@RGBColorTa:
; Line 1630
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@RGBColorTa
$LN2@RGBColorTa:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@RGBColorTa:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@RGBColorTa
; Line 1631
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	DWORD PTR _RGBColorTableRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1632
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
; Line 1633
	jmp	SHORT $LN2@RGBColorTa
$LN1@RGBColorTa:
; Line 1634
	xor	eax, eax
$LN8@RGBColorTa:
; Line 1635
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RGBColorTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBColorTable
_TEXT	SEGMENT
_dst$ = -12						; size = 4
_ARGBColorTableRow$ = -8				; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_table_argb$ = 16					; size = 4
_dst_x$ = 20						; size = 4
_dst_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_ARGBColorTable PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1578
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1580
	mov	DWORD PTR _ARGBColorTableRow$[ebp], OFFSET _ARGBColorTableRow_C
; Line 1582
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1584
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@ARGBColorT
	cmp	DWORD PTR _table_argb$[ebp], 0
	je	SHORT $LN6@ARGBColorT
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@ARGBColorT
	cmp	DWORD PTR _height$[ebp], 0
	jle	SHORT $LN6@ARGBColorT
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN6@ARGBColorT
	cmp	DWORD PTR _dst_y$[ebp], 0
	jge	SHORT $LN7@ARGBColorT
$LN6@ARGBColorT:
; Line 1585
	or	eax, -1
	jmp	SHORT $LN8@ARGBColorT
$LN7@ARGBColorT:
; Line 1588
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBColorT
; Line 1589
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1590
	mov	DWORD PTR _height$[ebp], 1
; Line 1591
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@ARGBColorT:
; Line 1594
	push	16					; 00000010H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBColorT
; Line 1595
	mov	DWORD PTR _ARGBColorTableRow$[ebp], OFFSET _ARGBColorTableRow_X86
$LN4@ARGBColorT:
; Line 1598
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBColorT
$LN2@ARGBColorT:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBColorT:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBColorT
; Line 1599
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	DWORD PTR _ARGBColorTableRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1600
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
; Line 1601
	jmp	SHORT $LN2@ARGBColorT
$LN1@ARGBColorT:
; Line 1602
	xor	eax, eax
$LN8@ARGBColorT:
; Line 1603
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBColorTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _RGBColorMatrix
_TEXT	SEGMENT
$T1 = -44						; size = 4
_dst$ = -40						; size = 4
_matrix_argb$ = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_matrix_rgb$ = 16					; size = 4
_dst_x$ = 20						; size = 4
_dst_y$ = 24						; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_RGBColorMatrix PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1544
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1546
	mov	eax, DWORD PTR _dst_y$[ebx]
	imul	eax, DWORD PTR _dst_stride_argb$[ebx]
	add	eax, DWORD PTR _dst_argb$[ebx]
	mov	ecx, DWORD PTR _dst_x$[ebx]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1548
	cmp	DWORD PTR _dst_argb$[ebx], 0
	je	SHORT $LN1@RGBColorMa
	cmp	DWORD PTR _matrix_rgb$[ebx], 0
	je	SHORT $LN1@RGBColorMa
	cmp	DWORD PTR _width$[ebx], 0
	jle	SHORT $LN1@RGBColorMa
	cmp	DWORD PTR _height$[ebx], 0
	jle	SHORT $LN1@RGBColorMa
	cmp	DWORD PTR _dst_x$[ebx], 0
	jl	SHORT $LN1@RGBColorMa
	cmp	DWORD PTR _dst_y$[ebx], 0
	jge	SHORT $LN2@RGBColorMa
$LN1@RGBColorMa:
; Line 1549
	or	eax, -1
	jmp	$LN4@RGBColorMa
$LN2@RGBColorMa:
; Line 1553
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1554
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [ecx+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 1
	shl	edx, 0
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1555
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [ecx+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1556
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1557
	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [ecx+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 1
	shl	edx, 2
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1558
	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1559
	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 6
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1560
	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 7
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1561
	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [ecx+eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, 1
	shl	edx, 3
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1562
	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 9
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1563
	mov	eax, 1
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 10
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1564
	mov	eax, 1
	imul	ecx, eax, 11
	mov	edx, DWORD PTR _matrix_rgb$[ebx]
	movsx	eax, BYTE PTR [edx+ecx]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, 1
	imul	edx, ecx, 11
	mov	BYTE PTR _matrix_argb$[ebp+edx], al
; Line 1565
	mov	eax, 1
	imul	ecx, eax, 12
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 16			; 00000010H
	jae	SHORT $LN5@RGBColorMa
	jmp	SHORT $LN6@RGBColorMa
$LN5@RGBColorMa:
	call	___report_rangecheckfailure
$LN6@RGBColorMa:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _matrix_argb$[ebp+edx], 0
	mov	eax, 1
	imul	ecx, eax, 13
	mov	BYTE PTR _matrix_argb$[ebp+ecx], 0
	mov	edx, 1
	imul	eax, edx, 14
	mov	BYTE PTR _matrix_argb$[ebp+eax], 0
; Line 1566
	mov	ecx, 1
	imul	edx, ecx, 15
	mov	BYTE PTR _matrix_argb$[ebp+edx], 64	; 00000040H
; Line 1570
	mov	eax, DWORD PTR _height$[ebx]
	push	eax
	mov	ecx, DWORD PTR _width$[ebx]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	lea	ecx, DWORD PTR _matrix_argb$[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_argb$[ebx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_argb$[ebx]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_ARGBColorMatrix
	add	esp, 28					; 0000001cH
$LN4@RGBColorMa:
; Line 1571
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@RGBColorMa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN9@RGBColorMa:
	DD	1
	DD	$LN8@RGBColorMa
$LN8@RGBColorMa:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN7@RGBColorMa
$LN7@RGBColorMa:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	98					; 00000062H
	DB	0
_RGBColorMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBColorMatrix
_TEXT	SEGMENT
_ARGBColorMatrixRow$ = -8				; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_matrix_argb$ = 24					; size = 4
_width$ = 28						; size = 4
_height$ = 32						; size = 4
_ARGBColorMatrix PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1502
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1504
	mov	DWORD PTR _ARGBColorMatrixRow$[ebp], OFFSET _ARGBColorMatrixRow_C
; Line 1506
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN7@ARGBColorM
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN7@ARGBColorM
	cmp	DWORD PTR _matrix_argb$[ebp], 0
	je	SHORT $LN7@ARGBColorM
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN7@ARGBColorM
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN8@ARGBColorM
$LN7@ARGBColorM:
; Line 1507
	or	eax, -1
	jmp	$LN9@ARGBColorM
$LN8@ARGBColorM:
; Line 1509
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN6@ARGBColorM
; Line 1510
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1511
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1512
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN6@ARGBColorM:
; Line 1516
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBColorM
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN5@ARGBColorM
; Line 1517
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1518
	mov	DWORD PTR _height$[ebp], 1
; Line 1519
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN5@ARGBColorM:
; Line 1522
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBColorM
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN4@ARGBColorM
; Line 1523
	mov	DWORD PTR _ARGBColorMatrixRow$[ebp], OFFSET _ARGBColorMatrixRow_SSSE3
$LN4@ARGBColorM:
; Line 1531
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBColorM
$LN2@ARGBColorM:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBColorM:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBColorM
; Line 1532
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _matrix_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_argb$[ebp]
	push	ecx
	call	DWORD PTR _ARGBColorMatrixRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1533
	mov	edx, DWORD PTR _src_argb$[ebp]
	add	edx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], edx
; Line 1534
	mov	eax, DWORD PTR _dst_argb$[ebp]
	add	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], eax
; Line 1535
	jmp	SHORT $LN2@ARGBColorM
$LN1@ARGBColorM:
; Line 1536
	xor	eax, eax
$LN9@ARGBColorM:
; Line 1537
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBColorMatrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBSepia
_TEXT	SEGMENT
_dst$ = -12						; size = 4
_ARGBSepiaRow$ = -8					; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_dst_x$ = 16						; size = 4
_dst_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBSepia PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1468
	mov	DWORD PTR _ARGBSepiaRow$[ebp], OFFSET _ARGBSepiaRow_C
; Line 1469
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1470
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@ARGBSepia
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@ARGBSepia
	cmp	DWORD PTR _height$[ebp], 0
	jle	SHORT $LN6@ARGBSepia
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN6@ARGBSepia
	cmp	DWORD PTR _dst_y$[ebp], 0
	jge	SHORT $LN7@ARGBSepia
$LN6@ARGBSepia:
; Line 1471
	or	eax, -1
	jmp	SHORT $LN8@ARGBSepia
$LN7@ARGBSepia:
; Line 1474
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBSepia
; Line 1475
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1476
	mov	DWORD PTR _height$[ebp], 1
; Line 1477
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@ARGBSepia:
; Line 1480
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBSepia
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN4@ARGBSepia
; Line 1481
	mov	DWORD PTR _ARGBSepiaRow$[ebp], OFFSET _ARGBSepiaRow_SSSE3
$LN4@ARGBSepia:
; Line 1489
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBSepia
$LN2@ARGBSepia:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBSepia:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBSepia
; Line 1490
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	DWORD PTR _ARGBSepiaRow$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1491
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
; Line 1492
	jmp	SHORT $LN2@ARGBSepia
$LN1@ARGBSepia:
; Line 1493
	xor	eax, eax
$LN8@ARGBSepia:
; Line 1494
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBSepia ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBGray
_TEXT	SEGMENT
_dst$ = -12						; size = 4
_ARGBGrayRow$ = -8					; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_dst_x$ = 16						; size = 4
_dst_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBGray PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1432
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1434
	mov	DWORD PTR _ARGBGrayRow$[ebp], OFFSET _ARGBGrayRow_C
; Line 1436
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1437
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN6@ARGBGray
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN6@ARGBGray
	cmp	DWORD PTR _height$[ebp], 0
	jle	SHORT $LN6@ARGBGray
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN6@ARGBGray
	cmp	DWORD PTR _dst_y$[ebp], 0
	jge	SHORT $LN7@ARGBGray
$LN6@ARGBGray:
; Line 1438
	or	eax, -1
	jmp	$LN8@ARGBGray
$LN7@ARGBGray:
; Line 1441
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBGray
; Line 1442
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1443
	mov	DWORD PTR _height$[ebp], 1
; Line 1444
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@ARGBGray:
; Line 1447
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBGray
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 7
	jne	SHORT $LN4@ARGBGray
; Line 1448
	mov	DWORD PTR _ARGBGrayRow$[ebp], OFFSET _ARGBGrayRow_SSSE3
$LN4@ARGBGray:
; Line 1456
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBGray
$LN2@ARGBGray:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@ARGBGray:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBGray
; Line 1457
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	DWORD PTR _ARGBGrayRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1458
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst$[ebp], edx
; Line 1459
	jmp	SHORT $LN2@ARGBGray
$LN1@ARGBGray:
; Line 1460
	xor	eax, eax
$LN8@ARGBGray:
; Line 1461
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBGray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBGrayTo
_TEXT	SEGMENT
_ARGBGrayRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBGrayTo PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1390
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1392
	mov	DWORD PTR _ARGBGrayRow$[ebp], OFFSET _ARGBGrayRow_C
; Line 1394
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN7@ARGBGrayTo
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN7@ARGBGrayTo
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN7@ARGBGrayTo
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN8@ARGBGrayTo
$LN7@ARGBGrayTo:
; Line 1395
	or	eax, -1
	jmp	$LN9@ARGBGrayTo
$LN8@ARGBGrayTo:
; Line 1397
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN6@ARGBGrayTo
; Line 1398
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1399
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1400
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN6@ARGBGrayTo:
; Line 1404
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _src_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBGrayTo
	mov	ecx, DWORD PTR _width$[ebp]
	shl	ecx, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], ecx
	jne	SHORT $LN5@ARGBGrayTo
; Line 1405
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1406
	mov	DWORD PTR _height$[ebp], 1
; Line 1407
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _src_stride_argb$[ebp], eax
$LN5@ARGBGrayTo:
; Line 1410
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBGrayTo
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN4@ARGBGrayTo
; Line 1411
	mov	DWORD PTR _ARGBGrayRow$[ebp], OFFSET _ARGBGrayRow_SSSE3
$LN4@ARGBGrayTo:
; Line 1420
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBGrayTo
$LN2@ARGBGrayTo:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBGrayTo:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBGrayTo
; Line 1421
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb$[ebp]
	push	eax
	call	DWORD PTR _ARGBGrayRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1422
	mov	ecx, DWORD PTR _src_argb$[ebp]
	add	ecx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 1423
	mov	edx, DWORD PTR _dst_argb$[ebp]
	add	edx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], edx
; Line 1424
	jmp	SHORT $LN2@ARGBGrayTo
$LN1@ARGBGrayTo:
; Line 1425
	xor	eax, eax
$LN9@ARGBGrayTo:
; Line 1426
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBGrayTo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBRect
_TEXT	SEGMENT
_ARGBSetRow$ = -8					; size = 4
_y$ = -4						; size = 4
_dst_argb$ = 8						; size = 4
_dst_stride_argb$ = 12					; size = 4
_dst_x$ = 16						; size = 4
_dst_y$ = 20						; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_value$ = 32						; size = 4
_ARGBRect PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1226
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1228
	mov	DWORD PTR _ARGBSetRow$[ebp], OFFSET _ARGBSetRow_C
; Line 1231
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN7@ARGBRect
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN7@ARGBRect
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN7@ARGBRect
	cmp	DWORD PTR _dst_x$[ebp], 0
	jl	SHORT $LN7@ARGBRect
	cmp	DWORD PTR _dst_y$[ebp], 0
	jge	SHORT $LN8@ARGBRect
$LN7@ARGBRect:
; Line 1232
	or	eax, -1
	jmp	$LN9@ARGBRect
$LN8@ARGBRect:
; Line 1234
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN6@ARGBRect
; Line 1235
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1236
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_argb$[ebp]
	add	ecx, DWORD PTR _dst_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 1237
	mov	edx, DWORD PTR _dst_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_argb$[ebp], edx
$LN6@ARGBRect:
; Line 1239
	mov	eax, DWORD PTR _dst_y$[ebp]
	imul	eax, DWORD PTR _dst_stride_argb$[ebp]
	add	eax, DWORD PTR _dst_argb$[ebp]
	mov	ecx, DWORD PTR _dst_x$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dst_argb$[ebp], edx
; Line 1241
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 2
	cmp	DWORD PTR _dst_stride_argb$[ebp], eax
	jne	SHORT $LN5@ARGBRect
; Line 1242
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1243
	mov	DWORD PTR _height$[ebp], 1
; Line 1244
	mov	DWORD PTR _dst_stride_argb$[ebp], 0
$LN5@ARGBRect:
; Line 1256
	push	16					; 00000010H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@ARGBRect
; Line 1257
	mov	DWORD PTR _ARGBSetRow$[ebp], OFFSET _ARGBSetRow_X86
$LN4@ARGBRect:
; Line 1262
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBRect
$LN2@ARGBRect:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBRect:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBRect
; Line 1263
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_argb$[ebp]
	push	eax
	call	DWORD PTR _ARGBSetRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1264
	mov	ecx, DWORD PTR _dst_argb$[ebp]
	add	ecx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], ecx
; Line 1265
	jmp	SHORT $LN2@ARGBRect
$LN1@ARGBRect:
; Line 1266
	xor	eax, eax
$LN9@ARGBRect:
; Line 1267
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBRect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I420Rect
_TEXT	SEGMENT
_start_v$ = -20						; size = 4
_start_u$ = -16						; size = 4
_start_y$ = -12						; size = 4
_halfheight$ = -8					; size = 4
_halfwidth$ = -4					; size = 4
_dst_y$ = 8						; size = 4
_dst_stride_y$ = 12					; size = 4
_dst_u$ = 16						; size = 4
_dst_stride_u$ = 20					; size = 4
_dst_v$ = 24						; size = 4
_dst_stride_v$ = 28					; size = 4
_x$ = 32						; size = 4
_y$ = 36						; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_value_y$ = 48						; size = 4
_value_u$ = 52						; size = 4
_value_v$ = 56						; size = 4
_I420Rect PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1200
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1201
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 1202
	mov	ecx, DWORD PTR _height$[ebp]
	add	ecx, 1
	sar	ecx, 1
	mov	DWORD PTR _halfheight$[ebp], ecx
; Line 1203
	mov	edx, DWORD PTR _y$[ebp]
	imul	edx, DWORD PTR _dst_stride_y$[ebp]
	add	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _start_y$[ebp], edx
; Line 1204
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_u$[ebp]
	add	ecx, DWORD PTR _dst_u$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _start_u$[ebp], ecx
; Line 1205
	mov	eax, DWORD PTR _y$[ebp]
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_v$[ebp]
	add	ecx, DWORD PTR _dst_v$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	mov	DWORD PTR _start_v$[ebp], ecx
; Line 1211
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN1@I420Rect
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN1@I420Rect
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN1@I420Rect
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN1@I420Rect
	cmp	DWORD PTR _height$[ebp], 0
	je	SHORT $LN1@I420Rect
	cmp	DWORD PTR _x$[ebp], 0
	jl	SHORT $LN1@I420Rect
	cmp	DWORD PTR _y$[ebp], 0
	jl	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_y$[ebp], 0
	jl	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_y$[ebp], 255		; 000000ffH
	jg	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_u$[ebp], 0
	jl	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_u$[ebp], 255		; 000000ffH
	jg	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_v$[ebp], 0
	jl	SHORT $LN1@I420Rect
	cmp	DWORD PTR _value_v$[ebp], 255		; 000000ffH
	jle	SHORT $LN2@I420Rect
$LN1@I420Rect:
; Line 1212
	or	eax, -1
	jmp	SHORT $LN3@I420Rect
$LN2@I420Rect:
; Line 1215
	mov	edx, DWORD PTR _value_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _start_y$[ebp]
	push	eax
	call	_SetPlane
	add	esp, 20					; 00000014H
; Line 1216
	mov	ecx, DWORD PTR _value_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _halfheight$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfwidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start_u$[ebp]
	push	edx
	call	_SetPlane
	add	esp, 20					; 00000014H
; Line 1217
	mov	eax, DWORD PTR _value_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _halfheight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _halfwidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start_v$[ebp]
	push	ecx
	call	_SetPlane
	add	esp, 20					; 00000014H
; Line 1218
	xor	eax, eax
$LN3@I420Rect:
; Line 1219
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I420Rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _RAWToRGB24
_TEXT	SEGMENT
_RAWToRGB24Row$ = -8					; size = 4
_y$ = -4						; size = 4
_src_raw$ = 8						; size = 4
_src_stride_raw$ = 12					; size = 4
_dst_rgb24$ = 16					; size = 4
_dst_stride_rgb24$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_RAWToRGB24 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1101
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1103
	mov	DWORD PTR _RAWToRGB24Row$[ebp], OFFSET _RAWToRGB24Row_C
; Line 1106
	cmp	DWORD PTR _src_raw$[ebp], 0
	je	SHORT $LN8@RAWToRGB24
	cmp	DWORD PTR _dst_rgb24$[ebp], 0
	je	SHORT $LN8@RAWToRGB24
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN8@RAWToRGB24
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN9@RAWToRGB24
$LN8@RAWToRGB24:
; Line 1107
	or	eax, -1
	jmp	$LN10@RAWToRGB24
$LN9@RAWToRGB24:
; Line 1110
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN7@RAWToRGB24
; Line 1111
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1112
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_raw$[ebp]
	add	ecx, DWORD PTR _src_raw$[ebp]
	mov	DWORD PTR _src_raw$[ebp], ecx
; Line 1113
	mov	edx, DWORD PTR _src_stride_raw$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_raw$[ebp], edx
$LN7@RAWToRGB24:
; Line 1117
	imul	eax, DWORD PTR _width$[ebp], 3
	cmp	DWORD PTR _src_stride_raw$[ebp], eax
	jne	SHORT $LN6@RAWToRGB24
	imul	ecx, DWORD PTR _width$[ebp], 3
	cmp	DWORD PTR _dst_stride_rgb24$[ebp], ecx
	jne	SHORT $LN6@RAWToRGB24
; Line 1118
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 1119
	mov	DWORD PTR _height$[ebp], 1
; Line 1120
	mov	DWORD PTR _dst_stride_rgb24$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_rgb24$[ebp]
	mov	DWORD PTR _src_stride_raw$[ebp], eax
$LN6@RAWToRGB24:
; Line 1123
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@RAWToRGB24
; Line 1124
	mov	DWORD PTR _RAWToRGB24Row$[ebp], OFFSET _RAWToRGB24Row_Any_SSSE3
; Line 1125
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN5@RAWToRGB24
; Line 1126
	mov	DWORD PTR _RAWToRGB24Row$[ebp], OFFSET _RAWToRGB24Row_SSSE3
$LN5@RAWToRGB24:
; Line 1139
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@RAWToRGB24
$LN2@RAWToRGB24:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@RAWToRGB24:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@RAWToRGB24
; Line 1140
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_rgb24$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_raw$[ebp]
	push	eax
	call	DWORD PTR _RAWToRGB24Row$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1141
	mov	ecx, DWORD PTR _src_raw$[ebp]
	add	ecx, DWORD PTR _src_stride_raw$[ebp]
	mov	DWORD PTR _src_raw$[ebp], ecx
; Line 1142
	mov	edx, DWORD PTR _dst_rgb24$[ebp]
	add	edx, DWORD PTR _dst_stride_rgb24$[ebp]
	mov	DWORD PTR _dst_rgb24$[ebp], edx
; Line 1143
	jmp	SHORT $LN2@RAWToRGB24
$LN1@RAWToRGB24:
; Line 1144
	xor	eax, eax
$LN10@RAWToRGB24:
; Line 1145
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_RAWToRGB24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I422ToRGBA
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_rgba$ = 32						; size = 4
_dst_stride_rgba$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_I422ToRGBA PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1015
	push	ebp
	mov	ebp, esp
; Line 1021
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	OFFSET _kYuvI601Constants
	mov	edx, DWORD PTR _dst_stride_rgba$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_rgba$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	_I422ToRGBAMatrix
	add	esp, 44					; 0000002cH
; Line 1022
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I422ToRGBA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I422ToBGRA
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_bgra$ = 32						; size = 4
_dst_stride_bgra$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_I422ToBGRA PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1030
	push	ebp
	mov	ebp, esp
; Line 1036
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	OFFSET _kYvuI601Constants
	mov	edx, DWORD PTR _dst_stride_bgra$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_bgra$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	_I422ToRGBAMatrix
	add	esp, 44					; 0000002cH
; Line 1037
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I422ToBGRA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _NV12ToRGB565
_TEXT	SEGMENT
_NV12ToRGB565Row$ = -8					; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_uv$ = 16						; size = 4
_src_stride_uv$ = 20					; size = 4
_dst_rgb565$ = 24					; size = 4
_dst_stride_rgb565$ = 28				; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_NV12ToRGB565 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1044
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1046
	mov	DWORD PTR _NV12ToRGB565Row$[ebp], OFFSET _NV12ToRGB565Row_C
; Line 1052
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN10@NV12ToRGB5
	cmp	DWORD PTR _src_uv$[ebp], 0
	je	SHORT $LN10@NV12ToRGB5
	cmp	DWORD PTR _dst_rgb565$[ebp], 0
	je	SHORT $LN10@NV12ToRGB5
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN10@NV12ToRGB5
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN11@NV12ToRGB5
$LN10@NV12ToRGB5:
; Line 1053
	or	eax, -1
	jmp	$LN12@NV12ToRGB5
$LN11@NV12ToRGB5:
; Line 1056
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@NV12ToRGB5
; Line 1057
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1058
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_rgb565$[ebp]
	add	ecx, DWORD PTR _dst_rgb565$[ebp]
	mov	DWORD PTR _dst_rgb565$[ebp], ecx
; Line 1059
	mov	edx, DWORD PTR _dst_stride_rgb565$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_rgb565$[ebp], edx
$LN9@NV12ToRGB5:
; Line 1062
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@NV12ToRGB5
; Line 1063
	mov	DWORD PTR _NV12ToRGB565Row$[ebp], OFFSET _NV12ToRGB565Row_Any_SSSE3
; Line 1064
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 7
	jne	SHORT $LN8@NV12ToRGB5
; Line 1065
	mov	DWORD PTR _NV12ToRGB565Row$[ebp], OFFSET _NV12ToRGB565Row_SSSE3
$LN8@NV12ToRGB5:
; Line 1070
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@NV12ToRGB5
; Line 1071
	mov	DWORD PTR _NV12ToRGB565Row$[ebp], OFFSET _NV12ToRGB565Row_Any_AVX2
; Line 1072
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN6@NV12ToRGB5
; Line 1073
	mov	DWORD PTR _NV12ToRGB565Row$[ebp], OFFSET _NV12ToRGB565Row_AVX2
$LN6@NV12ToRGB5:
; Line 1086
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@NV12ToRGB5
$LN3@NV12ToRGB5:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN4@NV12ToRGB5:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN2@NV12ToRGB5
; Line 1087
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	push	OFFSET _kYuvI601Constants
	mov	edx, DWORD PTR _dst_rgb565$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_uv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_y$[ebp]
	push	ecx
	call	DWORD PTR _NV12ToRGB565Row$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1088
	mov	edx, DWORD PTR _dst_rgb565$[ebp]
	add	edx, DWORD PTR _dst_stride_rgb565$[ebp]
	mov	DWORD PTR _dst_rgb565$[ebp], edx
; Line 1089
	mov	eax, DWORD PTR _src_y$[ebp]
	add	eax, DWORD PTR _src_stride_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], eax
; Line 1090
	mov	ecx, DWORD PTR _y$[ebp]
	and	ecx, 1
	je	SHORT $LN1@NV12ToRGB5
; Line 1091
	mov	edx, DWORD PTR _src_uv$[ebp]
	add	edx, DWORD PTR _src_stride_uv$[ebp]
	mov	DWORD PTR _src_uv$[ebp], edx
$LN1@NV12ToRGB5:
; Line 1093
	jmp	SHORT $LN3@NV12ToRGB5
$LN2@NV12ToRGB5:
; Line 1094
	xor	eax, eax
$LN12@NV12ToRGB5:
; Line 1095
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_NV12ToRGB565 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ARGBMirror
_TEXT	SEGMENT
_ARGBMirrorRow$ = -8					; size = 4
_y$ = -4						; size = 4
_src_argb$ = 8						; size = 4
_src_stride_argb$ = 12					; size = 4
_dst_argb$ = 16						; size = 4
_dst_stride_argb$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_ARGBMirror PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 479
	mov	DWORD PTR _ARGBMirrorRow$[ebp], OFFSET _ARGBMirrorRow_C
; Line 481
	cmp	DWORD PTR _src_argb$[ebp], 0
	je	SHORT $LN9@ARGBMirror
	cmp	DWORD PTR _dst_argb$[ebp], 0
	je	SHORT $LN9@ARGBMirror
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN9@ARGBMirror
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN10@ARGBMirror
$LN9@ARGBMirror:
; Line 482
	or	eax, -1
	jmp	$LN11@ARGBMirror
$LN10@ARGBMirror:
; Line 485
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN8@ARGBMirror
; Line 486
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 487
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_argb$[ebp]
	add	ecx, DWORD PTR _src_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 488
	mov	edx, DWORD PTR _src_stride_argb$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_argb$[ebp], edx
$LN8@ARGBMirror:
; Line 499
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@ARGBMirror
; Line 500
	mov	DWORD PTR _ARGBMirrorRow$[ebp], OFFSET _ARGBMirrorRow_Any_SSE2
; Line 501
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 3
	jne	SHORT $LN7@ARGBMirror
; Line 502
	mov	DWORD PTR _ARGBMirrorRow$[ebp], OFFSET _ARGBMirrorRow_SSE2
$LN7@ARGBMirror:
; Line 507
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@ARGBMirror
; Line 508
	mov	DWORD PTR _ARGBMirrorRow$[ebp], OFFSET _ARGBMirrorRow_Any_AVX2
; Line 509
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 7
	jne	SHORT $LN5@ARGBMirror
; Line 510
	mov	DWORD PTR _ARGBMirrorRow$[ebp], OFFSET _ARGBMirrorRow_AVX2
$LN5@ARGBMirror:
; Line 516
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@ARGBMirror
$LN2@ARGBMirror:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 1
	mov	DWORD PTR _y$[ebp], edx
$LN3@ARGBMirror:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@ARGBMirror
; Line 517
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_argb$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_argb$[ebp]
	push	eax
	call	DWORD PTR _ARGBMirrorRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 518
	mov	ecx, DWORD PTR _src_argb$[ebp]
	add	ecx, DWORD PTR _src_stride_argb$[ebp]
	mov	DWORD PTR _src_argb$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _dst_argb$[ebp]
	add	edx, DWORD PTR _dst_stride_argb$[ebp]
	mov	DWORD PTR _dst_argb$[ebp], edx
; Line 520
	jmp	SHORT $LN2@ARGBMirror
$LN1@ARGBMirror:
; Line 521
	xor	eax, eax
$LN11@ARGBMirror:
; Line 522
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_ARGBMirror ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I400Mirror
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_I400Mirror PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 422
	push	ebp
	mov	ebp, esp
; Line 424
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN2@I400Mirror
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN2@I400Mirror
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN2@I400Mirror
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN3@I400Mirror
$LN2@I400Mirror:
; Line 425
	or	eax, -1
	jmp	SHORT $LN4@I400Mirror
$LN3@I400Mirror:
; Line 428
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN1@I400Mirror
; Line 429
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 430
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 431
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
$LN1@I400Mirror:
; Line 434
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y$[ebp]
	push	edx
	call	_MirrorPlane
	add	esp, 24					; 00000018H
; Line 435
	xor	eax, eax
$LN4@I400Mirror:
; Line 436
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I400Mirror ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I420Mirror
_TEXT	SEGMENT
_halfheight$ = -8					; size = 4
_halfwidth$ = -4					; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_y$ = 32						; size = 4
_dst_stride_y$ = 36					; size = 4
_dst_u$ = 40						; size = 4
_dst_stride_u$ = 44					; size = 4
_dst_v$ = 48						; size = 4
_dst_stride_v$ = 52					; size = 4
_width$ = 56						; size = 4
_height$ = 60						; size = 4
_I420Mirror PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 447
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 448
	mov	ecx, DWORD PTR _height$[ebp]
	add	ecx, 1
	sar	ecx, 1
	mov	DWORD PTR _halfheight$[ebp], ecx
; Line 450
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _src_u$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _src_v$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN3@I420Mirror
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN4@I420Mirror
$LN3@I420Mirror:
; Line 451
	or	eax, -1
	jmp	$LN5@I420Mirror
$LN4@I420Mirror:
; Line 454
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN2@I420Mirror
; Line 455
	mov	edx, DWORD PTR _height$[ebp]
	neg	edx
	mov	DWORD PTR _height$[ebp], edx
; Line 456
	mov	eax, DWORD PTR _height$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfheight$[ebp], eax
; Line 457
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 458
	mov	edx, DWORD PTR _halfheight$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _src_stride_u$[ebp]
	add	edx, DWORD PTR _src_u$[ebp]
	mov	DWORD PTR _src_u$[ebp], edx
; Line 459
	mov	eax, DWORD PTR _halfheight$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _src_stride_v$[ebp]
	add	eax, DWORD PTR _src_v$[ebp]
	mov	DWORD PTR _src_v$[ebp], eax
; Line 460
	mov	ecx, DWORD PTR _src_stride_y$[ebp]
	neg	ecx
	mov	DWORD PTR _src_stride_y$[ebp], ecx
; Line 461
	mov	edx, DWORD PTR _src_stride_u$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_u$[ebp], edx
; Line 462
	mov	eax, DWORD PTR _src_stride_v$[ebp]
	neg	eax
	mov	DWORD PTR _src_stride_v$[ebp], eax
$LN2@I420Mirror:
; Line 465
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN1@I420Mirror
; Line 466
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	_MirrorPlane
	add	esp, 24					; 00000018H
$LN1@I420Mirror:
; Line 468
	mov	ecx, DWORD PTR _halfheight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _halfwidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_u$[ebp]
	push	eax
	call	_MirrorPlane
	add	esp, 24					; 00000018H
; Line 469
	mov	ecx, DWORD PTR _halfheight$[ebp]
	push	ecx
	mov	edx, DWORD PTR _halfwidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_v$[ebp]
	push	eax
	call	_MirrorPlane
	add	esp, 24					; 00000018H
; Line 470
	xor	eax, eax
$LN5@I420Mirror:
; Line 471
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I420Mirror ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I420ToI400
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_y$ = 32						; size = 4
_dst_stride_y$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_I420ToI400 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 207
	push	ebp
	mov	ebp, esp
; Line 208
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN2@I420ToI400
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN2@I420ToI400
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN2@I420ToI400
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN3@I420ToI400
$LN2@I420ToI400:
; Line 209
	or	eax, -1
	jmp	SHORT $LN4@I420ToI400
$LN3@I420ToI400:
; Line 212
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN1@I420ToI400
; Line 213
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 214
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 215
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
$LN1@I420ToI400:
; Line 217
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y$[ebp]
	push	edx
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 218
	xor	eax, eax
$LN4@I420ToI400:
; Line 219
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I420ToI400 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _UYVYToNV12
_TEXT	SEGMENT
_rows$1 = -28						; size = 4
_rows_mem$2 = -24					; size = 4
_awidth$3 = -20						; size = 4
_InterpolateRow$ = -16					; size = 4
_SplitUVRow$ = -12					; size = 4
_halfwidth$ = -8					; size = 4
_y$ = -4						; size = 4
_src_uyvy$ = 8						; size = 4
_src_stride_uyvy$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_dst_uv$ = 24						; size = 4
_dst_stride_uv$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_UYVYToNV12 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2532
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2534
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 2535
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_C
; Line 2537
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_C
; Line 2542
	cmp	DWORD PTR _src_uyvy$[ebp], 0
	je	SHORT $LN14@UYVYToNV12
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN14@UYVYToNV12
	cmp	DWORD PTR _dst_uv$[ebp], 0
	je	SHORT $LN14@UYVYToNV12
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN14@UYVYToNV12
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN15@UYVYToNV12
$LN14@UYVYToNV12:
; Line 2543
	or	eax, -1
	jmp	$LN16@UYVYToNV12
$LN15@UYVYToNV12:
; Line 2546
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN13@UYVYToNV12
; Line 2547
	mov	ecx, DWORD PTR _height$[ebp]
	neg	ecx
	mov	DWORD PTR _height$[ebp], ecx
; Line 2548
	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _src_stride_uyvy$[ebp]
	add	edx, DWORD PTR _src_uyvy$[ebp]
	mov	DWORD PTR _src_uyvy$[ebp], edx
; Line 2549
	mov	eax, DWORD PTR _src_stride_uyvy$[ebp]
	neg	eax
	mov	DWORD PTR _src_stride_uyvy$[ebp], eax
$LN13@UYVYToNV12:
; Line 2552
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@UYVYToNV12
; Line 2553
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_Any_SSE2
; Line 2554
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN12@UYVYToNV12
; Line 2555
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_SSE2
$LN12@UYVYToNV12:
; Line 2560
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@UYVYToNV12
; Line 2561
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_Any_AVX2
; Line 2562
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 31					; 0000001fH
	jne	SHORT $LN10@UYVYToNV12
; Line 2563
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_AVX2
$LN10@UYVYToNV12:
; Line 2576
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@UYVYToNV12
; Line 2577
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_SSSE3
; Line 2578
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN8@UYVYToNV12
; Line 2579
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_SSSE3
$LN8@UYVYToNV12:
; Line 2584
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@UYVYToNV12
; Line 2585
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_AVX2
; Line 2586
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 31					; 0000001fH
	jne	SHORT $LN6@UYVYToNV12
; Line 2587
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_AVX2
$LN6@UYVYToNV12:
; Line 2601
	mov	edx, DWORD PTR _halfwidth$[ebp]
	shl	edx, 1
	mov	DWORD PTR _awidth$3[ebp], edx
; Line 2603
	imul	eax, DWORD PTR _awidth$3[ebp], 3
	add	eax, 63					; 0000003fH
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _rows_mem$2[ebp], eax
	mov	ecx, DWORD PTR _rows_mem$2[ebp]
	add	ecx, 63					; 0000003fH
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _rows$1[ebp], ecx
; Line 2605
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@UYVYToNV12
$LN3@UYVYToNV12:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 2
	mov	DWORD PTR _y$[ebp], edx
$LN4@UYVYToNV12:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN2@UYVYToNV12
; Line 2607
	mov	esi, esp
	mov	ecx, DWORD PTR _awidth$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _rows$1[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	add	eax, DWORD PTR _awidth$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_uyvy$[ebp]
	push	ecx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2608
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2609
	mov	esi, esp
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _awidth$3[ebp]
	mov	edx, DWORD PTR _rows$1[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	push	eax
	mov	ecx, DWORD PTR _src_uyvy$[ebp]
	add	ecx, DWORD PTR _src_stride_uyvy$[ebp]
	push	ecx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2610
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	add	ecx, DWORD PTR _dst_stride_y$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2611
	mov	esi, esp
	push	128					; 00000080H
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _awidth$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$1[ebp]
	add	ecx, DWORD PTR _awidth$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_uv$[ebp]
	push	edx
	call	DWORD PTR _InterpolateRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2612
	mov	eax, DWORD PTR _src_stride_uyvy$[ebp]
	mov	ecx, DWORD PTR _src_uyvy$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _src_uyvy$[ebp], edx
; Line 2613
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	mov	ecx, DWORD PTR _dst_y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 2614
	mov	eax, DWORD PTR _dst_uv$[ebp]
	add	eax, DWORD PTR _dst_stride_uv$[ebp]
	mov	DWORD PTR _dst_uv$[ebp], eax
; Line 2615
	jmp	$LN3@UYVYToNV12
$LN2@UYVYToNV12:
; Line 2616
	mov	ecx, DWORD PTR _height$[ebp]
	and	ecx, 1
	je	SHORT $LN1@UYVYToNV12
; Line 2618
	mov	esi, esp
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_uv$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_uyvy$[ebp]
	push	edx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2619
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@UYVYToNV12:
; Line 2621
	mov	eax, DWORD PTR _rows_mem$2[ebp]
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR _rows$1[ebp], 0
; Line 2623
	xor	eax, eax
$LN16@UYVYToNV12:
; Line 2624
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_UYVYToNV12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _YUY2ToNV12
_TEXT	SEGMENT
_rows$1 = -28						; size = 4
_rows_mem$2 = -24					; size = 4
_awidth$3 = -20						; size = 4
_InterpolateRow$ = -16					; size = 4
_SplitUVRow$ = -12					; size = 4
_halfwidth$ = -8					; size = 4
_y$ = -4						; size = 4
_src_yuy2$ = 8						; size = 4
_src_stride_yuy2$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_dst_uv$ = 24						; size = 4
_dst_stride_uv$ = 28					; size = 4
_width$ = 32						; size = 4
_height$ = 36						; size = 4
_YUY2ToNV12 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 2434
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 2436
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 2437
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_C
; Line 2439
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_C
; Line 2444
	cmp	DWORD PTR _src_yuy2$[ebp], 0
	je	SHORT $LN14@YUY2ToNV12
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN14@YUY2ToNV12
	cmp	DWORD PTR _dst_uv$[ebp], 0
	je	SHORT $LN14@YUY2ToNV12
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN14@YUY2ToNV12
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN15@YUY2ToNV12
$LN14@YUY2ToNV12:
; Line 2445
	or	eax, -1
	jmp	$LN16@YUY2ToNV12
$LN15@YUY2ToNV12:
; Line 2448
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN13@YUY2ToNV12
; Line 2449
	mov	ecx, DWORD PTR _height$[ebp]
	neg	ecx
	mov	DWORD PTR _height$[ebp], ecx
; Line 2450
	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _src_stride_yuy2$[ebp]
	add	edx, DWORD PTR _src_yuy2$[ebp]
	mov	DWORD PTR _src_yuy2$[ebp], edx
; Line 2451
	mov	eax, DWORD PTR _src_stride_yuy2$[ebp]
	neg	eax
	mov	DWORD PTR _src_stride_yuy2$[ebp], eax
$LN13@YUY2ToNV12:
; Line 2454
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN12@YUY2ToNV12
; Line 2455
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_Any_SSE2
; Line 2456
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 15					; 0000000fH
	jne	SHORT $LN12@YUY2ToNV12
; Line 2457
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_SSE2
$LN12@YUY2ToNV12:
; Line 2462
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN10@YUY2ToNV12
; Line 2463
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_Any_AVX2
; Line 2464
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 31					; 0000001fH
	jne	SHORT $LN10@YUY2ToNV12
; Line 2465
	mov	DWORD PTR _SplitUVRow$[ebp], OFFSET _SplitUVRow_AVX2
$LN10@YUY2ToNV12:
; Line 2478
	push	64					; 00000040H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@YUY2ToNV12
; Line 2479
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_SSSE3
; Line 2480
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 15					; 0000000fH
	jne	SHORT $LN8@YUY2ToNV12
; Line 2481
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_SSSE3
$LN8@YUY2ToNV12:
; Line 2486
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@YUY2ToNV12
; Line 2487
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_Any_AVX2
; Line 2488
	mov	ecx, DWORD PTR _width$[ebp]
	and	ecx, 31					; 0000001fH
	jne	SHORT $LN6@YUY2ToNV12
; Line 2489
	mov	DWORD PTR _InterpolateRow$[ebp], OFFSET _InterpolateRow_AVX2
$LN6@YUY2ToNV12:
; Line 2503
	mov	edx, DWORD PTR _halfwidth$[ebp]
	shl	edx, 1
	mov	DWORD PTR _awidth$3[ebp], edx
; Line 2505
	imul	eax, DWORD PTR _awidth$3[ebp], 3
	add	eax, 63					; 0000003fH
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _rows_mem$2[ebp], eax
	mov	ecx, DWORD PTR _rows_mem$2[ebp]
	add	ecx, 63					; 0000003fH
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR _rows$1[ebp], ecx
; Line 2507
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN4@YUY2ToNV12
$LN3@YUY2ToNV12:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, 2
	mov	DWORD PTR _y$[ebp], edx
$LN4@YUY2ToNV12:
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _y$[ebp], eax
	jge	$LN2@YUY2ToNV12
; Line 2509
	mov	esi, esp
	mov	ecx, DWORD PTR _awidth$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _rows$1[ebp]
	add	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_yuy2$[ebp]
	push	ecx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2510
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2511
	mov	esi, esp
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _awidth$3[ebp]
	mov	ecx, DWORD PTR _rows$1[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_yuy2$[ebp]
	add	ecx, DWORD PTR _src_stride_yuy2$[ebp]
	push	ecx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2512
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _rows$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	add	ecx, DWORD PTR _dst_stride_y$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2513
	mov	esi, esp
	push	128					; 00000080H
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _awidth$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$1[ebp]
	add	ecx, DWORD PTR _awidth$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_uv$[ebp]
	push	edx
	call	DWORD PTR _InterpolateRow$[ebp]
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2514
	mov	eax, DWORD PTR _src_stride_yuy2$[ebp]
	mov	ecx, DWORD PTR _src_yuy2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _src_yuy2$[ebp], edx
; Line 2515
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	mov	ecx, DWORD PTR _dst_y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 2516
	mov	eax, DWORD PTR _dst_uv$[ebp]
	add	eax, DWORD PTR _dst_stride_uv$[ebp]
	mov	DWORD PTR _dst_uv$[ebp], eax
; Line 2517
	jmp	$LN3@YUY2ToNV12
$LN2@YUY2ToNV12:
; Line 2518
	mov	ecx, DWORD PTR _height$[ebp]
	and	ecx, 1
	je	SHORT $LN1@YUY2ToNV12
; Line 2520
	mov	esi, esp
	mov	edx, DWORD PTR _awidth$3[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_uv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_yuy2$[ebp]
	push	edx
	call	DWORD PTR _SplitUVRow$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 2521
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rows$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@YUY2ToNV12:
; Line 2523
	mov	eax, DWORD PTR _rows_mem$2[ebp]
	push	eax
	call	_free
	add	esp, 4
	mov	DWORD PTR _rows$1[ebp], 0
; Line 2525
	xor	eax, eax
$LN16@YUY2ToNV12:
; Line 2526
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_YUY2ToNV12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _UYVYToI422
_TEXT	SEGMENT
_UYVYToYRow$ = -12					; size = 4
_UYVYToUV422Row$ = -8					; size = 4
_y$ = -4						; size = 4
_src_uyvy$ = 8						; size = 4
_src_stride_uyvy$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_dst_u$ = 24						; size = 4
_dst_stride_u$ = 28					; size = 4
_dst_v$ = 32						; size = 4
_dst_stride_v$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_UYVYToI422 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 354
	mov	DWORD PTR _UYVYToUV422Row$[ebp], OFFSET _UYVYToUV422Row_C
; Line 357
	mov	DWORD PTR _UYVYToYRow$[ebp], OFFSET _UYVYToYRow_C
; Line 360
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@UYVYToI422
; Line 361
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 362
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_uyvy$[ebp]
	add	ecx, DWORD PTR _src_uyvy$[ebp]
	mov	DWORD PTR _src_uyvy$[ebp], ecx
; Line 363
	mov	edx, DWORD PTR _src_stride_uyvy$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_uyvy$[ebp], edx
$LN9@UYVYToI422:
; Line 369
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _src_stride_uyvy$[ebp], eax
	jne	SHORT $LN8@UYVYToI422
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@UYVYToI422
	mov	edx, DWORD PTR _dst_stride_u$[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@UYVYToI422
	mov	eax, DWORD PTR _dst_stride_v$[ebp]
	shl	eax, 1
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@UYVYToI422
; Line 370
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 371
	mov	DWORD PTR _height$[ebp], 1
; Line 372
	mov	DWORD PTR _dst_stride_v$[ebp], 0
	mov	edx, DWORD PTR _dst_stride_v$[ebp]
	mov	DWORD PTR _dst_stride_u$[ebp], edx
	mov	eax, DWORD PTR _dst_stride_u$[ebp]
	mov	DWORD PTR _dst_stride_y$[ebp], eax
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _src_stride_uyvy$[ebp], ecx
$LN8@UYVYToI422:
; Line 375
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@UYVYToI422
; Line 376
	mov	DWORD PTR _UYVYToUV422Row$[ebp], OFFSET _UYVYToUV422Row_Any_SSE2
; Line 377
	mov	DWORD PTR _UYVYToYRow$[ebp], OFFSET _UYVYToYRow_Any_SSE2
; Line 378
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 15					; 0000000fH
	jne	SHORT $LN7@UYVYToI422
; Line 379
	mov	DWORD PTR _UYVYToUV422Row$[ebp], OFFSET _UYVYToUV422Row_SSE2
; Line 380
	mov	DWORD PTR _UYVYToYRow$[ebp], OFFSET _UYVYToYRow_SSE2
$LN7@UYVYToI422:
; Line 385
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@UYVYToI422
; Line 386
	mov	DWORD PTR _UYVYToUV422Row$[ebp], OFFSET _UYVYToUV422Row_Any_AVX2
; Line 387
	mov	DWORD PTR _UYVYToYRow$[ebp], OFFSET _UYVYToYRow_Any_AVX2
; Line 388
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN5@UYVYToI422
; Line 389
	mov	DWORD PTR _UYVYToUV422Row$[ebp], OFFSET _UYVYToUV422Row_AVX2
; Line 390
	mov	DWORD PTR _UYVYToYRow$[ebp], OFFSET _UYVYToYRow_AVX2
$LN5@UYVYToI422:
; Line 407
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@UYVYToI422
$LN2@UYVYToI422:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@UYVYToI422:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@UYVYToI422
; Line 408
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_uyvy$[ebp]
	push	eax
	call	DWORD PTR _UYVYToUV422Row$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 409
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_uyvy$[ebp]
	push	eax
	call	DWORD PTR _UYVYToYRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 410
	mov	ecx, DWORD PTR _src_uyvy$[ebp]
	add	ecx, DWORD PTR _src_stride_uyvy$[ebp]
	mov	DWORD PTR _src_uyvy$[ebp], ecx
; Line 411
	mov	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 412
	mov	eax, DWORD PTR _dst_u$[ebp]
	add	eax, DWORD PTR _dst_stride_u$[ebp]
	mov	DWORD PTR _dst_u$[ebp], eax
; Line 413
	mov	ecx, DWORD PTR _dst_v$[ebp]
	add	ecx, DWORD PTR _dst_stride_v$[ebp]
	mov	DWORD PTR _dst_v$[ebp], ecx
; Line 414
	jmp	SHORT $LN2@UYVYToI422
$LN1@UYVYToI422:
; Line 415
	xor	eax, eax
; Line 416
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_UYVYToI422 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _YUY2ToI422
_TEXT	SEGMENT
_YUY2ToYRow$ = -12					; size = 4
_YUY2ToUV422Row$ = -8					; size = 4
_y$ = -4						; size = 4
_src_yuy2$ = 8						; size = 4
_src_stride_yuy2$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_dst_u$ = 24						; size = 4
_dst_stride_u$ = 28					; size = 4
_dst_v$ = 32						; size = 4
_dst_stride_v$ = 36					; size = 4
_width$ = 40						; size = 4
_height$ = 44						; size = 4
_YUY2ToI422 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 280
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 282
	mov	DWORD PTR _YUY2ToUV422Row$[ebp], OFFSET _YUY2ToUV422Row_C
; Line 285
	mov	DWORD PTR _YUY2ToYRow$[ebp], OFFSET _YUY2ToYRow_C
; Line 288
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN9@YUY2ToI422
; Line 289
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 290
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_yuy2$[ebp]
	add	ecx, DWORD PTR _src_yuy2$[ebp]
	mov	DWORD PTR _src_yuy2$[ebp], ecx
; Line 291
	mov	edx, DWORD PTR _src_stride_yuy2$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_yuy2$[ebp], edx
$LN9@YUY2ToI422:
; Line 297
	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 1
	cmp	DWORD PTR _src_stride_yuy2$[ebp], eax
	jne	SHORT $LN8@YUY2ToI422
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@YUY2ToI422
	mov	edx, DWORD PTR _dst_stride_u$[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@YUY2ToI422
	mov	eax, DWORD PTR _dst_stride_v$[ebp]
	shl	eax, 1
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@YUY2ToI422
; Line 298
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 299
	mov	DWORD PTR _height$[ebp], 1
; Line 300
	mov	DWORD PTR _dst_stride_v$[ebp], 0
	mov	edx, DWORD PTR _dst_stride_v$[ebp]
	mov	DWORD PTR _dst_stride_u$[ebp], edx
	mov	eax, DWORD PTR _dst_stride_u$[ebp]
	mov	DWORD PTR _dst_stride_y$[ebp], eax
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _src_stride_yuy2$[ebp], ecx
$LN8@YUY2ToI422:
; Line 303
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@YUY2ToI422
; Line 304
	mov	DWORD PTR _YUY2ToUV422Row$[ebp], OFFSET _YUY2ToUV422Row_Any_SSE2
; Line 305
	mov	DWORD PTR _YUY2ToYRow$[ebp], OFFSET _YUY2ToYRow_Any_SSE2
; Line 306
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 15					; 0000000fH
	jne	SHORT $LN7@YUY2ToI422
; Line 307
	mov	DWORD PTR _YUY2ToUV422Row$[ebp], OFFSET _YUY2ToUV422Row_SSE2
; Line 308
	mov	DWORD PTR _YUY2ToYRow$[ebp], OFFSET _YUY2ToYRow_SSE2
$LN7@YUY2ToI422:
; Line 313
	push	1024					; 00000400H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@YUY2ToI422
; Line 314
	mov	DWORD PTR _YUY2ToUV422Row$[ebp], OFFSET _YUY2ToUV422Row_Any_AVX2
; Line 315
	mov	DWORD PTR _YUY2ToYRow$[ebp], OFFSET _YUY2ToYRow_Any_AVX2
; Line 316
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN5@YUY2ToI422
; Line 317
	mov	DWORD PTR _YUY2ToUV422Row$[ebp], OFFSET _YUY2ToUV422Row_AVX2
; Line 318
	mov	DWORD PTR _YUY2ToYRow$[ebp], OFFSET _YUY2ToYRow_AVX2
$LN5@YUY2ToI422:
; Line 335
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@YUY2ToI422
$LN2@YUY2ToI422:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@YUY2ToI422:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN1@YUY2ToI422
; Line 336
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_yuy2$[ebp]
	push	eax
	call	DWORD PTR _YUY2ToUV422Row$[ebp]
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 337
	mov	esi, esp
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_yuy2$[ebp]
	push	eax
	call	DWORD PTR _YUY2ToYRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 338
	mov	ecx, DWORD PTR _src_yuy2$[ebp]
	add	ecx, DWORD PTR _src_stride_yuy2$[ebp]
	mov	DWORD PTR _src_yuy2$[ebp], ecx
; Line 339
	mov	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 340
	mov	eax, DWORD PTR _dst_u$[ebp]
	add	eax, DWORD PTR _dst_stride_u$[ebp]
	mov	DWORD PTR _dst_u$[ebp], eax
; Line 341
	mov	ecx, DWORD PTR _dst_v$[ebp]
	add	ecx, DWORD PTR _dst_stride_v$[ebp]
	mov	DWORD PTR _dst_v$[ebp], ecx
; Line 342
	jmp	SHORT $LN2@YUY2ToI422
$LN1@YUY2ToI422:
; Line 343
	xor	eax, eax
; Line 344
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_YUY2ToI422 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I444Copy
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_y$ = 32						; size = 4
_dst_stride_y$ = 36					; size = 4
_dst_u$ = 40						; size = 4
_dst_stride_u$ = 44					; size = 4
_dst_v$ = 48						; size = 4
_dst_stride_v$ = 52					; size = 4
_width$ = 56						; size = 4
_height$ = 60						; size = 4
_I444Copy PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 160
	push	ebp
	mov	ebp, esp
; Line 163
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _src_u$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _src_v$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN2@I444Copy
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN2@I444Copy
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN3@I444Copy
$LN2@I444Copy:
; Line 164
	or	eax, -1
	jmp	$LN4@I444Copy
$LN3@I444Copy:
; Line 167
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN1@I444Copy
; Line 168
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 170
	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _src_stride_u$[ebp]
	add	edx, DWORD PTR _src_u$[ebp]
	mov	DWORD PTR _src_u$[ebp], edx
; Line 171
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _src_stride_v$[ebp]
	add	eax, DWORD PTR _src_v$[ebp]
	mov	DWORD PTR _src_v$[ebp], eax
; Line 172
	mov	ecx, DWORD PTR _src_stride_y$[ebp]
	neg	ecx
	mov	DWORD PTR _src_stride_y$[ebp], ecx
; Line 173
	mov	edx, DWORD PTR _src_stride_u$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_u$[ebp], edx
; Line 174
	mov	eax, DWORD PTR _src_stride_v$[ebp]
	neg	eax
	mov	DWORD PTR _src_stride_v$[ebp], eax
$LN1@I444Copy:
; Line 177
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_y$[ebp]
	push	eax
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 178
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_u$[ebp]
	push	eax
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 179
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_stride_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_v$[ebp]
	push	eax
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 180
	xor	eax, eax
$LN4@I444Copy:
; Line 181
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I444Copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I422Copy
_TEXT	SEGMENT
_halfwidth$ = -4					; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_src_u$ = 16						; size = 4
_src_stride_u$ = 20					; size = 4
_src_v$ = 24						; size = 4
_src_stride_v$ = 28					; size = 4
_dst_y$ = 32						; size = 4
_dst_stride_y$ = 36					; size = 4
_dst_u$ = 40						; size = 4
_dst_stride_u$ = 44					; size = 4
_dst_v$ = 48						; size = 4
_dst_stride_v$ = 52					; size = 4
_width$ = 56						; size = 4
_height$ = 60						; size = 4
_I422Copy PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 130
	mov	eax, DWORD PTR _width$[ebp]
	add	eax, 1
	sar	eax, 1
	mov	DWORD PTR _halfwidth$[ebp], eax
; Line 133
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _src_u$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _src_v$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _dst_u$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _dst_v$[ebp], 0
	je	SHORT $LN2@I422Copy
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN2@I422Copy
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN3@I422Copy
$LN2@I422Copy:
; Line 134
	or	eax, -1
	jmp	$LN4@I422Copy
$LN3@I422Copy:
; Line 137
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN1@I422Copy
; Line 138
	mov	ecx, DWORD PTR _height$[ebp]
	neg	ecx
	mov	DWORD PTR _height$[ebp], ecx
; Line 139
	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _src_stride_y$[ebp]
	add	edx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], edx
; Line 140
	mov	eax, DWORD PTR _height$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _src_stride_u$[ebp]
	add	eax, DWORD PTR _src_u$[ebp]
	mov	DWORD PTR _src_u$[ebp], eax
; Line 141
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_v$[ebp]
	add	ecx, DWORD PTR _src_v$[ebp]
	mov	DWORD PTR _src_v$[ebp], ecx
; Line 142
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
; Line 143
	mov	eax, DWORD PTR _src_stride_u$[ebp]
	neg	eax
	mov	DWORD PTR _src_stride_u$[ebp], eax
; Line 144
	mov	ecx, DWORD PTR _src_stride_v$[ebp]
	neg	ecx
	mov	DWORD PTR _src_stride_v$[ebp], ecx
$LN1@I422Copy:
; Line 146
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_y$[ebp]
	push	ecx
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 147
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfwidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_u$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_u$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_u$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_u$[ebp]
	push	ecx
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 148
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _halfwidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_stride_v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_v$[ebp]
	push	edx
	mov	eax, DWORD PTR _src_stride_v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_v$[ebp]
	push	ecx
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 149
	xor	eax, eax
$LN4@I422Copy:
; Line 150
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_I422Copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _I400ToI400
_TEXT	SEGMENT
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_I400ToI400 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 187
	push	ebp
	mov	ebp, esp
; Line 188
	cmp	DWORD PTR _src_y$[ebp], 0
	je	SHORT $LN2@I400ToI400
	cmp	DWORD PTR _dst_y$[ebp], 0
	je	SHORT $LN2@I400ToI400
	cmp	DWORD PTR _width$[ebp], 0
	jle	SHORT $LN2@I400ToI400
	cmp	DWORD PTR _height$[ebp], 0
	jne	SHORT $LN3@I400ToI400
$LN2@I400ToI400:
; Line 189
	or	eax, -1
	jmp	SHORT $LN4@I400ToI400
$LN3@I400ToI400:
; Line 192
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN1@I400ToI400
; Line 193
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _src_stride_y$[ebp]
	add	ecx, DWORD PTR _src_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], ecx
; Line 195
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _src_stride_y$[ebp], edx
$LN1@I400ToI400:
; Line 197
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst_y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _src_stride_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y$[ebp]
	push	edx
	call	_CopyPlane
	add	esp, 24					; 00000018H
; Line 198
	xor	eax, eax
$LN4@I400ToI400:
; Line 199
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_I400ToI400 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _SetPlane
_TEXT	SEGMENT
_SetRow$ = -8						; size = 4
_y$ = -4						; size = 4
_dst_y$ = 8						; size = 4
_dst_stride_y$ = 12					; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
_value$ = 24						; size = 4
_SetPlane PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 1150
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1152
	mov	DWORD PTR _SetRow$[ebp], OFFSET _SetRow_C
; Line 1153
	cmp	DWORD PTR _height$[ebp], 0
	jge	SHORT $LN8@SetPlane
; Line 1154
	mov	eax, DWORD PTR _height$[ebp]
	neg	eax
	mov	DWORD PTR _height$[ebp], eax
; Line 1155
	mov	ecx, DWORD PTR _height$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _dst_stride_y$[ebp]
	add	ecx, DWORD PTR _dst_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], ecx
; Line 1156
	mov	edx, DWORD PTR _dst_stride_y$[ebp]
	neg	edx
	mov	DWORD PTR _dst_stride_y$[ebp], edx
$LN8@SetPlane:
; Line 1159
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN7@SetPlane
; Line 1160
	mov	ecx, DWORD PTR _width$[ebp]
	imul	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], ecx
; Line 1161
	mov	DWORD PTR _height$[ebp], 1
; Line 1162
	mov	DWORD PTR _dst_stride_y$[ebp], 0
$LN7@SetPlane:
; Line 1173
	push	16					; 00000010H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@SetPlane
; Line 1174
	mov	DWORD PTR _SetRow$[ebp], OFFSET _SetRow_Any_X86
; Line 1175
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 3
	jne	SHORT $LN6@SetPlane
; Line 1176
	mov	DWORD PTR _SetRow$[ebp], OFFSET _SetRow_X86
$LN6@SetPlane:
; Line 1181
	push	2048					; 00000800H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@SetPlane
; Line 1182
	mov	DWORD PTR _SetRow$[ebp], OFFSET _SetRow_ERMS
$LN4@SetPlane:
; Line 1187
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@SetPlane
$LN2@SetPlane:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN3@SetPlane:
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR _height$[ebp]
	jge	SHORT $LN9@SetPlane
; Line 1188
	mov	esi, esp
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	movzx	eax, BYTE PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	call	DWORD PTR _SetRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1189
	mov	edx, DWORD PTR _dst_y$[ebp]
	add	edx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 1190
	jmp	SHORT $LN2@SetPlane
$LN9@SetPlane:
; Line 1191
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_SetPlane ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _CopyPlane_16
_TEXT	SEGMENT
_CopyRow$ = -8						; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_CopyPlane_16 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 84
	mov	DWORD PTR _CopyRow$[ebp], OFFSET _CopyRow_16_C
; Line 87
	mov	eax, DWORD PTR _src_stride_y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN4@CopyPlane_
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN4@CopyPlane_
; Line 88
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 89
	mov	DWORD PTR _height$[ebp], 1
; Line 90
	mov	DWORD PTR _dst_stride_y$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _src_stride_y$[ebp], eax
$LN4@CopyPlane_:
; Line 114
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@CopyPlane_
$LN2@CopyPlane_:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@CopyPlane_:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN5@CopyPlane_
; Line 115
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y$[ebp]
	push	edx
	call	DWORD PTR _CopyRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 116
	mov	eax, DWORD PTR _src_stride_y$[ebp]
	mov	ecx, DWORD PTR _src_y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _src_y$[ebp], edx
; Line 117
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	mov	ecx, DWORD PTR _dst_y$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _dst_y$[ebp], edx
; Line 118
	jmp	SHORT $LN2@CopyPlane_
$LN5@CopyPlane_:
; Line 119
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CopyPlane_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _CopyPlane
_TEXT	SEGMENT
tv80 = -16						; size = 4
tv74 = -12						; size = 4
_CopyRow$ = -8						; size = 4
_y$ = -4						; size = 4
_src_y$ = 8						; size = 4
_src_stride_y$ = 12					; size = 4
_dst_y$ = 16						; size = 4
_dst_stride_y$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
_CopyPlane PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\libyuv\source\planar_functions.cc
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 33
	mov	DWORD PTR _CopyRow$[ebp], OFFSET _CopyRow_C
; Line 36
	mov	eax, DWORD PTR _src_stride_y$[ebp]
	cmp	eax, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@CopyPlane
	mov	ecx, DWORD PTR _dst_stride_y$[ebp]
	cmp	ecx, DWORD PTR _width$[ebp]
	jne	SHORT $LN8@CopyPlane
; Line 37
	mov	edx, DWORD PTR _width$[ebp]
	imul	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _width$[ebp], edx
; Line 38
	mov	DWORD PTR _height$[ebp], 1
; Line 39
	mov	DWORD PTR _dst_stride_y$[ebp], 0
	mov	eax, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _src_stride_y$[ebp], eax
$LN8@CopyPlane:
; Line 42
	mov	ecx, DWORD PTR _src_y$[ebp]
	cmp	ecx, DWORD PTR _dst_y$[ebp]
	jne	SHORT $LN7@CopyPlane
	mov	edx, DWORD PTR _src_stride_y$[ebp]
	cmp	edx, DWORD PTR _dst_stride_y$[ebp]
	jne	SHORT $LN7@CopyPlane
; Line 43
	jmp	$LN9@CopyPlane
$LN7@CopyPlane:
; Line 46
	push	32					; 00000020H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@CopyPlane
; Line 47
	mov	eax, DWORD PTR _width$[ebp]
	and	eax, 31					; 0000001fH
	jne	SHORT $LN11@CopyPlane
	mov	DWORD PTR tv74[ebp], OFFSET _CopyRow_SSE2
	jmp	SHORT $LN12@CopyPlane
$LN11@CopyPlane:
	mov	DWORD PTR tv74[ebp], OFFSET _CopyRow_Any_SSE2
$LN12@CopyPlane:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _CopyRow$[ebp], ecx
$LN6@CopyPlane:
; Line 51
	push	512					; 00000200H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@CopyPlane
; Line 52
	mov	edx, DWORD PTR _width$[ebp]
	and	edx, 63					; 0000003fH
	jne	SHORT $LN13@CopyPlane
	mov	DWORD PTR tv80[ebp], OFFSET _CopyRow_AVX
	jmp	SHORT $LN14@CopyPlane
$LN13@CopyPlane:
	mov	DWORD PTR tv80[ebp], OFFSET _CopyRow_Any_AVX
$LN14@CopyPlane:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR _CopyRow$[ebp], eax
$LN5@CopyPlane:
; Line 56
	push	2048					; 00000800H
	call	_TestCpuFlag
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@CopyPlane
; Line 57
	mov	DWORD PTR _CopyRow$[ebp], OFFSET _CopyRow_ERMS
$LN4@CopyPlane:
; Line 72
	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN3@CopyPlane
$LN2@CopyPlane:
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$[ebp], ecx
$LN3@CopyPlane:
	mov	edx, DWORD PTR _y$[ebp]
	cmp	edx, DWORD PTR _height$[ebp]
	jge	SHORT $LN9@CopyPlane
; Line 73
	mov	esi, esp
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst_y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _src_y$[ebp]
	push	edx
	call	DWORD PTR _CopyRow$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 74
	mov	eax, DWORD PTR _src_y$[ebp]
	add	eax, DWORD PTR _src_stride_y$[ebp]
	mov	DWORD PTR _src_y$[ebp], eax
; Line 75
	mov	ecx, DWORD PTR _dst_y$[ebp]
	add	ecx, DWORD PTR _dst_stride_y$[ebp]
	mov	DWORD PTR _dst_y$[ebp], ecx
; Line 76
	jmp	SHORT $LN2@CopyPlane
$LN9@CopyPlane:
; Line 77
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_CopyPlane ENDP
_TEXT	ENDS
END
