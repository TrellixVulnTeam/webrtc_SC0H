; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	D:\Develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?intensity_thresholds@?DN@??celt_encode_with_ec@@9@9 DD 03f800000r ; 1 ; `celt_encode_with_ec'::`61'::intensity_thresholds
	DD	040000000r			; 2
	DD	040400000r			; 3
	DD	040800000r			; 4
	DD	040a00000r			; 5
	DD	040c00000r			; 6
	DD	040e00000r			; 7
	DD	041000000r			; 8
	DD	041800000r			; 16
	DD	041c00000r			; 24
	DD	042100000r			; 36
	DD	042300000r			; 44
	DD	042480000r			; 50
	DD	042600000r			; 56
	DD	042780000r			; 62
	DD	042860000r			; 67
	DD	042900000r			; 72
	DD	0429e0000r			; 79
	DD	042b00000r			; 88
	DD	042d40000r			; 106
	DD	043060000r			; 134
_trim_icdf DB	07eH
	DB	07cH
	DB	077H
	DB	06dH
	DB	057H
	DB	029H
	DB	013H
	DB	09H
	DB	04H
	DB	02H
	DB	00H
	ORG $+1
?intensity_histeresis@?DN@??celt_encode_with_ec@@9@9 DD 03f800000r ; 1 ; `celt_encode_with_ec'::`61'::intensity_histeresis
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040000000r			; 2
	DD	040400000r			; 3
	DD	040400000r			; 3
	DD	040800000r			; 4
	DD	040a00000r			; 5
	DD	040c00000r			; 6
	DD	041000000r			; 8
	DD	041000000r			; 8
_spread_icdf DB	019H
	DB	017H
	DB	02H
	DB	00H
?inv_table@?1??transient_analysis@@9@9 DB 0ffH		; `transient_analysis'::`2'::inv_table
	DB	0ffH
	DB	09cH
	DB	06eH
	DB	056H
	DB	046H
	DB	03bH
	DB	033H
	DB	02dH
	DB	028H
	DB	025H
	DB	021H
	DB	01fH
	DB	01cH
	DB	01aH
	DB	019H
	DB	017H
	DB	016H
	DB	015H
	DB	014H
	DB	013H
	DB	012H
	DB	011H
	DB	010H
	DB	010H
	DB	0fH
	DB	0fH
	DB	0eH
	DB	0dH
	DB	0dH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	02H
_tapset_icdf DB	02H
	DB	01H
	DB	00H
CONST	ENDS
PUBLIC	_opus_custom_encoder_ctl
PUBLIC	_celt_encoder_get_size
PUBLIC	_celt_encode_with_ec
PUBLIC	_celt_encoder_init
PUBLIC	_celt_preemphasis
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@26901d7d
PUBLIC	__real@36500998
PUBLIC	__real@38000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3a83126f
PUBLIC	__real@3bcb295f
PUBLIC	__real@3be21965
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3cfdf3b6
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3d800000
PUBLIC	__real@3db851ec
PUBLIC	__real@3dc00000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f333333
PUBLIC	__real@3f3504f7
PUBLIC	__real@3f400000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f800000
PUBLIC	__real@3f8020c5
PUBLIC	__real@3f99999a
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc1cac083126e98
PUBLIC	__real@3fd3333333333333
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe947ae147ae148
PUBLIC	__real@3ff428f5c28f5c29
PUBLIC	__real@3ff71547652b82fe
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@405fc00000000000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@41000000
PUBLIC	__real@42000000
PUBLIC	__real@42280000
PUBLIC	__real@42800000
PUBLIC	__real@43230000
PUBLIC	__real@47000000
PUBLIC	__real@47800000
PUBLIC	__real@bcfdf3b6
PUBLIC	__real@be800000
PUBLIC	__real@bfc00000
PUBLIC	__real@c0000000
PUBLIC	__real@c0800000
PUBLIC	__real@c1200000
PUBLIC	__real@c1e00000
PUBLIC	__real@c1ff3333
PUBLIC	__real@c7800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_memmove:PROC
EXTRN	_abs:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	_sqrt:PROC
EXTRN	_floor:PROC
EXTRN	_clt_mdct_forward_c:PROC
EXTRN	_opus_custom_mode_create:PROC
EXTRN	_ec_tell_frac:PROC
EXTRN	_ec_enc_init:PROC
EXTRN	_ec_enc_bit_logp:PROC
EXTRN	_ec_enc_icdf:PROC
EXTRN	_ec_enc_uint:PROC
EXTRN	_ec_enc_bits:PROC
EXTRN	_ec_enc_shrink:PROC
EXTRN	_ec_enc_done:PROC
EXTRN	_resampling_factor:PROC
EXTRN	_comb_filter:PROC
EXTRN	_init_caps:PROC
EXTRN	_pitch_downsample:PROC
EXTRN	_pitch_search:PROC
EXTRN	_remove_doubling:PROC
EXTRN	_compute_allocation:PROC
EXTRN	_compute_band_energies:PROC
EXTRN	_normalise_bands:PROC
EXTRN	_spreading_decision:PROC
EXTRN	_haar1:PROC
EXTRN	_quant_all_bands:PROC
EXTRN	_hysteresis_decision:PROC
EXTRN	_amp2Log2:PROC
EXTRN	_quant_coarse_energy:PROC
EXTRN	_quant_fine_energy:PROC
EXTRN	_quant_energy_finalise:PROC
EXTRN	@_RTC_AllocaHelper@12:PROC
EXTRN	@_RTC_CheckStackVars2@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__alloca_probe_16:PROC
EXTRN	__ftol2_sse:PROC
EXTRN	_tf_select_table:BYTE
EXTRN	_eMeans:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c7800000
CONST	SEGMENT
__real@c7800000 DD 0c7800000r			; -65536
CONST	ENDS
;	COMDAT __real@c1ff3333
CONST	SEGMENT
__real@c1ff3333 DD 0c1ff3333r			; -31.9
CONST	ENDS
;	COMDAT __real@c1e00000
CONST	SEGMENT
__real@c1e00000 DD 0c1e00000r			; -28
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bfc00000
CONST	SEGMENT
__real@bfc00000 DD 0bfc00000r			; -1.5
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@bcfdf3b6
CONST	SEGMENT
__real@bcfdf3b6 DD 0bcfdf3b6r			; -0.031
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@43230000
CONST	SEGMENT
__real@43230000 DD 043230000r			; 163
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42280000
CONST	SEGMENT
__real@42280000 DD 042280000r			; 42
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@405fc00000000000
CONST	SEGMENT
__real@405fc00000000000 DQ 0405fc00000000000r	; 127
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff71547652b82fe
CONST	SEGMENT
__real@3ff71547652b82fe DQ 03ff71547652b82fer	; 1.4427
CONST	ENDS
;	COMDAT __real@3ff428f5c28f5c29
CONST	SEGMENT
__real@3ff428f5c28f5c29 DQ 03ff428f5c28f5c29r	; 1.26
CONST	ENDS
;	COMDAT __real@3fe947ae147ae148
CONST	SEGMENT
__real@3fe947ae147ae148 DQ 03fe947ae147ae148r	; 0.79
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT __real@3fd3333333333333
CONST	SEGMENT
__real@3fd3333333333333 DQ 03fd3333333333333r	; 0.3
CONST	ENDS
;	COMDAT __real@3fc1cac083126e98
CONST	SEGMENT
__real@3fc1cac083126e98 DQ 03fc1cac083126e98r	; 0.139
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f8020c5
CONST	SEGMENT
__real@3f8020c5 DD 03f8020c5r			; 1.001
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3504f7
CONST	SEGMENT
__real@3f3504f7 DD 03f3504f7r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3dc00000
CONST	SEGMENT
__real@3dc00000 DD 03dc00000r			; 0.09375
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3cfdf3b6
CONST	SEGMENT
__real@3cfdf3b6 DD 03cfdf3b6r			; 0.031
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3be21965
CONST	SEGMENT
__real@3be21965 DD 03be21965r			; 0.0069
CONST	ENDS
;	COMDAT __real@3bcb295f
CONST	SEGMENT
__real@3bcb295f DD 03bcb295fr			; 0.0062
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@38000000
CONST	SEGMENT
__real@38000000 DD 038000000r			; 3.05176e-005
CONST	ENDS
;	COMDAT __real@36500998
CONST	SEGMENT
__real@36500998 DD 036500998r			; 3.1e-006
CONST	ENDS
;	COMDAT __real@26901d7d
CONST	SEGMENT
__real@26901d7d DD 026901d7dr			; 1e-015
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _compute_vbr
_TEXT	SEGMENT
tv323 = -132						; size = 4
tv307 = -128						; size = 4
tv308 = -124						; size = 4
tv302 = -120						; size = 4
tv290 = -116						; size = 4
tv287 = -112						; size = 4
tv273 = -108						; size = 4
tv271 = -104						; size = 4
tv223 = -100						; size = 4
tv195 = -96						; size = 4
tv176 = -92						; size = 4
tv169 = -88						; size = 4
tv143 = -84						; size = 4
tv128 = -80						; size = 4
tv74 = -76						; size = 4
tv67 = -72						; size = 4
_tvbr_factor$1 = -68					; size = 4
_amount$2 = -64						; size = 4
_rate_factor$3 = -60					; size = 4
_bins$4 = -56						; size = 4
_floor_depth$5 = -52					; size = 4
_surround_target$6 = -48				; size = 4
_tonal$7 = -44						; size = 4
_tonal_target$8 = -40					; size = 4
_max_frac$9 = -36					; size = 4
_coded_stereo_dof$10 = -32				; size = 4
_coded_stereo_bands$11 = -28				; size = 4
_eBands$ = -24						; size = 4
_nbEBands$ = -20					; size = 4
_tf_calibration$ = -16					; size = 4
_coded_bands$ = -12					; size = 4
_coded_bins$ = -8					; size = 4
_target$ = -4						; size = 4
_mode$ = 8						; size = 4
_analysis$ = 12						; size = 4
_base_target$ = 16					; size = 4
_LM$ = 20						; size = 4
_bitrate$ = 24						; size = 4
_lastCodedBands$ = 28					; size = 4
_C$ = 32						; size = 4
_intensity$ = 36					; size = 4
_constrained_vbr$ = 40					; size = 4
_stereo_saving$ = 44					; size = 4
_tot_boost$ = 48					; size = 4
_tf_estimate$ = 52					; size = 4
_pitch_change$ = 56					; size = 4
_maxDepth$ = 60						; size = 4
_variable_duration$ = 64				; size = 4
_lfe$ = 68						; size = 4
_has_surround_mask$ = 72				; size = 4
_surround_masking$ = 76					; size = 4
_temporal_vbr$ = 80					; size = 4
_compute_vbr PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	edi
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 33					; 00000021H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1207
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nbEBands$[ebp], ecx
; Line 1208
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _eBands$[ebp], eax
; Line 1210
	cmp	DWORD PTR _lastCodedBands$[ebp], 0
	je	SHORT $LN14@compute_vb
	mov	ecx, DWORD PTR _lastCodedBands$[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	jmp	SHORT $LN15@compute_vb
$LN14@compute_vb:
	mov	edx, DWORD PTR _nbEBands$[ebp]
	mov	DWORD PTR tv67[ebp], edx
$LN15@compute_vb:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _coded_bands$[ebp], eax
; Line 1211
	mov	ecx, DWORD PTR _coded_bands$[ebp]
	mov	edx, DWORD PTR _eBands$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	eax, cl
	mov	DWORD PTR _coded_bins$[ebp], eax
; Line 1212
	cmp	DWORD PTR _C$[ebp], 2
	jne	SHORT $LN11@compute_vb
; Line 1213
	mov	ecx, DWORD PTR _intensity$[ebp]
	cmp	ecx, DWORD PTR _coded_bands$[ebp]
	jge	SHORT $LN16@compute_vb
	mov	edx, DWORD PTR _intensity$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN17@compute_vb
$LN16@compute_vb:
	mov	eax, DWORD PTR _coded_bands$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN17@compute_vb:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR _eBands$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	eax, cl
	add	eax, DWORD PTR _coded_bins$[ebp]
	mov	DWORD PTR _coded_bins$[ebp], eax
$LN11@compute_vb:
; Line 1215
	mov	ecx, DWORD PTR _base_target$[ebp]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1219
	mov	edx, DWORD PTR _analysis$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN10@compute_vb
	mov	eax, DWORD PTR _analysis$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+16]
	movsd	xmm1, QWORD PTR __real@3fd999999999999a
	comisd	xmm1, xmm0
	jbe	SHORT $LN10@compute_vb
; Line 1220
	mov	ecx, DWORD PTR _coded_bins$[ebp]
	shl	ecx, 3
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _analysis$[ebp]
	movss	xmm1, DWORD PTR __real@3ecccccd
	subss	xmm1, DWORD PTR [edx+16]
	mulss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _target$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _target$[ebp], ecx
$LN10@compute_vb:
; Line 1223
	cmp	DWORD PTR _C$[ebp], 2
	jne	$LN9@compute_vb
; Line 1228
	mov	edx, DWORD PTR _intensity$[ebp]
	cmp	edx, DWORD PTR _coded_bands$[ebp]
	jge	SHORT $LN18@compute_vb
	mov	eax, DWORD PTR _intensity$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN19@compute_vb
$LN18@compute_vb:
	mov	ecx, DWORD PTR _coded_bands$[ebp]
	mov	DWORD PTR tv128[ebp], ecx
$LN19@compute_vb:
	mov	edx, DWORD PTR tv128[ebp]
	mov	DWORD PTR _coded_stereo_bands$11[ebp], edx
; Line 1229
	mov	eax, DWORD PTR _coded_stereo_bands$11[ebp]
	mov	ecx, DWORD PTR _eBands$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	sub	edx, DWORD PTR _coded_stereo_bands$11[ebp]
	mov	DWORD PTR _coded_stereo_dof$10[ebp], edx
; Line 1231
	cvtsi2ss xmm0, DWORD PTR _coded_stereo_dof$10[ebp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	cvtsi2ss xmm1, DWORD PTR _coded_bins$[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _max_frac$9[ebp], xmm0
; Line 1232
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR _stereo_saving$[ebp]
	jbe	SHORT $LN20@compute_vb
	movss	xmm0, DWORD PTR _stereo_saving$[ebp]
	movss	DWORD PTR tv143[ebp], xmm0
	jmp	SHORT $LN21@compute_vb
$LN20@compute_vb:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv143[ebp], xmm0
$LN21@compute_vb:
	movss	xmm0, DWORD PTR tv143[ebp]
	movss	DWORD PTR _stereo_saving$[ebp], xmm0
; Line 1235
	cvtsi2ss xmm0, DWORD PTR _target$[ebp]
	mulss	xmm0, DWORD PTR _max_frac$9[ebp]
	movss	xmm1, DWORD PTR _stereo_saving$[ebp]
	subss	xmm1, DWORD PTR __real@3dcccccd
	mov	eax, DWORD PTR _coded_stereo_dof$10[ebp]
	shl	eax, 3
	cvtsi2ss xmm2, eax
	mulss	xmm1, xmm2
	comiss	xmm1, xmm0
	jbe	SHORT $LN22@compute_vb
	cvtsi2ss xmm0, DWORD PTR _target$[ebp]
	mulss	xmm0, DWORD PTR _max_frac$9[ebp]
	movss	DWORD PTR tv169[ebp], xmm0
	jmp	SHORT $LN23@compute_vb
$LN22@compute_vb:
	movss	xmm0, DWORD PTR _stereo_saving$[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	mov	ecx, DWORD PTR _coded_stereo_dof$10[ebp]
	shl	ecx, 3
	cvtsi2ss xmm1, ecx
	mulss	xmm0, xmm1
	movss	DWORD PTR tv169[ebp], xmm0
$LN23@compute_vb:
	cvttss2si edx, DWORD PTR tv169[ebp]
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, edx
	mov	DWORD PTR _target$[ebp], eax
$LN9@compute_vb:
; Line 1238
	mov	edx, 16					; 00000010H
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _tot_boost$[ebp]
	sub	eax, edx
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 1241
	cmp	DWORD PTR _variable_duration$[ebp], 5010 ; 00001392H
	jne	SHORT $LN24@compute_vb
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR tv176[ebp], xmm0
	jmp	SHORT $LN25@compute_vb
$LN24@compute_vb:
	movss	xmm0, DWORD PTR __real@3d23d70a
	movss	DWORD PTR tv176[ebp], xmm0
$LN25@compute_vb:
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _tf_calibration$[ebp], xmm0
; Line 1242
	movss	xmm0, DWORD PTR _tf_estimate$[ebp]
	subss	xmm0, DWORD PTR _tf_calibration$[ebp]
	cvtsi2ss xmm1, DWORD PTR _target$[ebp]
	mulss	xmm0, xmm1
	cvttss2si ecx, xmm0
	add	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], ecx
; Line 1246
	mov	edx, DWORD PTR _analysis$[ebp]
	cmp	DWORD PTR [edx], 0
	je	$LN8@compute_vb
	cmp	DWORD PTR _lfe$[ebp], 0
	jne	$LN8@compute_vb
; Line 1252
	mov	eax, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR __real@3e19999a
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@compute_vb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv195[ebp], xmm0
	jmp	SHORT $LN27@compute_vb
$LN26@compute_vb:
	mov	ecx, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	subss	xmm0, DWORD PTR __real@3e19999a
	movss	DWORD PTR tv195[ebp], xmm0
$LN27@compute_vb:
	movss	xmm0, DWORD PTR tv195[ebp]
	subss	xmm0, DWORD PTR __real@3db851ec
	movss	DWORD PTR _tonal$7[ebp], xmm0
; Line 1253
	mov	edx, DWORD PTR _coded_bins$[ebp]
	shl	edx, 3
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@3f99999a
	mulss	xmm0, DWORD PTR _tonal$7[ebp]
	cvttss2si eax, xmm0
	add	eax, DWORD PTR _target$[ebp]
	mov	DWORD PTR _tonal_target$8[ebp], eax
; Line 1254
	cmp	DWORD PTR _pitch_change$[ebp], 0
	je	SHORT $LN7@compute_vb
; Line 1255
	mov	ecx, DWORD PTR _coded_bins$[ebp]
	shl	ecx, 3
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	cvttss2si edx, xmm0
	add	edx, DWORD PTR _tonal_target$8[ebp]
	mov	DWORD PTR _tonal_target$8[ebp], edx
$LN7@compute_vb:
; Line 1257
	mov	eax, DWORD PTR _tonal_target$8[ebp]
	mov	DWORD PTR _target$[ebp], eax
$LN8@compute_vb:
; Line 1264
	cmp	DWORD PTR _has_surround_mask$[ebp], 0
	je	SHORT $LN6@compute_vb
	cmp	DWORD PTR _lfe$[ebp], 0
	jne	SHORT $LN6@compute_vb
; Line 1266
	mov	ecx, DWORD PTR _coded_bins$[ebp]
	shl	ecx, 3
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _surround_masking$[ebp]
	cvttss2si edx, xmm0
	add	edx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _surround_target$6[ebp], edx
; Line 1268
	mov	eax, DWORD PTR _target$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	eax, DWORD PTR _surround_target$6[ebp]
	jle	SHORT $LN28@compute_vb
	mov	eax, DWORD PTR _target$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN29@compute_vb
$LN28@compute_vb:
	mov	eax, DWORD PTR _surround_target$6[ebp]
	mov	DWORD PTR tv223[ebp], eax
$LN29@compute_vb:
	mov	ecx, DWORD PTR tv223[ebp]
	mov	DWORD PTR _target$[ebp], ecx
$LN6@compute_vb:
; Line 1274
	mov	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	edx, WORD PTR [eax+edx*2-4]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _bins$4[ebp], edx
; Line 1276
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _bins$4[ebp]
	shl	eax, 3
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _maxDepth$[ebp]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _floor_depth$5[ebp], ecx
; Line 1277
	mov	edx, DWORD PTR _target$[ebp]
	sar	edx, 2
	cmp	DWORD PTR _floor_depth$5[ebp], edx
	jle	SHORT $LN30@compute_vb
	mov	eax, DWORD PTR _floor_depth$5[ebp]
	mov	DWORD PTR tv271[ebp], eax
	jmp	SHORT $LN31@compute_vb
$LN30@compute_vb:
	mov	ecx, DWORD PTR _target$[ebp]
	sar	ecx, 2
	mov	DWORD PTR tv271[ebp], ecx
$LN31@compute_vb:
	mov	edx, DWORD PTR tv271[ebp]
	mov	DWORD PTR _floor_depth$5[ebp], edx
; Line 1278
	mov	eax, DWORD PTR _target$[ebp]
	cmp	eax, DWORD PTR _floor_depth$5[ebp]
	jge	SHORT $LN32@compute_vb
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR tv273[ebp], ecx
	jmp	SHORT $LN33@compute_vb
$LN32@compute_vb:
	mov	edx, DWORD PTR _floor_depth$5[ebp]
	mov	DWORD PTR tv273[ebp], edx
$LN33@compute_vb:
	mov	eax, DWORD PTR tv273[ebp]
	mov	DWORD PTR _target$[ebp], eax
; Line 1282
	cmp	DWORD PTR _has_surround_mask$[ebp], 0
	je	SHORT $LN4@compute_vb
	cmp	DWORD PTR _lfe$[ebp], 0
	je	$LN5@compute_vb
$LN4@compute_vb:
	cmp	DWORD PTR _constrained_vbr$[ebp], 0
	jne	SHORT $LN3@compute_vb
	cmp	DWORD PTR _bitrate$[ebp], 64000		; 0000fa00H
	jge	$LN5@compute_vb
$LN3@compute_vb:
; Line 1288
	mov	ecx, DWORD PTR _bitrate$[ebp]
	sub	ecx, 32000				; 00007d00H
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@38000000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN34@compute_vb
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv287[ebp], xmm0
	jmp	SHORT $LN35@compute_vb
$LN34@compute_vb:
	mov	edx, DWORD PTR _bitrate$[ebp]
	sub	edx, 32000				; 00007d00H
	cvtsi2ss xmm0, edx
	mulss	xmm0, DWORD PTR __real@38000000
	movss	DWORD PTR tv287[ebp], xmm0
$LN35@compute_vb:
	movss	xmm0, DWORD PTR tv287[ebp]
	movss	DWORD PTR _rate_factor$3[ebp], xmm0
; Line 1290
	cmp	DWORD PTR _constrained_vbr$[ebp], 0
	je	SHORT $LN2@compute_vb
; Line 1291
	movss	xmm0, DWORD PTR __real@3f2b851f
	comiss	xmm0, DWORD PTR _rate_factor$3[ebp]
	jbe	SHORT $LN36@compute_vb
	movss	xmm0, DWORD PTR _rate_factor$3[ebp]
	movss	DWORD PTR tv290[ebp], xmm0
	jmp	SHORT $LN37@compute_vb
$LN36@compute_vb:
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR tv290[ebp], xmm0
$LN37@compute_vb:
	movss	xmm0, DWORD PTR tv290[ebp]
	movss	DWORD PTR _rate_factor$3[ebp], xmm0
$LN2@compute_vb:
; Line 1292
	mov	eax, DWORD PTR _target$[ebp]
	sub	eax, DWORD PTR _base_target$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _rate_factor$3[ebp]
	cvttss2si ecx, xmm0
	add	ecx, DWORD PTR _base_target$[ebp]
	mov	DWORD PTR _target$[ebp], ecx
$LN5@compute_vb:
; Line 1296
	cmp	DWORD PTR _has_surround_mask$[ebp], 0
	jne	$LN1@compute_vb
	movss	xmm0, DWORD PTR __real@3e4ccccd
	comiss	xmm0, DWORD PTR _tf_estimate$[ebp]
	jbe	$LN1@compute_vb
; Line 1300
	mov	edx, 96000				; 00017700H
	sub	edx, DWORD PTR _bitrate$[ebp]
	cmp	edx, 32000				; 00007d00H
	jle	SHORT $LN38@compute_vb
	mov	DWORD PTR tv302[ebp], 32000		; 00007d00H
	jmp	SHORT $LN39@compute_vb
$LN38@compute_vb:
	mov	eax, 96000				; 00017700H
	sub	eax, DWORD PTR _bitrate$[ebp]
	mov	DWORD PTR tv302[ebp], eax
$LN39@compute_vb:
	cmp	DWORD PTR tv302[ebp], 0
	jge	SHORT $LN42@compute_vb
	mov	DWORD PTR tv308[ebp], 0
	jmp	SHORT $LN43@compute_vb
$LN42@compute_vb:
	mov	ecx, 96000				; 00017700H
	sub	ecx, DWORD PTR _bitrate$[ebp]
	cmp	ecx, 32000				; 00007d00H
	jle	SHORT $LN40@compute_vb
	mov	DWORD PTR tv307[ebp], 32000		; 00007d00H
	jmp	SHORT $LN41@compute_vb
$LN40@compute_vb:
	mov	edx, 96000				; 00017700H
	sub	edx, DWORD PTR _bitrate$[ebp]
	mov	DWORD PTR tv307[ebp], edx
$LN41@compute_vb:
	mov	eax, DWORD PTR tv307[ebp]
	mov	DWORD PTR tv308[ebp], eax
$LN43@compute_vb:
	cvtsi2ss xmm0, DWORD PTR tv308[ebp]
	mulss	xmm0, DWORD PTR __real@36500998
	movss	DWORD PTR _amount$2[ebp], xmm0
; Line 1301
	movss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	mulss	xmm0, DWORD PTR _amount$2[ebp]
	movss	DWORD PTR _tvbr_factor$1[ebp], xmm0
; Line 1302
	cvtsi2ss xmm0, DWORD PTR _target$[ebp]
	mulss	xmm0, DWORD PTR _tvbr_factor$1[ebp]
	cvttss2si ecx, xmm0
	add	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR _target$[ebp], ecx
$LN1@compute_vb:
; Line 1306
	mov	edx, DWORD PTR _base_target$[ebp]
	shl	edx, 1
	cmp	edx, DWORD PTR _target$[ebp]
	jge	SHORT $LN44@compute_vb
	mov	eax, DWORD PTR _base_target$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv323[ebp], eax
	jmp	SHORT $LN45@compute_vb
$LN44@compute_vb:
	mov	ecx, DWORD PTR _target$[ebp]
	mov	DWORD PTR tv323[ebp], ecx
$LN45@compute_vb:
	mov	edx, DWORD PTR tv323[ebp]
	mov	DWORD PTR _target$[ebp], edx
; Line 1308
	mov	eax, DWORD PTR _target$[ebp]
; Line 1309
	pop	edi
	mov	esp, ebp
	pop	ebp
	ret	0
_compute_vbr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _run_prefilter
_TEXT	SEGMENT
tv256 = -136						; size = 4
tv245 = -132						; size = 4
tv246 = -128						; size = 4
tv242 = -124						; size = 4
tv585 = -120						; size = 8
tv575 = -112						; size = 4
tv573 = -108						; size = 4
tv222 = -104						; size = 4
tv162 = -100						; size = 4
tv453 = -96						; size = 4
tv71 = -92						; size = 4
tv448 = -88						; size = 4
__$AllocaPad$$ = -80					; size = 4
_offset$1 = -72						; size = 4
_pitch_buf$2 = -68					; size = 4
_overlap$ = -64						; size = 4
_qg$ = -60						; size = 4
_pf_on$ = -56						; size = 4
_pf_threshold$ = -52					; size = 4
_gain1$ = -48						; size = 4
_pitch_index$ = -40					; size = 4
_mode$ = -32						; size = 4
_pre$ = -24						; size = 8
__pre$ = -12						; size = 4
_c$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_in$ = 12						; size = 4
_prefilter_mem$ = 16					; size = 4
_CC$ = 20						; size = 4
_N$ = 24						; size = 4
_prefilter_tapset$ = 28					; size = 4
_pitch$ = 32						; size = 4
_gain$ = 36						; size = 4
_qgain$ = 40						; size = 4
_enabled$ = 44						; size = 4
_nbAvailableBytes$ = 48					; size = 4
_run_prefilter PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 1067
	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR __$AllocaPad$$[ebp], 0
; Line 1080
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mode$[ebp], ecx
; Line 1081
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _overlap$[ebp], eax
; Line 1082
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, 1024				; 00000400H
	imul	ecx, DWORD PTR _CC$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv448[ebp], ecx
	mov	eax, DWORD PTR tv448[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv71[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv448[ebp]
	mov	ecx, DWORD PTR tv71[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv71[ebp], 32			; 00000020H
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR __pre$[ebp], eax
; Line 1084
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __pre$[ebp]
	mov	DWORD PTR _pre$[ebp+edx], eax
; Line 1085
	mov	ecx, DWORD PTR _N$[ebp]
	mov	edx, DWORD PTR __pre$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4096]
	mov	ecx, 4
	shl	ecx, 0
	mov	DWORD PTR _pre$[ebp+ecx], eax
; Line 1088
	mov	DWORD PTR _c$[ebp], 0
$LN23@run_prefil:
; Line 1089
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _prefilter_mem$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _pre$[ebp+edx*4]
	sub	eax, ecx
	sar	eax, 2
	imul	ecx, eax, 0
	add	ecx, 4096				; 00001000H
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _prefilter_mem$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _pre$[ebp+edx*4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1090
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _pre$[ebp+ecx*4]
	add	edx, 4096				; 00001000H
	mov	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	imul	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _overlap$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	sub	edx, eax
	sar	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _overlap$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pre$[ebp+eax*4]
	add	ecx, 4096				; 00001000H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1091
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _CC$[ebp]
	jl	$LN23@run_prefil
; Line 1093
	cmp	DWORD PTR _enabled$[ebp], 0
	je	$LN20@run_prefil
; Line 1096
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, 1024				; 00000400H
	sar	ecx, 1
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv453[ebp], ecx
	mov	eax, DWORD PTR tv453[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv162[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv453[ebp]
	mov	ecx, DWORD PTR tv162[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv162[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv162[ebp]
	mov	DWORD PTR _pitch_buf$2[ebp], eax
; Line 1098
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _CC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, 1024				; 00000400H
	push	ecx
	mov	edx, DWORD PTR _pitch_buf$2[ebp]
	push	edx
	lea	eax, DWORD PTR _pre$[ebp]
	push	eax
	call	_pitch_downsample
	add	esp, 20					; 00000014H
; Line 1103
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	lea	eax, DWORD PTR _pitch_index$[ebp]
	push	eax
	push	979					; 000003d3H
	mov	ecx, DWORD PTR _N$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pitch_buf$2[ebp]
	push	edx
	mov	eax, DWORD PTR _pitch_buf$2[ebp]
	add	eax, 2048				; 00000800H
	push	eax
	call	_pitch_search
	add	esp, 24					; 00000018H
; Line 1104
	mov	ecx, 1024				; 00000400H
	sub	ecx, DWORD PTR _pitch_index$[ebp]
	mov	DWORD PTR _pitch_index$[ebp], ecx
; Line 1107
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+108]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	lea	ecx, DWORD PTR _pitch_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _N$[ebp]
	push	edx
	push	15					; 0000000fH
	push	1024					; 00000400H
	mov	eax, DWORD PTR _pitch_buf$2[ebp]
	push	eax
	call	_remove_doubling
	add	esp, 32					; 00000020H
	fstp	DWORD PTR _gain1$[ebp]
; Line 1108
	cmp	DWORD PTR _pitch_index$[ebp], 1022	; 000003feH
	jle	SHORT $LN19@run_prefil
; Line 1109
	mov	DWORD PTR _pitch_index$[ebp], 1022	; 000003feH
$LN19@run_prefil:
; Line 1110
	movss	xmm0, DWORD PTR __real@3f333333
	mulss	xmm0, DWORD PTR _gain1$[ebp]
	movss	DWORD PTR _gain1$[ebp], xmm0
; Line 1112
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+56], 2
	jle	SHORT $LN18@run_prefil
; Line 1113
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _gain1$[ebp]
	movss	DWORD PTR _gain1$[ebp], xmm0
$LN18@run_prefil:
; Line 1114
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+56], 4
	jle	SHORT $LN17@run_prefil
; Line 1115
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _gain1$[ebp]
	movss	DWORD PTR _gain1$[ebp], xmm0
$LN17@run_prefil:
; Line 1116
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+56], 8
	jle	SHORT $LN16@run_prefil
; Line 1117
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _gain1$[ebp], xmm0
$LN16@run_prefil:
; Line 1118
	jmp	SHORT $LN15@run_prefil
$LN20@run_prefil:
; Line 1119
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _gain1$[ebp], xmm0
; Line 1120
	mov	DWORD PTR _pitch_index$[ebp], 15	; 0000000fH
$LN15@run_prefil:
; Line 1124
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
; Line 1127
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _pitch_index$[ebp]
	sub	edx, DWORD PTR [ecx+104]
	push	edx
	call	_abs
	add	esp, 4
	imul	eax, eax, 10
	cmp	eax, DWORD PTR _pitch_index$[ebp]
	jle	SHORT $LN14@run_prefil
; Line 1128
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
$LN14@run_prefil:
; Line 1129
	cmp	DWORD PTR _nbAvailableBytes$[ebp], 25	; 00000019H
	jge	SHORT $LN13@run_prefil
; Line 1130
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
$LN13@run_prefil:
; Line 1131
	cmp	DWORD PTR _nbAvailableBytes$[ebp], 35	; 00000023H
	jge	SHORT $LN12@run_prefil
; Line 1132
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
$LN12@run_prefil:
; Line 1133
	mov	ecx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	comiss	xmm0, DWORD PTR __real@3ecccccd
	jbe	SHORT $LN11@run_prefil
; Line 1134
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
$LN11@run_prefil:
; Line 1135
	mov	edx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	comiss	xmm0, DWORD PTR __real@3f0ccccd
	jbe	SHORT $LN10@run_prefil
; Line 1136
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	subss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
$LN10@run_prefil:
; Line 1139
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	comiss	xmm0, DWORD PTR __real@3e4ccccd
	jbe	SHORT $LN26@run_prefil
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
	jmp	SHORT $LN27@run_prefil
$LN26@run_prefil:
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR tv222[ebp], xmm0
$LN27@run_prefil:
	movss	xmm0, DWORD PTR tv222[ebp]
	movss	DWORD PTR _pf_threshold$[ebp], xmm0
; Line 1140
	movss	xmm0, DWORD PTR _pf_threshold$[ebp]
	comiss	xmm0, DWORD PTR _gain1$[ebp]
	jbe	SHORT $LN9@run_prefil
; Line 1142
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _gain1$[ebp], xmm0
; Line 1143
	mov	DWORD PTR _pf_on$[ebp], 0
; Line 1144
	mov	DWORD PTR _qg$[ebp], 0
; Line 1145
	jmp	$LN8@run_prefil
$LN9@run_prefil:
; Line 1148
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR _gain1$[ebp]
	subss	xmm0, DWORD PTR [eax+108]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv573[ebp]
	fld	DWORD PTR tv573[ebp]
	fstp	DWORD PTR tv575[ebp]
	movss	xmm0, DWORD PTR __real@3dcccccd
	comiss	xmm0, DWORD PTR tv575[ebp]
	jbe	SHORT $LN7@run_prefil
; Line 1149
	mov	ecx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	movss	DWORD PTR _gain1$[ebp], xmm0
$LN7@run_prefil:
; Line 1154
	movss	xmm0, DWORD PTR _gain1$[ebp]
	mulss	xmm0, DWORD PTR __real@42000000
	divss	xmm0, DWORD PTR __real@40400000
	addss	xmm0, DWORD PTR __real@3f000000
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv585[ebp]
	movsd	xmm0, QWORD PTR tv585[ebp]
	cvttsd2si edx, xmm0
	sub	edx, 1
	mov	DWORD PTR _qg$[ebp], edx
; Line 1156
	cmp	DWORD PTR _qg$[ebp], 7
	jle	SHORT $LN28@run_prefil
	mov	DWORD PTR tv242[ebp], 7
	jmp	SHORT $LN29@run_prefil
$LN28@run_prefil:
	mov	eax, DWORD PTR _qg$[ebp]
	mov	DWORD PTR tv242[ebp], eax
$LN29@run_prefil:
	cmp	DWORD PTR tv242[ebp], 0
	jge	SHORT $LN32@run_prefil
	mov	DWORD PTR tv246[ebp], 0
	jmp	SHORT $LN33@run_prefil
$LN32@run_prefil:
	cmp	DWORD PTR _qg$[ebp], 7
	jle	SHORT $LN30@run_prefil
	mov	DWORD PTR tv245[ebp], 7
	jmp	SHORT $LN31@run_prefil
$LN30@run_prefil:
	mov	ecx, DWORD PTR _qg$[ebp]
	mov	DWORD PTR tv245[ebp], ecx
$LN31@run_prefil:
	mov	edx, DWORD PTR tv245[ebp]
	mov	DWORD PTR tv246[ebp], edx
$LN33@run_prefil:
	mov	eax, DWORD PTR tv246[ebp]
	mov	DWORD PTR _qg$[ebp], eax
; Line 1157
	mov	ecx, DWORD PTR _qg$[ebp]
	add	ecx, 1
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR __real@3dc00000
	movss	DWORD PTR _gain1$[ebp], xmm0
; Line 1158
	mov	DWORD PTR _pf_on$[ebp], 1
$LN8@run_prefil:
; Line 1162
	mov	DWORD PTR _c$[ebp], 0
$LN6@run_prefil:
; Line 1163
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+44]
	sub	eax, DWORD PTR _overlap$[ebp]
	mov	DWORD PTR _offset$1[ebp], eax
; Line 1164
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+104], 15			; 0000000fH
	jle	SHORT $LN34@run_prefil
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv256[ebp], eax
	jmp	SHORT $LN35@run_prefil
$LN34@run_prefil:
	mov	DWORD PTR tv256[ebp], 15		; 0000000fH
$LN35@run_prefil:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR tv256[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 1165
	mov	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	imul	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+200]
	sub	edx, eax
	sar	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _overlap$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _overlap$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+200]
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1166
	cmp	DWORD PTR _offset$1[ebp], 0
	je	$LN3@run_prefil
; Line 1169
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [ecx+108]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _offset$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _pre$[ebp+edx*4]
	add	eax, 4096				; 00001000H
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _overlap$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_comb_filter
	add	esp, 48					; 00000030H
$LN3@run_prefil:
; Line 1173
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _overlap$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _prefilter_tapset$[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	movss	xmm0, DWORD PTR _gain1$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [edx+108]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _N$[ebp]
	sub	eax, DWORD PTR _offset$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pitch_index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _pre$[ebp+ecx*4]
	mov	eax, DWORD PTR _offset$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+4096]
	push	ecx
	mov	edx, DWORD PTR _N$[ebp]
	add	edx, DWORD PTR _overlap$[ebp]
	imul	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _overlap$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _offset$1[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_comb_filter
	add	esp, 48					; 00000030H
; Line 1174
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+200]
	mov	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	imul	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
	sub	edx, eax
	sar	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _overlap$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _N$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+200]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1176
	cmp	DWORD PTR _N$[ebp], 1024		; 00000400H
	jle	SHORT $LN2@run_prefil
; Line 1178
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prefilter_mem$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pre$[ebp+eax*4]
	mov	eax, DWORD PTR _N$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	sub	edx, ecx
	sar	edx, 2
	imul	edx, edx, 0
	add	edx, 4096				; 00001000H
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _pre$[ebp+eax*4]
	mov	edx, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _prefilter_mem$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1179
	jmp	$LN1@run_prefil
$LN2@run_prefil:
; Line 1180
	mov	ecx, 1024				; 00000400H
	sub	ecx, DWORD PTR _N$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	shl	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _prefilter_mem$[ebp]
	lea	edx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	esi, DWORD PTR _prefilter_mem$[ebp]
	lea	eax, DWORD PTR [esi+eax*4]
	mov	esi, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [eax+esi*4]
	sub	edx, eax
	sar	edx, 2
	imul	edx, edx, 0
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	shl	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _prefilter_mem$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _N$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prefilter_mem$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
; Line 1181
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prefilter_mem$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4096]
	mov	eax, DWORD PTR _N$[ebp]
	shl	eax, 2
	sub	edx, eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _pre$[ebp+ecx*4]
	add	eax, 4096				; 00001000H
	sub	edx, eax
	sar	edx, 2
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _N$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _pre$[ebp+ecx*4]
	add	edx, 4096				; 00001000H
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _prefilter_mem$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4096]
	mov	eax, DWORD PTR _N$[ebp]
	shl	eax, 2
	sub	edx, eax
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH
$LN1@run_prefil:
; Line 1183
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _CC$[ebp]
	jl	$LN6@run_prefil
; Line 1186
	mov	eax, DWORD PTR _gain$[ebp]
	movss	xmm0, DWORD PTR _gain1$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 1187
	mov	ecx, DWORD PTR _pitch$[ebp]
	mov	edx, DWORD PTR _pitch_index$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1188
	mov	eax, DWORD PTR _qgain$[ebp]
	mov	ecx, DWORD PTR _qg$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1189
	mov	eax, DWORD PTR _pf_on$[ebp]
; Line 1190
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN40@run_prefil
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-144]
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN40@run_prefil:
	DD	3
	DD	$LN39@run_prefil
$LN39@run_prefil:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN36@run_prefil
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN37@run_prefil
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN38@run_prefil
$LN38@run_prefil:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
$LN37@run_prefil:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN36@run_prefil:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_run_prefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _dynalloc_analysis
_TEXT	SEGMENT
tv528 = -180						; size = 4
tv490 = -176						; size = 4
tv472 = -172						; size = 4
tv450 = -168						; size = 4
tv432 = -164						; size = 4
tv416 = -160						; size = 4
tv396 = -156						; size = 4
tv370 = -152						; size = 4
tv352 = -148						; size = 4
tv339 = -144						; size = 4
tv804 = -140						; size = 4
tv318 = -136						; size = 4
tv308 = -132						; size = 4
tv782 = -128						; size = 4
tv773 = -124						; size = 4
tv292 = -120						; size = 4
tv765 = -116						; size = 4
tv1001 = -112						; size = 4
tv260 = -108						; size = 4
tv261 = -104						; size = 4
tv234 = -100						; size = 4
tv204 = -96						; size = 4
tv154 = -92						; size = 4
tv73 = -88						; size = 4
tv621 = -84						; size = 4
tv68 = -80						; size = 4
tv616 = -76						; size = 4
__$AllocaPad$$ = -68					; size = 4
_cap$1 = -60						; size = 4
_boost_bits$2 = -56					; size = 4
_boost$3 = -52						; size = 4
_width$4 = -48						; size = 4
_f$5 = -44						; size = 4
_tmp$6 = -40						; size = 4
_offset$7 = -36						; size = 4
_last$8 = -32						; size = 4
_noise_floor$ = -28					; size = 4
_follower$ = -24					; size = 4
_maxDepth$ = -20					; size = 4
_tot_boost$ = -16					; size = 4
_c$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_bandLogE$ = 8						; size = 4
_bandLogE2$ = 12					; size = 4
_nbEBands$ = 16						; size = 4
_start$ = 20						; size = 4
_end$ = 24						; size = 4
_C$ = 28						; size = 4
_offsets$ = 32						; size = 4
_lsb_depth$ = 36					; size = 4
_logN$ = 40						; size = 4
_isTransient$ = 44					; size = 4
_vbr$ = 48						; size = 4
_constrained_vbr$ = 52					; size = 4
_eBands$ = 56						; size = 4
_LM$ = 60						; size = 4
_effectiveBytes$ = 64					; size = 4
_tot_boost_$ = 68					; size = 4
_lfe$ = 72						; size = 4
_surround_dynalloc$ = 76				; size = 4
_dynalloc_analysis PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 934
	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR __$AllocaPad$$[ebp], 0
; Line 936
	mov	DWORD PTR _tot_boost$[ebp], 0
; Line 941
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv616[ebp], eax
	mov	eax, DWORD PTR tv616[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv68[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv616[ebp]
	mov	ecx, DWORD PTR tv68[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv68[ebp], 32			; 00000020H
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _follower$[ebp], edx
; Line 942
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv621[ebp], eax
	mov	eax, DWORD PTR tv621[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv73[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv621[ebp]
	mov	ecx, DWORD PTR tv73[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv73[ebp], 32			; 00000020H
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _noise_floor$[ebp], edx
; Line 943
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 945
	movss	xmm0, DWORD PTR __real@c1ff3333
	movss	DWORD PTR _maxDepth$[ebp], xmm0
; Line 946
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN54@dynalloc_a
$LN53@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN54@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN52@dynalloc_a
; Line 952
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _logN$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3d800000
	addss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, 9
	sub	ecx, DWORD PTR _lsb_depth$[ebp]
	cvtsi2ss xmm1, ecx
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _i$[ebp]
	subss	xmm0, DWORD PTR _eMeans[edx*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 5
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 5
	imul	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR __real@3bcb295f
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _noise_floor$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 953
	jmp	SHORT $LN53@dynalloc_a
$LN52@dynalloc_a:
; Line 954
	mov	DWORD PTR _c$[ebp], 0
$LN51@dynalloc_a:
; Line 956
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN48@dynalloc_a
$LN47@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN48@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN46@dynalloc_a
; Line 957
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _noise_floor$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	subss	xmm0, DWORD PTR [esi+edx*4]
	movss	xmm1, DWORD PTR _maxDepth$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN57@dynalloc_a
	movss	xmm0, DWORD PTR _maxDepth$[ebp]
	movss	DWORD PTR tv154[ebp], xmm0
	jmp	SHORT $LN58@dynalloc_a
$LN57@dynalloc_a:
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _noise_floor$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	subss	xmm0, DWORD PTR [esi+edx*4]
	movss	DWORD PTR tv154[ebp], xmm0
$LN58@dynalloc_a:
	movss	xmm0, DWORD PTR tv154[ebp]
	movss	DWORD PTR _maxDepth$[ebp], xmm0
	jmp	SHORT $LN47@dynalloc_a
$LN46@dynalloc_a:
; Line 958
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _C$[ebp]
	jl	$LN51@dynalloc_a
; Line 960
	cmp	DWORD PTR _effectiveBytes$[ebp], 50	; 00000032H
	jle	$LN10@dynalloc_a
	cmp	DWORD PTR _LM$[ebp], 1
	jl	$LN10@dynalloc_a
	cmp	DWORD PTR _lfe$[ebp], 0
	jne	$LN10@dynalloc_a
; Line 962
	mov	DWORD PTR _last$8[ebp], 0
; Line 963
	mov	DWORD PTR _c$[ebp], 0
$LN44@dynalloc_a:
; Line 968
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _f$5[ebp], ecx
; Line 969
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _f$5[ebp]
	mov	esi, DWORD PTR _bandLogE2$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [eax+ecx], edx
; Line 970
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN41@dynalloc_a
$LN40@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN41@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	$LN39@dynalloc_a
; Line 975
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE2$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	movss	xmm1, DWORD PTR [eax+edx*4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN38@dynalloc_a
; Line 976
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _last$8[ebp], ecx
$LN38@dynalloc_a:
; Line 977
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-4]
	addss	xmm0, DWORD PTR __real@3fc00000
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN59@dynalloc_a
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4-4]
	addss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR tv204[ebp], xmm0
	jmp	SHORT $LN60@dynalloc_a
$LN59@dynalloc_a:
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv204[ebp], xmm0
$LN60@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv204[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 978
	jmp	$LN40@dynalloc_a
$LN39@dynalloc_a:
; Line 979
	mov	eax, DWORD PTR _last$8[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN37@dynalloc_a
$LN36@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN37@dynalloc_a:
	cmp	DWORD PTR _i$[ebp], 0
	jl	$LN35@dynalloc_a
; Line 980
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+4]
	addss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN61@dynalloc_a
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+4]
	addss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv234[ebp], xmm0
	jmp	SHORT $LN62@dynalloc_a
$LN61@dynalloc_a:
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv234[ebp], xmm0
$LN62@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv234[ebp]
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN65@dynalloc_a
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv261[ebp], xmm0
	jmp	SHORT $LN66@dynalloc_a
$LN65@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4+4]
	addss	xmm0, DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN63@dynalloc_a
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4+4]
	addss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv260[ebp], xmm0
	jmp	SHORT $LN64@dynalloc_a
$LN63@dynalloc_a:
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv260[ebp], xmm0
$LN64@dynalloc_a:
	movss	xmm0, DWORD PTR tv260[ebp]
	movss	DWORD PTR tv261[ebp], xmm0
$LN66@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv261[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	$LN36@dynalloc_a
$LN35@dynalloc_a:
; Line 985
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _offset$7[ebp], xmm0
; Line 986
	mov	DWORD PTR _i$[ebp], 2
	jmp	SHORT $LN34@dynalloc_a
$LN33@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@dynalloc_a:
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, 2
	cmp	DWORD PTR _i$[ebp], ecx
	jge	$LN32@dynalloc_a
; Line 987
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4-8]
	push	eax
	movss	DWORD PTR tv1001[ebp], xmm0
	call	_median_of_5
	add	esp, 4
	fstp	DWORD PTR tv765[ebp]
	movss	xmm0, DWORD PTR tv765[ebp]
	subss	xmm0, DWORD PTR _offset$7[ebp]
	movss	xmm1, DWORD PTR tv1001[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN67@dynalloc_a
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv292[ebp], xmm0
	jmp	SHORT $LN68@dynalloc_a
$LN67@dynalloc_a:
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE2$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4-8]
	push	edx
	call	_median_of_5
	add	esp, 4
	fstp	DWORD PTR tv773[ebp]
	movss	xmm0, DWORD PTR tv773[ebp]
	subss	xmm0, DWORD PTR _offset$7[ebp]
	movss	DWORD PTR tv292[ebp], xmm0
$LN68@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv292[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	$LN33@dynalloc_a
$LN32@dynalloc_a:
; Line 988
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_median_of_3
	add	esp, 4
	fstp	DWORD PTR tv782[ebp]
	movss	xmm0, DWORD PTR tv782[ebp]
	subss	xmm0, DWORD PTR _offset$7[ebp]
	movss	DWORD PTR _tmp$6[ebp], xmm0
; Line 989
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	comiss	xmm0, DWORD PTR _tmp$6[ebp]
	jbe	SHORT $LN69@dynalloc_a
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR tv308[ebp], xmm0
	jmp	SHORT $LN70@dynalloc_a
$LN69@dynalloc_a:
	movss	xmm0, DWORD PTR _tmp$6[ebp]
	movss	DWORD PTR tv308[ebp], xmm0
$LN70@dynalloc_a:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv308[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 990
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	comiss	xmm0, DWORD PTR _tmp$6[ebp]
	jbe	SHORT $LN71@dynalloc_a
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR tv318[ebp], xmm0
	jmp	SHORT $LN72@dynalloc_a
$LN71@dynalloc_a:
	movss	xmm0, DWORD PTR _tmp$6[ebp]
	movss	DWORD PTR tv318[ebp], xmm0
$LN72@dynalloc_a:
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv318[ebp]
	movss	DWORD PTR [ecx+eax], xmm0
; Line 991
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4-12]
	push	ecx
	call	_median_of_3
	add	esp, 4
	fstp	DWORD PTR tv804[ebp]
	movss	xmm0, DWORD PTR tv804[ebp]
	subss	xmm0, DWORD PTR _offset$7[ebp]
	movss	DWORD PTR _tmp$6[ebp], xmm0
; Line 992
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-8]
	comiss	xmm0, DWORD PTR _tmp$6[ebp]
	jbe	SHORT $LN73@dynalloc_a
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4-8]
	movss	DWORD PTR tv339[ebp], xmm0
	jmp	SHORT $LN74@dynalloc_a
$LN73@dynalloc_a:
	movss	xmm0, DWORD PTR _tmp$6[ebp]
	movss	DWORD PTR tv339[ebp], xmm0
$LN74@dynalloc_a:
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv339[ebp]
	movss	DWORD PTR [ecx+eax*4-8], xmm0
; Line 993
	mov	edx, DWORD PTR _end$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4-4]
	comiss	xmm0, DWORD PTR _tmp$6[ebp]
	jbe	SHORT $LN75@dynalloc_a
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4-4]
	movss	DWORD PTR tv352[ebp], xmm0
	jmp	SHORT $LN76@dynalloc_a
$LN75@dynalloc_a:
	movss	xmm0, DWORD PTR _tmp$6[ebp]
	movss	DWORD PTR tv352[ebp], xmm0
$LN76@dynalloc_a:
	mov	eax, DWORD PTR _end$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv352[ebp]
	movss	DWORD PTR [ecx+eax*4-4], xmm0
; Line 995
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@dynalloc_a
$LN30@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN31@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN29@dynalloc_a
; Line 996
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _noise_floor$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN77@dynalloc_a
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv370[ebp], xmm0
	jmp	SHORT $LN78@dynalloc_a
$LN77@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _noise_floor$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv370[ebp], xmm0
$LN78@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _f$5[ebp]
	movss	xmm0, DWORD PTR tv370[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	SHORT $LN30@dynalloc_a
$LN29@dynalloc_a:
; Line 997
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _C$[ebp]
	jl	$LN44@dynalloc_a
; Line 998
	cmp	DWORD PTR _C$[ebp], 2
	jne	$LN28@dynalloc_a
; Line 1000
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN27@dynalloc_a
$LN26@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN27@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	$LN25@dynalloc_a
; Line 1003
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax*4]
	subss	xmm1, DWORD PTR __real@40800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN79@dynalloc_a
	mov	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv396[ebp], xmm0
	jmp	SHORT $LN80@dynalloc_a
$LN79@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv396[ebp], xmm0
$LN80@dynalloc_a:
	mov	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR tv396[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 1004
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	subss	xmm1, DWORD PTR __real@40800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN81@dynalloc_a
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv416[ebp], xmm0
	jmp	SHORT $LN82@dynalloc_a
$LN81@dynalloc_a:
	mov	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv416[ebp], xmm0
$LN82@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR tv416[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 1005
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	subss	xmm0, DWORD PTR [esi+edx*4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN83@dynalloc_a
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv432[ebp], xmm0
	jmp	SHORT $LN84@dynalloc_a
$LN83@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	subss	xmm0, DWORD PTR [esi+edx*4]
	movss	DWORD PTR tv432[ebp], xmm0
$LN84@dynalloc_a:
	mov	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	subss	xmm0, DWORD PTR [esi+ecx*4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN85@dynalloc_a
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv450[ebp], xmm0
	jmp	SHORT $LN86@dynalloc_a
$LN85@dynalloc_a:
	mov	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	subss	xmm0, DWORD PTR [esi+ecx*4]
	movss	DWORD PTR tv450[ebp], xmm0
$LN86@dynalloc_a:
	movss	xmm0, DWORD PTR tv432[ebp]
	addss	xmm0, DWORD PTR tv450[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 1006
	jmp	$LN26@dynalloc_a
$LN25@dynalloc_a:
; Line 1007
	jmp	$LN21@dynalloc_a
$LN28@dynalloc_a:
; Line 1008
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN23@dynalloc_a
$LN22@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	SHORT $LN21@dynalloc_a
; Line 1010
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	subss	xmm0, DWORD PTR [esi+ecx*4]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN87@dynalloc_a
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv472[ebp], xmm0
	jmp	SHORT $LN88@dynalloc_a
$LN87@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	subss	xmm0, DWORD PTR [esi+ecx*4]
	movss	DWORD PTR tv472[ebp], xmm0
$LN88@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR tv472[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 1011
	jmp	SHORT $LN22@dynalloc_a
$LN21@dynalloc_a:
; Line 1013
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN20@dynalloc_a
$LN19@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN18@dynalloc_a
; Line 1014
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _surround_dynalloc$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN89@dynalloc_a
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv490[ebp], xmm0
	jmp	SHORT $LN90@dynalloc_a
$LN89@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _surround_dynalloc$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv490[ebp], xmm0
$LN90@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR tv490[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	SHORT $LN19@dynalloc_a
$LN18@dynalloc_a:
; Line 1016
	cmp	DWORD PTR _vbr$[ebp], 0
	je	SHORT $LN16@dynalloc_a
	cmp	DWORD PTR _constrained_vbr$[ebp], 0
	je	SHORT $LN13@dynalloc_a
$LN16@dynalloc_a:
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	SHORT $LN13@dynalloc_a
; Line 1018
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN15@dynalloc_a
$LN14@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	SHORT $LN13@dynalloc_a
; Line 1019
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	SHORT $LN14@dynalloc_a
$LN13@dynalloc_a:
; Line 1021
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN12@dynalloc_a
$LN11@dynalloc_a:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@dynalloc_a:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	$LN10@dynalloc_a
; Line 1027
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN9@dynalloc_a
; Line 1028
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
$LN9@dynalloc_a:
; Line 1029
	cmp	DWORD PTR _i$[ebp], 12			; 0000000cH
	jl	SHORT $LN8@dynalloc_a
; Line 1030
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
$LN8@dynalloc_a:
; Line 1031
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR __real@40800000
	comiss	xmm0, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN91@dynalloc_a
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv528[ebp], xmm0
	jmp	SHORT $LN92@dynalloc_a
$LN91@dynalloc_a:
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR tv528[ebp], xmm0
$LN92@dynalloc_a:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR tv528[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 1033
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+2]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	sub	ecx, edx
	mov	eax, ecx
	imul	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	eax, cl
	mov	DWORD PTR _width$4[ebp], eax
; Line 1034
	cmp	DWORD PTR _width$4[ebp], 6
	jge	SHORT $LN7@dynalloc_a
; Line 1036
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	cvttss2si eax, xmm0
	mov	DWORD PTR _boost$3[ebp], eax
; Line 1037
	mov	ecx, DWORD PTR _boost$3[ebp]
	imul	ecx, DWORD PTR _width$4[ebp]
	shl	ecx, 3
	mov	DWORD PTR _boost_bits$2[ebp], ecx
	jmp	SHORT $LN4@dynalloc_a
$LN7@dynalloc_a:
; Line 1038
	cmp	DWORD PTR _width$4[ebp], 48		; 00000030H
	jle	SHORT $LN5@dynalloc_a
; Line 1039
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mulss	xmm0, DWORD PTR __real@41000000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _boost$3[ebp], ecx
; Line 1040
	mov	eax, DWORD PTR _boost$3[ebp]
	imul	eax, DWORD PTR _width$4[ebp]
	shl	eax, 3
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR _boost_bits$2[ebp], eax
; Line 1041
	jmp	SHORT $LN4@dynalloc_a
$LN5@dynalloc_a:
; Line 1042
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _follower$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	cvtsi2ss xmm1, DWORD PTR _width$4[ebp]
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40c00000
	cvttss2si ecx, xmm0
	mov	DWORD PTR _boost$3[ebp], ecx
; Line 1043
	imul	edx, DWORD PTR _boost$3[ebp], 6
	shl	edx, 3
	mov	DWORD PTR _boost_bits$2[ebp], edx
$LN4@dynalloc_a:
; Line 1047
	cmp	DWORD PTR _vbr$[ebp], 0
	je	SHORT $LN2@dynalloc_a
	cmp	DWORD PTR _constrained_vbr$[ebp], 0
	je	SHORT $LN3@dynalloc_a
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	SHORT $LN3@dynalloc_a
$LN2@dynalloc_a:
	mov	ecx, DWORD PTR _tot_boost$[ebp]
	add	ecx, DWORD PTR _boost_bits$2[ebp]
	sar	ecx, 3
	sar	ecx, 3
	mov	eax, DWORD PTR _effectiveBytes$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	ecx, eax
	jle	SHORT $LN3@dynalloc_a
; Line 1049
	mov	eax, DWORD PTR _effectiveBytes$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	shl	eax, 3
	shl	eax, 3
	mov	DWORD PTR _cap$1[ebp], eax
; Line 1050
	mov	edx, DWORD PTR _cap$1[ebp]
	sub	edx, DWORD PTR _tot_boost$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1051
	mov	edx, DWORD PTR _cap$1[ebp]
	mov	DWORD PTR _tot_boost$[ebp], edx
; Line 1052
	jmp	SHORT $LN10@dynalloc_a
; Line 1053
	jmp	SHORT $LN1@dynalloc_a
$LN3@dynalloc_a:
; Line 1054
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR _boost$3[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 1055
	mov	eax, DWORD PTR _tot_boost$[ebp]
	add	eax, DWORD PTR _boost_bits$2[ebp]
	mov	DWORD PTR _tot_boost$[ebp], eax
$LN1@dynalloc_a:
; Line 1057
	jmp	$LN11@dynalloc_a
$LN10@dynalloc_a:
; Line 1059
	mov	ecx, DWORD PTR _tot_boost_$[ebp]
	mov	edx, DWORD PTR _tot_boost$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1061
	fld	DWORD PTR _maxDepth$[ebp]
; Line 1062
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN95@dynalloc_a
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-188]
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN95@dynalloc_a:
	DD	1
	DD	$LN94@dynalloc_a
$LN94@dynalloc_a:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN93@dynalloc_a
$LN93@dynalloc_a:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
_dynalloc_analysis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _median_of_3
_TEXT	SEGMENT
_t2$ = -12						; size = 4
_t1$ = -8						; size = 4
_t0$ = -4						; size = 4
_x$ = 8							; size = 4
_median_of_3 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 911
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 913
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+ecx]
	comiss	xmm0, DWORD PTR [esi+edx]
	jbe	SHORT $LN6@median_of_
; Line 915
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _t0$[ebp], xmm0
; Line 916
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _t1$[ebp], xmm0
; Line 917
	jmp	SHORT $LN5@median_of_
$LN6@median_of_:
; Line 918
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _t0$[ebp], xmm0
; Line 919
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _t1$[ebp], xmm0
$LN5@median_of_:
; Line 921
	mov	edx, 4
	shl	edx, 1
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _t2$[ebp], xmm0
; Line 922
	movss	xmm0, DWORD PTR _t2$[ebp]
	comiss	xmm0, DWORD PTR _t1$[ebp]
	jbe	SHORT $LN4@median_of_
; Line 923
	fld	DWORD PTR _t1$[ebp]
	jmp	SHORT $LN1@median_of_
	jmp	SHORT $LN1@median_of_
$LN4@median_of_:
; Line 924
	movss	xmm0, DWORD PTR _t2$[ebp]
	comiss	xmm0, DWORD PTR _t0$[ebp]
	jbe	SHORT $LN2@median_of_
; Line 925
	fld	DWORD PTR _t2$[ebp]
	jmp	SHORT $LN1@median_of_
; Line 926
	jmp	SHORT $LN1@median_of_
$LN2@median_of_:
; Line 927
	fld	DWORD PTR _t0$[ebp]
$LN1@median_of_:
; Line 928
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_median_of_3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _median_of_5
_TEXT	SEGMENT
tv137 = -44						; size = 4
tv135 = -40						; size = 4
tv132 = -36						; size = 4
tv130 = -32						; size = 4
_tmp$1 = -28						; size = 4
_tmp$2 = -24						; size = 4
_t4$ = -20						; size = 4
_t3$ = -16						; size = 4
_t2$ = -12						; size = 4
_t1$ = -8						; size = 4
_t0$ = -4						; size = 4
_x$ = 8							; size = 4
_median_of_5 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 872
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 874
	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _t2$[ebp], xmm0
; Line 875
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+eax]
	comiss	xmm0, DWORD PTR [esi+ecx]
	jbe	SHORT $LN17@median_of_
; Line 877
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _t0$[ebp], xmm0
; Line 878
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _t1$[ebp], xmm0
; Line 879
	jmp	SHORT $LN16@median_of_
$LN17@median_of_:
; Line 880
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR _t0$[ebp], xmm0
; Line 881
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _t1$[ebp], xmm0
$LN16@median_of_:
; Line 883
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _x$[ebp]
	mov	esi, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx]
	comiss	xmm0, DWORD PTR [esi+eax]
	jbe	SHORT $LN15@median_of_
; Line 885
	mov	edx, 4
	shl	edx, 2
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _t3$[ebp], xmm0
; Line 886
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _t4$[ebp], xmm0
; Line 887
	jmp	SHORT $LN14@median_of_
$LN15@median_of_:
; Line 888
	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR _t3$[ebp], xmm0
; Line 889
	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _t4$[ebp], xmm0
$LN14@median_of_:
; Line 891
	movss	xmm0, DWORD PTR _t0$[ebp]
	comiss	xmm0, DWORD PTR _t3$[ebp]
	jbe	SHORT $LN7@median_of_
$LN12@median_of_:
; Line 893
	movss	xmm0, DWORD PTR _t0$[ebp]
	movss	DWORD PTR _tmp$2[ebp], xmm0
	movss	xmm0, DWORD PTR _t3$[ebp]
	movss	DWORD PTR _t0$[ebp], xmm0
	movss	xmm0, DWORD PTR _tmp$2[ebp]
	movss	DWORD PTR _t3$[ebp], xmm0
	xor	eax, eax
	jne	SHORT $LN12@median_of_
$LN10@median_of_:
; Line 894
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR _tmp$1[ebp], xmm0
	movss	xmm0, DWORD PTR _t4$[ebp]
	movss	DWORD PTR _t1$[ebp], xmm0
	movss	xmm0, DWORD PTR _tmp$1[ebp]
	movss	DWORD PTR _t4$[ebp], xmm0
	xor	ecx, ecx
	jne	SHORT $LN10@median_of_
$LN7@median_of_:
; Line 896
	movss	xmm0, DWORD PTR _t2$[ebp]
	comiss	xmm0, DWORD PTR _t1$[ebp]
	jbe	SHORT $LN6@median_of_
; Line 898
	movss	xmm0, DWORD PTR _t3$[ebp]
	comiss	xmm0, DWORD PTR _t1$[ebp]
	jbe	SHORT $LN5@median_of_
; Line 899
	movss	xmm0, DWORD PTR _t3$[ebp]
	comiss	xmm0, DWORD PTR _t2$[ebp]
	jbe	SHORT $LN20@median_of_
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR tv130[ebp], xmm0
	jmp	SHORT $LN21@median_of_
$LN20@median_of_:
	movss	xmm0, DWORD PTR _t3$[ebp]
	movss	DWORD PTR tv130[ebp], xmm0
$LN21@median_of_:
	fld	DWORD PTR tv130[ebp]
	jmp	$LN1@median_of_
; Line 900
	jmp	SHORT $LN4@median_of_
$LN5@median_of_:
; Line 901
	movss	xmm0, DWORD PTR _t1$[ebp]
	comiss	xmm0, DWORD PTR _t4$[ebp]
	jbe	SHORT $LN22@median_of_
	movss	xmm0, DWORD PTR _t4$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
	jmp	SHORT $LN23@median_of_
$LN22@median_of_:
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR tv132[ebp], xmm0
$LN23@median_of_:
	fld	DWORD PTR tv132[ebp]
	jmp	SHORT $LN1@median_of_
$LN4@median_of_:
; Line 902
	jmp	SHORT $LN1@median_of_
$LN6@median_of_:
; Line 903
	movss	xmm0, DWORD PTR _t3$[ebp]
	comiss	xmm0, DWORD PTR _t2$[ebp]
	jbe	SHORT $LN2@median_of_
; Line 904
	movss	xmm0, DWORD PTR _t3$[ebp]
	comiss	xmm0, DWORD PTR _t1$[ebp]
	jbe	SHORT $LN24@median_of_
	movss	xmm0, DWORD PTR _t1$[ebp]
	movss	DWORD PTR tv135[ebp], xmm0
	jmp	SHORT $LN25@median_of_
$LN24@median_of_:
	movss	xmm0, DWORD PTR _t3$[ebp]
	movss	DWORD PTR tv135[ebp], xmm0
$LN25@median_of_:
	fld	DWORD PTR tv135[ebp]
	jmp	SHORT $LN1@median_of_
; Line 905
	jmp	SHORT $LN1@median_of_
$LN2@median_of_:
; Line 906
	movss	xmm0, DWORD PTR _t4$[ebp]
	comiss	xmm0, DWORD PTR _t2$[ebp]
	jbe	SHORT $LN26@median_of_
	movss	xmm0, DWORD PTR _t2$[ebp]
	movss	DWORD PTR tv137[ebp], xmm0
	jmp	SHORT $LN27@median_of_
$LN26@median_of_:
	movss	xmm0, DWORD PTR _t4$[ebp]
	movss	DWORD PTR tv137[ebp], xmm0
$LN27@median_of_:
	fld	DWORD PTR tv137[ebp]
$LN1@median_of_:
; Line 908
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_median_of_5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _stereo_analysis
_TEXT	SEGMENT
tv180 = -80						; size = 4
tv238 = -76						; size = 4
tv235 = -72						; size = 4
tv256 = -68						; size = 4
tv230 = -64						; size = 4
tv227 = -60						; size = 4
tv221 = -56						; size = 4
tv218 = -52						; size = 4
tv254 = -48						; size = 4
tv213 = -44						; size = 4
tv210 = -40						; size = 4
_S$1 = -36						; size = 4
_M$2 = -32						; size = 4
_R$3 = -28						; size = 4
_L$4 = -24						; size = 4
_j$5 = -20						; size = 4
_sumMS$ = -16						; size = 4
_sumLR$ = -12						; size = 4
_thetas$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_X$ = 12						; size = 4
_LM$ = 16						; size = 4
_N0$ = 20						; size = 4
_stereo_analysis PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 840
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 843
	movss	xmm0, DWORD PTR __real@26901d7d
	movss	DWORD PTR _sumLR$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@26901d7d
	movss	DWORD PTR _sumMS$[ebp], xmm0
; Line 846
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@stereo_ana
$LN6@stereo_ana:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@stereo_ana:
	cmp	DWORD PTR _i$[ebp], 13			; 0000000dH
	jge	$LN5@stereo_ana
; Line 849
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _j$5[ebp], edx
	jmp	SHORT $LN4@stereo_ana
$LN3@stereo_ana:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN4@stereo_ana:
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+eax*2+2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	cmp	DWORD PTR _j$5[ebp], edx
	jge	$LN2@stereo_ana
; Line 853
	mov	eax, DWORD PTR _j$5[ebp]
	mov	ecx, DWORD PTR _X$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _L$4[ebp], xmm0
; Line 854
	mov	edx, DWORD PTR _N0$[ebp]
	add	edx, DWORD PTR _j$5[ebp]
	mov	eax, DWORD PTR _X$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR _R$3[ebp], xmm0
; Line 855
	movss	xmm0, DWORD PTR _L$4[ebp]
	addss	xmm0, DWORD PTR _R$3[ebp]
	movss	DWORD PTR _M$2[ebp], xmm0
; Line 856
	movss	xmm0, DWORD PTR _L$4[ebp]
	subss	xmm0, DWORD PTR _R$3[ebp]
	movss	DWORD PTR _S$1[ebp], xmm0
; Line 857
	cvtss2sd xmm0, DWORD PTR _L$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv210[ebp]
	fld	DWORD PTR tv210[ebp]
	fstp	DWORD PTR tv213[ebp]
	movss	xmm0, DWORD PTR tv213[ebp]
	cvtss2sd xmm1, DWORD PTR _R$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movss	DWORD PTR tv254[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv218[ebp]
	fld	DWORD PTR tv218[ebp]
	fstp	DWORD PTR tv221[ebp]
	movss	xmm0, DWORD PTR tv254[ebp]
	addss	xmm0, DWORD PTR tv221[ebp]
	addss	xmm0, DWORD PTR _sumLR$[ebp]
	movss	DWORD PTR _sumLR$[ebp], xmm0
; Line 858
	cvtss2sd xmm0, DWORD PTR _M$2[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv227[ebp]
	fld	DWORD PTR tv227[ebp]
	fstp	DWORD PTR tv230[ebp]
	movss	xmm0, DWORD PTR tv230[ebp]
	cvtss2sd xmm1, DWORD PTR _S$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movss	DWORD PTR tv256[ebp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv235[ebp]
	fld	DWORD PTR tv235[ebp]
	fstp	DWORD PTR tv238[ebp]
	movss	xmm0, DWORD PTR tv256[ebp]
	addss	xmm0, DWORD PTR tv238[ebp]
	addss	xmm0, DWORD PTR _sumMS$[ebp]
	movss	DWORD PTR _sumMS$[ebp], xmm0
; Line 859
	jmp	$LN3@stereo_ana
$LN2@stereo_ana:
; Line 860
	jmp	$LN6@stereo_ana
$LN5@stereo_ana:
; Line 861
	movss	xmm0, DWORD PTR __real@3f3504f7
	mulss	xmm0, DWORD PTR _sumMS$[ebp]
	movss	DWORD PTR _sumMS$[ebp], xmm0
; Line 862
	mov	DWORD PTR _thetas$[ebp], 13		; 0000000dH
; Line 864
	cmp	DWORD PTR _LM$[ebp], 1
	jg	SHORT $LN1@stereo_ana
; Line 865
	mov	ecx, DWORD PTR _thetas$[ebp]
	sub	ecx, 8
	mov	DWORD PTR _thetas$[ebp], ecx
$LN1@stereo_ana:
; Line 867
	mov	edx, 2
	imul	eax, edx, 13
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	movsx	eax, WORD PTR [edx+eax]
	mov	ecx, DWORD PTR _LM$[ebp]
	add	ecx, 1
	shl	eax, cl
	add	eax, DWORD PTR _thetas$[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _sumMS$[ebp]
	mov	ecx, 2
	imul	edx, ecx, 13
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	movsx	edx, WORD PTR [ecx+edx]
	mov	ecx, DWORD PTR _LM$[ebp]
	add	ecx, 1
	shl	edx, cl
	cvtsi2ss xmm1, edx
	mulss	xmm1, DWORD PTR _sumLR$[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN10@stereo_ana
	mov	DWORD PTR tv180[ebp], 1
	jmp	SHORT $LN11@stereo_ana
$LN10@stereo_ana:
	mov	DWORD PTR tv180[ebp], 0
$LN11@stereo_ana:
	mov	eax, DWORD PTR tv180[ebp]
; Line 868
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_stereo_analysis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _alloc_trim_analysis
_TEXT	SEGMENT
tv360 = -168						; size = 4
tv361 = -164						; size = 4
tv357 = -160						; size = 4
tv348 = -156						; size = 4
tv349 = -152						; size = 4
tv333 = -148						; size = 4
tv312 = -144						; size = 4
tv313 = -140						; size = 4
tv301 = -136						; size = 4
tv271 = -132						; size = 4
tv256 = -128						; size = 4
tv538 = -124						; size = 8
tv248 = -116						; size = 4
tv529 = -112						; size = 8
tv612 = -104						; size = 4
tv520 = -100						; size = 8
tv511 = -92						; size = 4
tv208 = -88						; size = 4
tv505 = -84						; size = 4
tv502 = -80						; size = 4
tv495 = -76						; size = 4
tv194 = -72						; size = 4
tv489 = -68						; size = 4
tv486 = -64						; size = 4
tv457 = -60						; size = 4
tv147 = -56						; size = 4
tv451 = -52						; size = 4
tv448 = -48						; size = 4
_partial$1 = -44					; size = 4
_partial$2 = -40					; size = 4
_minXC$3 = -36						; size = 4
_sum$4 = -32						; size = 4
_logXC2$ = -28						; size = 4
_logXC$ = -24						; size = 4
_trim$ = -20						; size = 4
_trim_index$ = -16					; size = 4
_c$ = -12						; size = 4
_diff$ = -8						; size = 4
_i$ = -4						; size = 4
_m$ = 8							; size = 4
_X$ = 12						; size = 4
_bandLogE$ = 16						; size = 4
_end$ = 20						; size = 4
_LM$ = 24						; size = 4
_C$ = 28						; size = 4
_N0$ = 32						; size = 4
_analysis$ = 36						; size = 4
_stereo_saving$ = 40					; size = 4
_tf_estimate$ = 44					; size = 4
_intensity$ = 48					; size = 4
_surround_trim$ = 52					; size = 4
_arch$ = 56						; size = 4
_alloc_trim_analysis PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 758
	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	push	edi
	lea	edi, DWORD PTR [ebp-168]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 760
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _diff$[ebp], xmm0
; Line 763
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _trim$[ebp], xmm0
; Line 765
	cmp	DWORD PTR _C$[ebp], 2
	jne	$LN14@alloc_trim
; Line 767
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sum$4[ebp], xmm0
; Line 770
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@alloc_trim
$LN12@alloc_trim:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@alloc_trim:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN11@alloc_trim
; Line 774
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+eax*2+2]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [ecx+eax*2]
	sub	edx, ecx
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	push	edx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _N0$[ebp]
	mov	eax, DWORD PTR _X$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _X$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_celt_inner_prod_c
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _partial$2[ebp]
; Line 775
	movss	xmm0, DWORD PTR _sum$4[ebp]
	addss	xmm0, DWORD PTR _partial$2[ebp]
	movss	DWORD PTR _sum$4[ebp], xmm0
; Line 776
	jmp	$LN12@alloc_trim
$LN11@alloc_trim:
; Line 777
	movss	xmm0, DWORD PTR __real@3e000000
	mulss	xmm0, DWORD PTR _sum$4[ebp]
	movss	DWORD PTR _sum$4[ebp], xmm0
; Line 778
	cvtss2sd xmm0, DWORD PTR _sum$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv448[ebp]
	fld	DWORD PTR tv448[ebp]
	fstp	DWORD PTR tv451[ebp]
	movss	xmm0, DWORD PTR tv451[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN17@alloc_trim
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv147[ebp], xmm0
	jmp	SHORT $LN18@alloc_trim
$LN17@alloc_trim:
	cvtss2sd xmm0, DWORD PTR _sum$4[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv457[ebp]
	fld	DWORD PTR tv457[ebp]
	fstp	DWORD PTR tv147[ebp]
$LN18@alloc_trim:
	movss	xmm0, DWORD PTR tv147[ebp]
	movss	DWORD PTR _sum$4[ebp], xmm0
; Line 779
	movss	xmm0, DWORD PTR _sum$4[ebp]
	movss	DWORD PTR _minXC$3[ebp], xmm0
; Line 780
	mov	DWORD PTR _i$[ebp], 8
	jmp	SHORT $LN10@alloc_trim
$LN9@alloc_trim:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@alloc_trim:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _intensity$[ebp]
	jge	$LN8@alloc_trim
; Line 784
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+eax*2+2]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [ecx+eax*2]
	sub	edx, ecx
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	push	edx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	add	edx, DWORD PTR _N0$[ebp]
	mov	eax, DWORD PTR _X$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _X$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_celt_inner_prod_c
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _partial$1[ebp]
; Line 785
	cvtss2sd xmm0, DWORD PTR _partial$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv486[ebp]
	fld	DWORD PTR tv486[ebp]
	fstp	DWORD PTR tv489[ebp]
	movss	xmm0, DWORD PTR tv489[ebp]
	comiss	xmm0, DWORD PTR _minXC$3[ebp]
	jbe	SHORT $LN19@alloc_trim
	movss	xmm0, DWORD PTR _minXC$3[ebp]
	movss	DWORD PTR tv194[ebp], xmm0
	jmp	SHORT $LN20@alloc_trim
$LN19@alloc_trim:
	cvtss2sd xmm0, DWORD PTR _partial$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv495[ebp]
	fld	DWORD PTR tv495[ebp]
	fstp	DWORD PTR tv194[ebp]
$LN20@alloc_trim:
	movss	xmm0, DWORD PTR tv194[ebp]
	movss	DWORD PTR _minXC$3[ebp], xmm0
; Line 786
	jmp	$LN9@alloc_trim
$LN8@alloc_trim:
; Line 787
	cvtss2sd xmm0, DWORD PTR _minXC$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv502[ebp]
	fld	DWORD PTR tv502[ebp]
	fstp	DWORD PTR tv505[ebp]
	movss	xmm0, DWORD PTR tv505[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN21@alloc_trim
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv208[ebp], xmm0
	jmp	SHORT $LN22@alloc_trim
$LN21@alloc_trim:
	cvtss2sd xmm0, DWORD PTR _minXC$3[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv511[ebp]
	fld	DWORD PTR tv511[ebp]
	fstp	DWORD PTR tv208[ebp]
$LN22@alloc_trim:
	movss	xmm0, DWORD PTR tv208[ebp]
	movss	DWORD PTR _minXC$3[ebp], xmm0
; Line 790
	movss	xmm0, DWORD PTR _sum$4[ebp]
	mulss	xmm0, DWORD PTR _sum$4[ebp]
	movss	xmm1, DWORD PTR __real@3f8020c5
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv520[ebp]
	movsd	xmm0, QWORD PTR tv520[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff71547652b82fe
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _logXC$[ebp], xmm0
; Line 792
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _logXC$[ebp]
	movss	xmm1, DWORD PTR _minXC$3[ebp]
	mulss	xmm1, DWORD PTR _minXC$3[ebp]
	movss	xmm2, DWORD PTR __real@3f8020c5
	subss	xmm2, xmm1
	cvtss2sd xmm1, xmm2
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movss	DWORD PTR tv612[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv529[ebp]
	movsd	xmm0, QWORD PTR tv529[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff71547652b82fe
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR tv612[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN23@alloc_trim
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _logXC$[ebp]
	movss	DWORD PTR tv248[ebp], xmm0
	jmp	SHORT $LN24@alloc_trim
$LN23@alloc_trim:
	movss	xmm0, DWORD PTR _minXC$3[ebp]
	mulss	xmm0, DWORD PTR _minXC$3[ebp]
	movss	xmm1, DWORD PTR __real@3f8020c5
	subss	xmm1, xmm0
	cvtss2sd xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv538[ebp]
	movsd	xmm0, QWORD PTR tv538[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff71547652b82fe
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv248[ebp], xmm0
$LN24@alloc_trim:
	movss	xmm0, DWORD PTR tv248[ebp]
	movss	DWORD PTR _logXC2$[ebp], xmm0
; Line 799
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR _logXC$[ebp]
	movss	xmm1, DWORD PTR __real@c0800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN25@alloc_trim
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR tv256[ebp], xmm0
	jmp	SHORT $LN26@alloc_trim
$LN25@alloc_trim:
	movss	xmm0, DWORD PTR __real@3f400000
	mulss	xmm0, DWORD PTR _logXC$[ebp]
	movss	DWORD PTR tv256[ebp], xmm0
$LN26@alloc_trim:
	movss	xmm0, DWORD PTR _trim$[ebp]
	addss	xmm0, DWORD PTR tv256[ebp]
	movss	DWORD PTR _trim$[ebp], xmm0
; Line 800
	mov	edx, DWORD PTR _stereo_saving$[ebp]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR _logXC2$[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN27@alloc_trim
	mov	eax, DWORD PTR _stereo_saving$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR tv271[ebp], xmm0
	jmp	SHORT $LN28@alloc_trim
$LN27@alloc_trim:
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _logXC2$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv271[ebp], xmm0
$LN28@alloc_trim:
	mov	ecx, DWORD PTR _stereo_saving$[ebp]
	movss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR [ecx], xmm0
$LN14@alloc_trim:
; Line 804
	mov	DWORD PTR _c$[ebp], 0
$LN7@alloc_trim:
; Line 805
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@alloc_trim
$LN3@alloc_trim:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@alloc_trim:
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@alloc_trim
; Line 807
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+eax+2]
	sub	ecx, DWORD PTR _end$[ebp]
	cvtsi2ss xmm0, ecx
	mov	eax, DWORD PTR _bandLogE$[ebp]
	mulss	xmm0, DWORD PTR [eax+edx*4]
	addss	xmm0, DWORD PTR _diff$[ebp]
	movss	DWORD PTR _diff$[ebp], xmm0
; Line 808
	jmp	SHORT $LN3@alloc_trim
$LN2@alloc_trim:
; Line 809
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _C$[ebp]
	jl	SHORT $LN7@alloc_trim
; Line 810
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _C$[ebp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _diff$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _diff$[ebp], xmm1
; Line 812
	movss	xmm0, DWORD PTR _diff$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40c00000
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN29@alloc_trim
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv301[ebp], xmm0
	jmp	SHORT $LN30@alloc_trim
$LN29@alloc_trim:
	movss	xmm0, DWORD PTR _diff$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR tv301[ebp], xmm0
$LN30@alloc_trim:
	movss	xmm0, DWORD PTR __real@c0000000
	comiss	xmm0, DWORD PTR tv301[ebp]
	jbe	SHORT $LN33@alloc_trim
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv313[ebp], xmm0
	jmp	SHORT $LN34@alloc_trim
$LN33@alloc_trim:
	movss	xmm0, DWORD PTR _diff$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40c00000
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN31@alloc_trim
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv312[ebp], xmm0
	jmp	SHORT $LN32@alloc_trim
$LN31@alloc_trim:
	movss	xmm0, DWORD PTR _diff$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR tv312[ebp], xmm0
$LN32@alloc_trim:
	movss	xmm0, DWORD PTR tv312[ebp]
	movss	DWORD PTR tv313[ebp], xmm0
$LN34@alloc_trim:
	movss	xmm0, DWORD PTR _trim$[ebp]
	subss	xmm0, DWORD PTR tv313[ebp]
	movss	DWORD PTR _trim$[ebp], xmm0
; Line 813
	movss	xmm0, DWORD PTR _trim$[ebp]
	subss	xmm0, DWORD PTR _surround_trim$[ebp]
	movss	DWORD PTR _trim$[ebp], xmm0
; Line 814
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	xmm1, DWORD PTR _trim$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _trim$[ebp], xmm1
; Line 816
	mov	ecx, DWORD PTR _analysis$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN1@alloc_trim
; Line 819
	mov	edx, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN35@alloc_trim
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv333[ebp], xmm0
	jmp	SHORT $LN36@alloc_trim
$LN35@alloc_trim:
	mov	eax, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv333[ebp], xmm0
$LN36@alloc_trim:
	movss	xmm0, DWORD PTR __real@c0000000
	comiss	xmm0, DWORD PTR tv333[ebp]
	jbe	SHORT $LN39@alloc_trim
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv349[ebp], xmm0
	jmp	SHORT $LN40@alloc_trim
$LN39@alloc_trim:
	mov	ecx, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@40000000
	comiss	xmm0, DWORD PTR __real@40000000
	jbe	SHORT $LN37@alloc_trim
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv348[ebp], xmm0
	jmp	SHORT $LN38@alloc_trim
$LN37@alloc_trim:
	mov	edx, DWORD PTR _analysis$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	addss	xmm0, DWORD PTR __real@3d4ccccd
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv348[ebp], xmm0
$LN38@alloc_trim:
	movss	xmm0, DWORD PTR tv348[ebp]
	movss	DWORD PTR tv349[ebp], xmm0
$LN40@alloc_trim:
	movss	xmm0, DWORD PTR _trim$[ebp]
	subss	xmm0, DWORD PTR tv349[ebp]
	movss	DWORD PTR _trim$[ebp], xmm0
$LN1@alloc_trim:
; Line 828
	movss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR _trim$[ebp]
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	call	__ftol2_sse
	mov	DWORD PTR _trim_index$[ebp], eax
; Line 830
	cmp	DWORD PTR _trim_index$[ebp], 10		; 0000000aH
	jle	SHORT $LN41@alloc_trim
	mov	DWORD PTR tv357[ebp], 10		; 0000000aH
	jmp	SHORT $LN42@alloc_trim
$LN41@alloc_trim:
	mov	eax, DWORD PTR _trim_index$[ebp]
	mov	DWORD PTR tv357[ebp], eax
$LN42@alloc_trim:
	cmp	DWORD PTR tv357[ebp], 0
	jge	SHORT $LN45@alloc_trim
	mov	DWORD PTR tv361[ebp], 0
	jmp	SHORT $LN46@alloc_trim
$LN45@alloc_trim:
	cmp	DWORD PTR _trim_index$[ebp], 10		; 0000000aH
	jle	SHORT $LN43@alloc_trim
	mov	DWORD PTR tv360[ebp], 10		; 0000000aH
	jmp	SHORT $LN44@alloc_trim
$LN43@alloc_trim:
	mov	ecx, DWORD PTR _trim_index$[ebp]
	mov	DWORD PTR tv360[ebp], ecx
$LN44@alloc_trim:
	mov	edx, DWORD PTR tv360[ebp]
	mov	DWORD PTR tv361[ebp], edx
$LN46@alloc_trim:
	mov	eax, DWORD PTR tv361[ebp]
	mov	DWORD PTR _trim_index$[ebp], eax
; Line 835
	mov	eax, DWORD PTR _trim_index$[ebp]
; Line 836
	pop	edi
	add	esp, 168				; 000000a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_alloc_trim_analysis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _tf_encode
_TEXT	SEGMENT
tv94 = -40						; size = 4
tv74 = -36						; size = 4
tv69 = -32						; size = 4
_tell$ = -28						; size = 4
_budget$ = -24						; size = 4
_logp$ = -20						; size = 4
_tf_changed$ = -16					; size = 4
_tf_select_rsv$ = -12					; size = 4
_i$ = -8						; size = 4
_curr$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_isTransient$ = 16					; size = 4
_tf_res$ = 20						; size = 4
_LM$ = 24						; size = 4
_tf_select$ = 28					; size = 4
_enc$ = 32						; size = 4
_tf_encode PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 714
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 721
	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 3
	mov	DWORD PTR _budget$[ebp], ecx
; Line 722
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_tell
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
; Line 723
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN13@tf_encode
	mov	DWORD PTR tv69[ebp], 2
	jmp	SHORT $LN14@tf_encode
$LN13@tf_encode:
	mov	DWORD PTR tv69[ebp], 4
$LN14@tf_encode:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _logp$[ebp], eax
; Line 725
	cmp	DWORD PTR _LM$[ebp], 0
	jle	SHORT $LN15@tf_encode
	mov	ecx, DWORD PTR _logp$[ebp]
	mov	edx, DWORD PTR _tell$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1]
	cmp	eax, DWORD PTR _budget$[ebp]
	ja	SHORT $LN15@tf_encode
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN16@tf_encode
$LN15@tf_encode:
	mov	DWORD PTR tv74[ebp], 0
$LN16@tf_encode:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _tf_select_rsv$[ebp], ecx
; Line 726
	mov	edx, DWORD PTR _budget$[ebp]
	sub	edx, DWORD PTR _tf_select_rsv$[ebp]
	mov	DWORD PTR _budget$[ebp], edx
; Line 727
	mov	DWORD PTR _tf_changed$[ebp], 0
	mov	eax, DWORD PTR _tf_changed$[ebp]
	mov	DWORD PTR _curr$[ebp], eax
; Line 728
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN10@tf_encode
$LN9@tf_encode:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@tf_encode:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jge	SHORT $LN8@tf_encode
; Line 730
	mov	ecx, DWORD PTR _tell$[ebp]
	add	ecx, DWORD PTR _logp$[ebp]
	cmp	ecx, DWORD PTR _budget$[ebp]
	ja	SHORT $LN7@tf_encode
; Line 732
	mov	edx, DWORD PTR _logp$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tf_res$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	xor	edx, DWORD PTR _curr$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
; Line 733
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_tell
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
; Line 734
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tf_res$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _curr$[ebp], ecx
; Line 735
	mov	edx, DWORD PTR _tf_changed$[ebp]
	or	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR _tf_changed$[ebp], edx
; Line 737
	jmp	SHORT $LN6@tf_encode
$LN7@tf_encode:
; Line 738
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tf_res$[ebp]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN6@tf_encode:
; Line 739
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN17@tf_encode
	mov	DWORD PTR tv94[ebp], 4
	jmp	SHORT $LN18@tf_encode
$LN17@tf_encode:
	mov	DWORD PTR tv94[ebp], 5
$LN18@tf_encode:
	mov	eax, DWORD PTR tv94[ebp]
	mov	DWORD PTR _logp$[ebp], eax
; Line 740
	jmp	$LN9@tf_encode
$LN8@tf_encode:
; Line 744
	cmp	DWORD PTR _tf_select_rsv$[ebp], 0
	je	SHORT $LN5@tf_encode
	mov	ecx, DWORD PTR _isTransient$[ebp]
	mov	edx, DWORD PTR _tf_changed$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _LM$[ebp]
	movsx	edx, BYTE PTR _tf_select_table[eax+ecx*8]
	mov	eax, DWORD PTR _isTransient$[ebp]
	mov	ecx, DWORD PTR _tf_changed$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4+2]
	mov	ecx, DWORD PTR _LM$[ebp]
	movsx	eax, BYTE PTR _tf_select_table[eax+ecx*8]
	cmp	edx, eax
	je	SHORT $LN5@tf_encode
; Line 745
	push	1
	mov	ecx, DWORD PTR _tf_select$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
; Line 746
	jmp	SHORT $LN4@tf_encode
$LN5@tf_encode:
; Line 747
	mov	DWORD PTR _tf_select$[ebp], 0
$LN4@tf_encode:
; Line 748
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@tf_encode
$LN2@tf_encode:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@tf_encode:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN11@tf_encode
; Line 749
	mov	eax, DWORD PTR _tf_select$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _isTransient$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tf_res$[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _LM$[ebp]
	movsx	ecx, BYTE PTR _tf_select_table[edx+eax*8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tf_res$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN2@tf_encode
$LN11@tf_encode:
; Line 751
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tf_encode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _tf_analysis
_TEXT	SEGMENT
tv415 = -212						; size = 4
tv364 = -208						; size = 4
tv354 = -204						; size = 4
tv320 = -200						; size = 4
tv284 = -196						; size = 4
tv278 = -192						; size = 4
tv256 = -188						; size = 4
tv229 = -184						; size = 4
tv200 = -180						; size = 4
tv170 = -176						; size = 4
tv145 = -172						; size = 4
tv453 = -168						; size = 4
tv141 = -164						; size = 4
tv448 = -160						; size = 4
tv137 = -156						; size = 4
tv443 = -152						; size = 4
tv90 = -148						; size = 4
tv438 = -144						; size = 4
tv75 = -140						; size = 4
tv433 = -136						; size = 4
tv69 = -132						; size = 4
__$AllocaPad$$ = -124					; size = 4
_from1$1 = -116						; size = 4
_from0$2 = -112						; size = 4
_curr1$3 = -108						; size = 4
_curr0$4 = -104						; size = 4
_curr1$5 = -100						; size = 4
_curr0$6 = -96						; size = 4
_B$7 = -92						; size = 4
_best_level$8 = -88					; size = 4
_best_L1$9 = -84					; size = 4
_L1$10 = -80						; size = 4
_narrow$11 = -76					; size = 4
_N$12 = -72						; size = 4
_k$13 = -68						; size = 4
_bias$ = -64						; size = 4
_tf_select$ = -60					; size = 4
_selcost$ = -52						; size = 8
_sel$ = -40						; size = 4
_tmp_1$ = -36						; size = 4
_tmp$ = -32						; size = 4
_path1$ = -28						; size = 4
_path0$ = -24						; size = 4
_cost1$ = -20						; size = 4
_cost0$ = -16						; size = 4
_metric$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_m$ = 8							; size = 4
_len$ = 12						; size = 4
_isTransient$ = 16					; size = 4
_tf_res$ = 20						; size = 4
_lambda$ = 24						; size = 4
_X$ = 28						; size = 4
_N0$ = 32						; size = 4
_LM$ = 36						; size = 4
_tf_sum$ = 40						; size = 4
_tf_estimate$ = 44					; size = 4
_tf_chan$ = 48						; size = 4
_tf_analysis PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 553
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR __$AllocaPad$$[ebp], 0
; Line 564
	mov	DWORD PTR _tf_select$[ebp], 0
; Line 568
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	xmm1, DWORD PTR __real@be800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN37@tf_analysi
	movss	xmm0, DWORD PTR __real@be800000
	movss	DWORD PTR tv69[ebp], xmm0
	jmp	SHORT $LN38@tf_analysi
$LN37@tf_analysi:
	movss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	DWORD PTR tv69[ebp], xmm0
$LN38@tf_analysi:
	movss	xmm0, DWORD PTR __real@3d23d70a
	mulss	xmm0, DWORD PTR tv69[ebp]
	movss	DWORD PTR _bias$[ebp], xmm0
; Line 571
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv433[ebp], eax
	mov	eax, DWORD PTR tv433[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv75[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv433[ebp]
	mov	ecx, DWORD PTR tv75[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv75[ebp], 32			; 00000020H
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _metric$[ebp], edx
; Line 572
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _len$[ebp]
	movsx	eax, WORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _len$[ebp]
	movsx	edx, WORD PTR [edx+ecx*2-2]
	sub	eax, edx
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	eax, cl
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv438[ebp], eax
	mov	eax, DWORD PTR tv438[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv90[ebp], esp
	lea	eax, DWORD PTR __$AllocaPad$$[ebp]
	push	eax
	mov	edx, DWORD PTR tv438[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv90[ebp], 32			; 00000020H
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 573
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _len$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _len$[ebp]
	movsx	ecx, WORD PTR [ecx+eax*2-2]
	sub	edx, ecx
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	shl	edx, 2
	add	edx, 36					; 00000024H
	mov	DWORD PTR tv443[ebp], edx
	mov	eax, DWORD PTR tv443[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv137[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv443[ebp]
	mov	ecx, DWORD PTR tv137[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv137[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR _tmp_1$[ebp], eax
; Line 574
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv448[ebp], ecx
	mov	eax, DWORD PTR tv448[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv141[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv448[ebp]
	mov	ecx, DWORD PTR tv141[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv141[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR _path0$[ebp], eax
; Line 575
	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv453[ebp], ecx
	mov	eax, DWORD PTR tv453[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv145[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv453[ebp]
	mov	ecx, DWORD PTR tv145[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv145[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv145[ebp]
	mov	DWORD PTR _path1$[ebp], eax
; Line 577
	mov	ecx, DWORD PTR _tf_sum$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 578
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN34@tf_analysi
$LN33@tf_analysi:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN34@tf_analysi:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	$LN32@tf_analysi
; Line 583
	mov	DWORD PTR _best_level$8[ebp], 0
; Line 584
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+eax*2+2]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [ecx+eax*2]
	sub	edx, ecx
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _N$12[ebp], edx
; Line 586
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [eax+ecx*2+2]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, WORD PTR [ecx+eax*2]
	sub	edx, ecx
	cmp	edx, 1
	jne	SHORT $LN39@tf_analysi
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN40@tf_analysi
$LN39@tf_analysi:
	mov	DWORD PTR tv170[ebp], 0
$LN40@tf_analysi:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR _narrow$11[ebp], edx
; Line 587
	mov	eax, DWORD PTR _tf_chan$[ebp]
	imul	eax, DWORD PTR _N0$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR _i$[ebp]
	movsx	edx, WORD PTR [edx+ecx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	add	eax, edx
	mov	ecx, DWORD PTR _X$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _tmp$[ebp]
	sub	eax, edx
	sar	eax, 2
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _N$12[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	edx, DWORD PTR _tf_chan$[ebp]
	imul	edx, DWORD PTR _N0$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR _i$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	eax, cl
	add	edx, eax
	mov	ecx, DWORD PTR _X$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edx
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 592
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN41@tf_analysi
	mov	ecx, DWORD PTR _LM$[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	jmp	SHORT $LN42@tf_analysi
$LN41@tf_analysi:
	mov	DWORD PTR tv200[ebp], 0
$LN42@tf_analysi:
	push	ecx
	movss	xmm0, DWORD PTR _bias$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv200[ebp]
	push	edx
	mov	eax, DWORD PTR _N$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	call	_l1_metric
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _L1$10[ebp]
; Line 593
	movss	xmm0, DWORD PTR _L1$10[ebp]
	movss	DWORD PTR _best_L1$9[ebp], xmm0
; Line 595
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	$LN30@tf_analysi
	cmp	DWORD PTR _narrow$11[ebp], 0
	jne	$LN30@tf_analysi
; Line 597
	mov	edx, DWORD PTR _tmp_1$[ebp]
	sub	edx, DWORD PTR _tmp$[ebp]
	sar	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _N$12[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp_1$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 598
	mov	edx, 1
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	push	edx
	mov	eax, DWORD PTR _N$12[ebp]
	mov	ecx, DWORD PTR _LM$[ebp]
	sar	eax, cl
	push	eax
	mov	ecx, DWORD PTR _tmp_1$[ebp]
	push	ecx
	call	_haar1
; Line 599
	add	esp, 8
	movss	xmm0, DWORD PTR _bias$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _LM$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _N$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp_1$[ebp]
	push	ecx
	call	_l1_metric
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _L1$10[ebp]
; Line 600
	movss	xmm0, DWORD PTR _best_L1$9[ebp]
	comiss	xmm0, DWORD PTR _L1$10[ebp]
	jbe	SHORT $LN30@tf_analysi
; Line 602
	movss	xmm0, DWORD PTR _L1$10[ebp]
	movss	DWORD PTR _best_L1$9[ebp], xmm0
; Line 603
	mov	DWORD PTR _best_level$8[ebp], -1
$LN30@tf_analysi:
; Line 607
	mov	DWORD PTR _k$13[ebp], 0
	jmp	SHORT $LN29@tf_analysi
$LN28@tf_analysi:
	mov	edx, DWORD PTR _k$13[ebp]
	add	edx, 1
	mov	DWORD PTR _k$13[ebp], edx
$LN29@tf_analysi:
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	SHORT $LN43@tf_analysi
	cmp	DWORD PTR _narrow$11[ebp], 0
	jne	SHORT $LN43@tf_analysi
	mov	DWORD PTR tv229[ebp], 1
	jmp	SHORT $LN44@tf_analysi
$LN43@tf_analysi:
	mov	DWORD PTR tv229[ebp], 0
$LN44@tf_analysi:
	mov	eax, DWORD PTR _LM$[ebp]
	add	eax, DWORD PTR tv229[ebp]
	cmp	DWORD PTR _k$13[ebp], eax
	jge	$LN27@tf_analysi
; Line 611
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN26@tf_analysi
; Line 612
	mov	ecx, DWORD PTR _LM$[ebp]
	sub	ecx, DWORD PTR _k$13[ebp]
	sub	ecx, 1
	mov	DWORD PTR _B$7[ebp], ecx
; Line 613
	jmp	SHORT $LN25@tf_analysi
$LN26@tf_analysi:
; Line 614
	mov	edx, DWORD PTR _k$13[ebp]
	add	edx, 1
	mov	DWORD PTR _B$7[ebp], edx
$LN25@tf_analysi:
; Line 616
	mov	eax, 1
	mov	ecx, DWORD PTR _k$13[ebp]
	shl	eax, cl
	push	eax
	mov	edx, DWORD PTR _N$12[ebp]
	mov	ecx, DWORD PTR _k$13[ebp]
	sar	edx, cl
	push	edx
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_haar1
; Line 618
	add	esp, 8
	movss	xmm0, DWORD PTR _bias$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _B$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _N$12[ebp]
	push	edx
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	_l1_metric
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _L1$10[ebp]
; Line 620
	movss	xmm0, DWORD PTR _best_L1$9[ebp]
	comiss	xmm0, DWORD PTR _L1$10[ebp]
	jbe	SHORT $LN24@tf_analysi
; Line 622
	movss	xmm0, DWORD PTR _L1$10[ebp]
	movss	DWORD PTR _best_L1$9[ebp], xmm0
; Line 623
	mov	ecx, DWORD PTR _k$13[ebp]
	add	ecx, 1
	mov	DWORD PTR _best_level$8[ebp], ecx
$LN24@tf_analysi:
; Line 625
	jmp	$LN28@tf_analysi
$LN27@tf_analysi:
; Line 628
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN23@tf_analysi
; Line 629
	mov	edx, DWORD PTR _best_level$8[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 630
	jmp	SHORT $LN22@tf_analysi
$LN23@tf_analysi:
; Line 631
	imul	edx, DWORD PTR _best_level$8[ebp], -2
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN22@tf_analysi:
; Line 632
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN45@tf_analysi
	mov	edx, DWORD PTR _LM$[ebp]
	mov	DWORD PTR tv256[ebp], edx
	jmp	SHORT $LN46@tf_analysi
$LN45@tf_analysi:
	mov	DWORD PTR tv256[ebp], 0
$LN46@tf_analysi:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	edx, DWORD PTR tv256[ebp]
	sub	edx, eax
	mov	eax, DWORD PTR _tf_sum$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _tf_sum$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 635
	cmp	DWORD PTR _narrow$11[ebp], 0
	je	SHORT $LN21@tf_analysi
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _metric$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN20@tf_analysi
	imul	ecx, DWORD PTR _LM$[ebp], -2
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _metric$[ebp]
	cmp	DWORD PTR [eax+edx*4], ecx
	jne	SHORT $LN21@tf_analysi
$LN20@tf_analysi:
; Line 636
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _metric$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	sub	eax, 1
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _metric$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN21@tf_analysi:
; Line 638
	jmp	$LN33@tf_analysi
$LN32@tf_analysi:
; Line 641
	mov	DWORD PTR _tf_select$[ebp], 0
; Line 642
	mov	DWORD PTR _sel$[ebp], 0
	jmp	SHORT $LN19@tf_analysi
$LN18@tf_analysi:
	mov	eax, DWORD PTR _sel$[ebp]
	add	eax, 1
	mov	DWORD PTR _sel$[ebp], eax
$LN19@tf_analysi:
	cmp	DWORD PTR _sel$[ebp], 2
	jge	$LN17@tf_analysi
; Line 644
	mov	DWORD PTR _cost0$[ebp], 0
; Line 645
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN47@tf_analysi
	mov	DWORD PTR tv278[ebp], 0
	jmp	SHORT $LN48@tf_analysi
$LN47@tf_analysi:
	mov	ecx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR tv278[ebp], ecx
$LN48@tf_analysi:
	mov	edx, DWORD PTR tv278[ebp]
	mov	DWORD PTR _cost1$[ebp], edx
; Line 646
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN16@tf_analysi
$LN15@tf_analysi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@tf_analysi:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	$LN14@tf_analysi
; Line 649
	mov	edx, DWORD PTR _cost1$[ebp]
	add	edx, DWORD PTR _lambda$[ebp]
	cmp	DWORD PTR _cost0$[ebp], edx
	jge	SHORT $LN49@tf_analysi
	mov	eax, DWORD PTR _cost0$[ebp]
	mov	DWORD PTR tv284[ebp], eax
	jmp	SHORT $LN50@tf_analysi
$LN49@tf_analysi:
	mov	ecx, DWORD PTR _cost1$[ebp]
	add	ecx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR tv284[ebp], ecx
$LN50@tf_analysi:
	mov	edx, DWORD PTR tv284[ebp]
	mov	DWORD PTR _curr0$6[ebp], edx
; Line 650
	mov	eax, DWORD PTR _cost0$[ebp]
	add	eax, DWORD PTR _lambda$[ebp]
	cmp	eax, DWORD PTR _cost1$[ebp]
	jge	SHORT $LN51@tf_analysi
	mov	ecx, DWORD PTR _cost0$[ebp]
	add	ecx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR tv320[ebp], ecx
	jmp	SHORT $LN52@tf_analysi
$LN51@tf_analysi:
	mov	edx, DWORD PTR _cost1$[ebp]
	mov	DWORD PTR tv320[ebp], edx
$LN52@tf_analysi:
	mov	eax, DWORD PTR tv320[ebp]
	mov	DWORD PTR _curr1$5[ebp], eax
; Line 651
	mov	ecx, DWORD PTR _isTransient$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _sel$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	ecx, DWORD PTR _LM$[ebp]
	movsx	edx, BYTE PTR _tf_select_table[eax+ecx*8]
	shl	edx, 1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _curr0$6[ebp]
	mov	DWORD PTR _cost0$[ebp], eax
; Line 652
	mov	ecx, DWORD PTR _isTransient$[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _sel$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2+1]
	mov	ecx, DWORD PTR _LM$[ebp]
	movsx	edx, BYTE PTR _tf_select_table[eax+ecx*8]
	shl	edx, 1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _metric$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, edx
	push	eax
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _curr1$5[ebp]
	mov	DWORD PTR _cost1$[ebp], eax
; Line 653
	jmp	$LN15@tf_analysi
$LN14@tf_analysi:
; Line 654
	mov	ecx, DWORD PTR _cost0$[ebp]
	cmp	ecx, DWORD PTR _cost1$[ebp]
	jge	SHORT $LN53@tf_analysi
	mov	edx, DWORD PTR _cost0$[ebp]
	mov	DWORD PTR tv354[ebp], edx
	jmp	SHORT $LN54@tf_analysi
$LN53@tf_analysi:
	mov	eax, DWORD PTR _cost1$[ebp]
	mov	DWORD PTR tv354[ebp], eax
$LN54@tf_analysi:
	mov	ecx, DWORD PTR tv354[ebp]
	mov	DWORD PTR _cost0$[ebp], ecx
; Line 655
	mov	edx, DWORD PTR _sel$[ebp]
	mov	eax, DWORD PTR _cost0$[ebp]
	mov	DWORD PTR _selcost$[ebp+edx*4], eax
; Line 656
	jmp	$LN18@tf_analysi
$LN17@tf_analysi:
; Line 659
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _selcost$[ebp+ecx]
	cmp	ecx, DWORD PTR _selcost$[ebp+eax]
	jge	SHORT $LN13@tf_analysi
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN13@tf_analysi
; Line 660
	mov	DWORD PTR _tf_select$[ebp], 1
$LN13@tf_analysi:
; Line 661
	mov	DWORD PTR _cost0$[ebp], 0
; Line 662
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN55@tf_analysi
	mov	DWORD PTR tv364[ebp], 0
	jmp	SHORT $LN56@tf_analysi
$LN55@tf_analysi:
	mov	edx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR tv364[ebp], edx
$LN56@tf_analysi:
	mov	eax, DWORD PTR tv364[ebp]
	mov	DWORD PTR _cost1$[ebp], eax
; Line 664
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN12@tf_analysi
$LN11@tf_analysi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@tf_analysi:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jge	$LN10@tf_analysi
; Line 669
	mov	eax, DWORD PTR _cost0$[ebp]
	mov	DWORD PTR _from0$2[ebp], eax
; Line 670
	mov	ecx, DWORD PTR _cost1$[ebp]
	add	ecx, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR _from1$1[ebp], ecx
; Line 671
	mov	edx, DWORD PTR _from0$2[ebp]
	cmp	edx, DWORD PTR _from1$1[ebp]
	jge	SHORT $LN9@tf_analysi
; Line 673
	mov	eax, DWORD PTR _from0$2[ebp]
	mov	DWORD PTR _curr0$4[ebp], eax
; Line 674
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _path0$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
; Line 675
	jmp	SHORT $LN8@tf_analysi
$LN9@tf_analysi:
; Line 676
	mov	eax, DWORD PTR _from1$1[ebp]
	mov	DWORD PTR _curr0$4[ebp], eax
; Line 677
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _path0$[ebp]
	mov	DWORD PTR [edx+ecx*4], 1
$LN8@tf_analysi:
; Line 680
	mov	eax, DWORD PTR _cost0$[ebp]
	add	eax, DWORD PTR _lambda$[ebp]
	mov	DWORD PTR _from0$2[ebp], eax
; Line 681
	mov	ecx, DWORD PTR _cost1$[ebp]
	mov	DWORD PTR _from1$1[ebp], ecx
; Line 682
	mov	edx, DWORD PTR _from0$2[ebp]
	cmp	edx, DWORD PTR _from1$1[ebp]
	jge	SHORT $LN7@tf_analysi
; Line 684
	mov	eax, DWORD PTR _from0$2[ebp]
	mov	DWORD PTR _curr1$3[ebp], eax
; Line 685
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _path1$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
; Line 686
	jmp	SHORT $LN6@tf_analysi
$LN7@tf_analysi:
; Line 687
	mov	eax, DWORD PTR _from1$1[ebp]
	mov	DWORD PTR _curr1$3[ebp], eax
; Line 688
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _path1$[ebp]
	mov	DWORD PTR [edx+ecx*4], 1
$LN6@tf_analysi:
; Line 690
	mov	eax, DWORD PTR _isTransient$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _tf_select$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _LM$[ebp]
	movsx	ecx, BYTE PTR _tf_select_table[edx+eax*8]
	shl	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _metric$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _curr0$4[ebp]
	mov	DWORD PTR _cost0$[ebp], eax
; Line 691
	mov	eax, DWORD PTR _isTransient$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _tf_select$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2+1]
	mov	eax, DWORD PTR _LM$[ebp]
	movsx	ecx, BYTE PTR _tf_select_table[edx+eax*8]
	shl	ecx, 1
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _metric$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	sub	edx, ecx
	push	edx
	call	_abs
	add	esp, 4
	add	eax, DWORD PTR _curr1$3[ebp]
	mov	DWORD PTR _cost1$[ebp], eax
; Line 692
	jmp	$LN11@tf_analysi
$LN10@tf_analysi:
; Line 693
	mov	eax, DWORD PTR _cost0$[ebp]
	cmp	eax, DWORD PTR _cost1$[ebp]
	jge	SHORT $LN57@tf_analysi
	mov	DWORD PTR tv415[ebp], 0
	jmp	SHORT $LN58@tf_analysi
$LN57@tf_analysi:
	mov	DWORD PTR tv415[ebp], 1
$LN58@tf_analysi:
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _tf_res$[ebp]
	mov	eax, DWORD PTR tv415[ebp]
	mov	DWORD PTR [edx+ecx*4-4], eax
; Line 695
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN5@tf_analysi
$LN4@tf_analysi:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@tf_analysi:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@tf_analysi
; Line 697
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tf_res$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 1
	jne	SHORT $LN2@tf_analysi
; Line 698
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tf_res$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _path1$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 699
	jmp	SHORT $LN1@tf_analysi
$LN2@tf_analysi:
; Line 700
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tf_res$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _path0$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+4]
	mov	DWORD PTR [eax+edx*4], ecx
$LN1@tf_analysi:
; Line 701
	jmp	SHORT $LN4@tf_analysi
$LN3@tf_analysi:
; Line 710
	mov	eax, DWORD PTR _tf_select$[ebp]
; Line 711
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN62@tf_analysi
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-220]
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@tf_analysi:
	DD	2
	DD	$LN61@tf_analysi
$LN61@tf_analysi:
	DD	-52					; ffffffccH
	DD	8
	DD	$LN59@tf_analysi
	DD	-124					; ffffff84H
	DD	4
	DD	$LN60@tf_analysi
$LN60@tf_analysi:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
$LN59@tf_analysi:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_tf_analysis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _l1_metric
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv90 = -12						; size = 4
_L1$ = -8						; size = 4
_i$ = -4						; size = 4
_tmp$ = 8						; size = 4
_N$ = 12						; size = 4
_LM$ = 16						; size = 4
_bias$ = 20						; size = 4
_l1_metric PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 538
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 541
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _L1$[ebp], xmm0
; Line 542
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@l1_metric
$LN2@l1_metric:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@l1_metric:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _N$[ebp]
	jge	SHORT $LN1@l1_metric
; Line 543
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+edx*4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR tv90[ebp]
	fstp	DWORD PTR tv93[ebp]
	movss	xmm0, DWORD PTR tv93[ebp]
	addss	xmm0, DWORD PTR _L1$[ebp]
	movss	DWORD PTR _L1$[ebp], xmm0
	jmp	SHORT $LN2@l1_metric
$LN1@l1_metric:
; Line 545
	cvtsi2ss xmm0, DWORD PTR _LM$[ebp]
	mulss	xmm0, DWORD PTR _bias$[ebp]
	mulss	xmm0, DWORD PTR _L1$[ebp]
	addss	xmm0, DWORD PTR _L1$[ebp]
	movss	DWORD PTR _L1$[ebp], xmm0
; Line 546
	fld	DWORD PTR _L1$[ebp]
; Line 548
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_l1_metric ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _compute_mdcts
_TEXT	SEGMENT
_bound$1 = -32						; size = 4
_c$ = -28						; size = 4
_b$ = -24						; size = 4
_i$ = -20						; size = 4
_shift$ = -16						; size = 4
_B$ = -12						; size = 4
_N$ = -8						; size = 4
_overlap$ = -4						; size = 4
_mode$ = 8						; size = 4
_shortBlocks$ = 12					; size = 4
_in$ = 16						; size = 4
_out$ = 20						; size = 4
_C$ = 24						; size = 4
_CC$ = 28						; size = 4
_LM$ = 32						; size = 4
_upsample$ = 36						; size = 4
_arch$ = 40						; size = 4
_compute_mdcts PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 420
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _overlap$[ebp], ecx
; Line 425
	cmp	DWORD PTR _shortBlocks$[ebp], 0
	je	SHORT $LN19@compute_md
; Line 427
	mov	edx, DWORD PTR _shortBlocks$[ebp]
	mov	DWORD PTR _B$[ebp], edx
; Line 428
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _N$[ebp], ecx
; Line 429
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _shift$[ebp], eax
; Line 430
	jmp	SHORT $LN18@compute_md
$LN19@compute_md:
; Line 431
	mov	DWORD PTR _B$[ebp], 1
; Line 432
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _N$[ebp], edx
; Line 433
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR _LM$[ebp]
	mov	DWORD PTR _shift$[ebp], ecx
$LN18@compute_md:
; Line 435
	mov	DWORD PTR _c$[ebp], 0
$LN17@compute_md:
; Line 436
	mov	DWORD PTR _b$[ebp], 0
	jmp	SHORT $LN14@compute_md
$LN13@compute_md:
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, 1
	mov	DWORD PTR _b$[ebp], edx
$LN14@compute_md:
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _B$[ebp]
	jge	SHORT $LN12@compute_md
; Line 441
	mov	ecx, DWORD PTR _arch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _B$[ebp]
	push	edx
	mov	eax, DWORD PTR _shift$[ebp]
	push	eax
	mov	ecx, DWORD PTR _overlap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	imul	ecx, DWORD PTR _B$[ebp]
	add	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _B$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _b$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_clt_mdct_forward_c
	add	esp, 32					; 00000020H
; Line 442
	jmp	SHORT $LN13@compute_md
$LN12@compute_md:
; Line 443
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _CC$[ebp]
	jl	$LN17@compute_md
; Line 444
	cmp	DWORD PTR _CC$[ebp], 2
	jne	SHORT $LN8@compute_md
	cmp	DWORD PTR _C$[ebp], 1
	jne	SHORT $LN8@compute_md
; Line 446
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@compute_md
$LN9@compute_md:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@compute_md:
	mov	ecx, DWORD PTR _B$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN8@compute_md
; Line 447
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _out$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _B$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	SHORT $LN9@compute_md
$LN8@compute_md:
; Line 449
	cmp	DWORD PTR _upsample$[ebp], 1
	je	$LN4@compute_md
; Line 451
	mov	DWORD PTR _c$[ebp], 0
$LN6@compute_md:
; Line 453
	mov	eax, DWORD PTR _B$[ebp]
	imul	eax, DWORD PTR _N$[ebp]
	cdq
	idiv	DWORD PTR _upsample$[ebp]
	mov	DWORD PTR _bound$1[ebp], eax
; Line 454
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@compute_md
$LN2@compute_md:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@compute_md:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _bound$1[ebp]
	jge	SHORT $LN1@compute_md
; Line 455
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _B$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	cvtsi2ss xmm0, DWORD PTR _upsample$[ebp]
	mov	edx, DWORD PTR _out$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _B$[ebp]
	imul	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	SHORT $LN2@compute_md
$LN1@compute_md:
; Line 456
	mov	edx, DWORD PTR _B$[ebp]
	imul	edx, DWORD PTR _N$[ebp]
	sub	edx, DWORD PTR _bound$1[ebp]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _B$[ebp]
	imul	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _bound$1[ebp]
	mov	ecx, DWORD PTR _out$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 457
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _C$[ebp]
	jl	$LN6@compute_md
$LN4@compute_md:
; Line 459
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compute_mdcts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _patch_transient_decision
_TEXT	SEGMENT
tv260 = -184						; size = 4
tv253 = -180						; size = 4
tv246 = -176						; size = 4
tv238 = -172						; size = 4
tv230 = -168						; size = 4
tv215 = -164						; size = 4
tv213 = -160						; size = 4
tv189 = -156						; size = 4
tv190 = -152						; size = 4
tv167 = -148						; size = 4
tv141 = -144						; size = 4
tv91 = -140						; size = 4
_x2$1 = -136						; size = 4
_x1$2 = -132						; size = 4
_spread_old$ = -124					; size = 104
_mean_diff$ = -16					; size = 4
_c$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_newE$ = 8						; size = 4
_oldE$ = 12						; size = 4
_nbEBands$ = 16						; size = 4
_start$ = 20						; size = 4
_end$ = 24						; size = 4
_C$ = 28						; size = 4
_patch_transient_decision PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 380
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 382
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mean_diff$[ebp], xmm0
; Line 386
	cmp	DWORD PTR _C$[ebp], 1
	jne	$LN17@patch_tran
; Line 388
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _oldE$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _spread_old$[ebp+eax*4], ecx
; Line 389
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN16@patch_tran
$LN15@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@patch_tran:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	SHORT $LN14@patch_tran
; Line 390
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+edx*4-4]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN20@patch_tran
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+edx*4-4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv91[ebp], xmm0
	jmp	SHORT $LN21@patch_tran
$LN20@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv91[ebp], xmm0
$LN21@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR tv91[ebp]
	movss	DWORD PTR _spread_old$[ebp+edx*4], xmm0
	jmp	SHORT $LN15@patch_tran
$LN14@patch_tran:
; Line 391
	jmp	$LN10@patch_tran
$LN17@patch_tran:
; Line 392
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _start$[ebp]
	add	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _oldE$[ebp]
	comiss	xmm0, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN22@patch_tran
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv141[ebp], xmm0
	jmp	SHORT $LN23@patch_tran
$LN22@patch_tran:
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv141[ebp], xmm0
$LN23@patch_tran:
	mov	edx, DWORD PTR _start$[ebp]
	movss	xmm0, DWORD PTR tv141[ebp]
	movss	DWORD PTR _spread_old$[ebp+edx*4], xmm0
; Line 393
	mov	eax, DWORD PTR _start$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN12@patch_tran
$LN11@patch_tran:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	$LN10@patch_tran
; Line 395
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _oldE$[ebp]
	comiss	xmm0, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN24@patch_tran
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv167[ebp], xmm0
	jmp	SHORT $LN25@patch_tran
$LN24@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv167[ebp], xmm0
$LN25@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+edx*4-4]
	subss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR tv167[ebp]
	jbe	SHORT $LN28@patch_tran
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+eax*4-4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv190[ebp], xmm0
	jmp	SHORT $LN29@patch_tran
$LN28@patch_tran:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _oldE$[ebp]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN26@patch_tran
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv189[ebp], xmm0
	jmp	SHORT $LN27@patch_tran
$LN26@patch_tran:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _nbEBands$[ebp]
	mov	edx, DWORD PTR _oldE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv189[ebp], xmm0
$LN27@patch_tran:
	movss	xmm0, DWORD PTR tv189[ebp]
	movss	DWORD PTR tv190[ebp], xmm0
$LN29@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR tv190[ebp]
	movss	DWORD PTR _spread_old$[ebp+eax*4], xmm0
	jmp	$LN11@patch_tran
$LN10@patch_tran:
; Line 397
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN9@patch_tran
$LN8@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jl	SHORT $LN7@patch_tran
; Line 398
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+ecx*4]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm1, DWORD PTR _spread_old$[ebp+edx*4+4]
	subss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm0, xmm1
	jbe	SHORT $LN30@patch_tran
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+eax*4]
	movss	DWORD PTR tv213[ebp], xmm0
	jmp	SHORT $LN31@patch_tran
$LN30@patch_tran:
	mov	ecx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+ecx*4+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv213[ebp], xmm0
$LN31@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR tv213[ebp]
	movss	DWORD PTR _spread_old$[ebp+edx*4], xmm0
	jmp	SHORT $LN8@patch_tran
$LN7@patch_tran:
; Line 400
	mov	DWORD PTR _c$[ebp], 0
$LN6@patch_tran:
; Line 401
	cmp	DWORD PTR _start$[ebp], 2
	jge	SHORT $LN32@patch_tran
	mov	DWORD PTR tv215[ebp], 2
	jmp	SHORT $LN33@patch_tran
$LN32@patch_tran:
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv215[ebp], eax
$LN33@patch_tran:
	mov	ecx, DWORD PTR tv215[ebp]
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN3@patch_tran
$LN2@patch_tran:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@patch_tran:
	mov	eax, DWORD PTR _end$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN1@patch_tran
; Line 404
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _newE$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR [edx+ecx*4]
	jbe	SHORT $LN34@patch_tran
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv230[ebp], xmm0
	jmp	SHORT $LN35@patch_tran
$LN34@patch_tran:
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _newE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv230[ebp], xmm0
$LN35@patch_tran:
	movss	xmm0, DWORD PTR tv230[ebp]
	movss	DWORD PTR _x1$2[ebp], xmm0
; Line 405
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _spread_old$[ebp+edx*4]
	jbe	SHORT $LN36@patch_tran
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv238[ebp], xmm0
	jmp	SHORT $LN37@patch_tran
$LN36@patch_tran:
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _spread_old$[ebp+eax*4]
	movss	DWORD PTR tv238[ebp], xmm0
$LN37@patch_tran:
	movss	xmm0, DWORD PTR tv238[ebp]
	movss	DWORD PTR _x2$1[ebp], xmm0
; Line 406
	movss	xmm0, DWORD PTR _x1$2[ebp]
	subss	xmm0, DWORD PTR _x2$1[ebp]
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN38@patch_tran
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv246[ebp], xmm0
	jmp	SHORT $LN39@patch_tran
$LN38@patch_tran:
	movss	xmm0, DWORD PTR _x1$2[ebp]
	subss	xmm0, DWORD PTR _x2$1[ebp]
	movss	DWORD PTR tv246[ebp], xmm0
$LN39@patch_tran:
	movss	xmm0, DWORD PTR _mean_diff$[ebp]
	addss	xmm0, DWORD PTR tv246[ebp]
	movss	DWORD PTR _mean_diff$[ebp], xmm0
; Line 407
	jmp	$LN2@patch_tran
$LN1@patch_tran:
; Line 408
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx
	mov	edx, DWORD PTR _c$[ebp]
	cmp	edx, DWORD PTR _C$[ebp]
	jl	$LN6@patch_tran
; Line 409
	cmp	DWORD PTR _start$[ebp], 2
	jge	SHORT $LN40@patch_tran
	mov	DWORD PTR tv253[ebp], 2
	jmp	SHORT $LN41@patch_tran
$LN40@patch_tran:
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv253[ebp], eax
$LN41@patch_tran:
	mov	ecx, DWORD PTR _end$[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR tv253[ebp]
	imul	ecx, DWORD PTR _C$[ebp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR _mean_diff$[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _mean_diff$[ebp], xmm1
; Line 411
	movss	xmm0, DWORD PTR _mean_diff$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN42@patch_tran
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN43@patch_tran
$LN42@patch_tran:
	mov	DWORD PTR tv260[ebp], 0
$LN43@patch_tran:
	mov	eax, DWORD PTR tv260[ebp]
; Line 412
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@patch_tran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@patch_tran:
	DD	1
	DD	$LN45@patch_tran
$LN45@patch_tran:
	DD	-124					; ffffff84H
	DD	104					; 00000068H
	DD	$LN44@patch_tran
$LN44@patch_tran:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	0
_patch_transient_decision ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _transient_analysis
_TEXT	SEGMENT
tv500 = -184						; size = 4
tv278 = -180						; size = 4
tv285 = -176						; size = 8
tv269 = -168						; size = 4
tv483 = -164						; size = 4
tv481 = -160						; size = 4
tv266 = -156						; size = 4
tv474 = -152						; size = 4
tv472 = -148						; size = 4
tv248 = -144						; size = 4
tv234 = -140						; size = 8
tv445 = -132						; size = 8
tv235 = -124						; size = 8
tv211 = -116						; size = 8
tv424 = -108						; size = 8
tv411 = -100						; size = 4
tv173 = -96						; size = 4
tv67 = -92						; size = 4
tv289 = -88						; size = 4
__$AllocaPad$$ = -80					; size = 4
_id$1 = -72						; size = 4
_x2$2 = -68						; size = 4
_y$3 = -64						; size = 4
_x$4 = -60						; size = 4
_maxE$5 = -56						; size = 4
_norm$6 = -52						; size = 4
_unmask$7 = -48						; size = 4
_mean$8 = -44						; size = 4
_len2$ = -40						; size = 4
_tf_max$ = -36						; size = 4
_c$ = -32						; size = 4
_mask_metric$ = -28					; size = 4
_is_transient$ = -24					; size = 4
_mem1$ = -20						; size = 4
_mem0$ = -16						; size = 4
_tmp$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_in$ = 8						; size = 4
_len$ = 12						; size = 4
_C$ = 16						; size = 4
_tf_estimate$ = 20					; size = 4
_tf_chan$ = 24						; size = 4
_transient_analysis PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 184				; 000000b8H
	push	edi
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR __$AllocaPad$$[ebp], 0
; Line 231
	mov	DWORD PTR _is_transient$[ebp], 0
; Line 232
	mov	DWORD PTR _mask_metric$[ebp], 0
; Line 248
	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv289[ebp], eax
	mov	eax, DWORD PTR tv289[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv67[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv289[ebp]
	mov	ecx, DWORD PTR tv67[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv67[ebp], 32			; 00000020H
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 250
	mov	eax, DWORD PTR _len$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _len2$[ebp], eax
; Line 251
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN16@transient_
$LN15@transient_:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN16@transient_:
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _C$[ebp]
	jge	$LN14@transient_
; Line 254
	mov	DWORD PTR _unmask$7[ebp], 0
; Line 257
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 258
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mem1$[ebp], xmm0
; Line 260
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@transient_
$LN12@transient_:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@transient_:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN11@transient_
; Line 263
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _len$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR _x$4[ebp], xmm0
; Line 264
	movss	xmm0, DWORD PTR _mem0$[ebp]
	addss	xmm0, DWORD PTR _x$4[ebp]
	movss	DWORD PTR _y$3[ebp], xmm0
; Line 269
	movss	xmm0, DWORD PTR _mem1$[ebp]
	addss	xmm0, DWORD PTR _y$3[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	mulss	xmm1, DWORD PTR _x$4[ebp]
	subss	xmm0, xmm1
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 270
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _y$3[ebp]
	movss	xmm1, DWORD PTR _x$4[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _mem1$[ebp], xmm1
; Line 272
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	xmm0, DWORD PTR _y$3[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 274
	jmp	$LN12@transient_
$LN11@transient_:
; Line 277
	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 292
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mean$8[ebp], xmm0
; Line 293
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 296
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@transient_
$LN9@transient_:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@transient_:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len2$[ebp]
	jge	$LN8@transient_
; Line 298
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _tmp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _tmp$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax*4+4]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 1
	mov	eax, DWORD PTR _tmp$[ebp]
	mulss	xmm1, DWORD PTR [eax+edx*4+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _x2$2[ebp], xmm0
; Line 299
	movss	xmm0, DWORD PTR _mean$8[ebp]
	addss	xmm0, DWORD PTR _x2$2[ebp]
	movss	DWORD PTR _mean$8[ebp], xmm0
; Line 304
	movss	xmm0, DWORD PTR _x2$2[ebp]
	subss	xmm0, DWORD PTR _mem0$[ebp]
	mulss	xmm0, DWORD PTR __real@3d800000
	addss	xmm0, DWORD PTR _mem0$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 306
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 307
	jmp	$LN9@transient_
$LN8@transient_:
; Line 309
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 310
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxE$5[ebp], xmm0
; Line 312
	mov	edx, DWORD PTR _len2$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN7@transient_
$LN6@transient_:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@transient_:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN5@transient_
; Line 318
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	subss	xmm0, DWORD PTR _mem0$[ebp]
	mulss	xmm0, DWORD PTR __real@3e000000
	addss	xmm0, DWORD PTR _mem0$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 320
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR _mem0$[ebp], xmm0
; Line 321
	movss	xmm0, DWORD PTR _maxE$5[ebp]
	comiss	xmm0, DWORD PTR _mem0$[ebp]
	jbe	SHORT $LN19@transient_
	movss	xmm0, DWORD PTR _maxE$5[ebp]
	movss	DWORD PTR tv173[ebp], xmm0
	jmp	SHORT $LN20@transient_
$LN19@transient_:
	movss	xmm0, DWORD PTR _mem0$[ebp]
	movss	DWORD PTR tv173[ebp], xmm0
$LN20@transient_:
	movss	xmm0, DWORD PTR tv173[ebp]
	movss	DWORD PTR _maxE$5[ebp], xmm0
; Line 322
	jmp	SHORT $LN6@transient_
$LN5@transient_:
; Line 335
	movss	xmm0, DWORD PTR _mean$8[ebp]
	mulss	xmm0, DWORD PTR _maxE$5[ebp]
	cvtss2sd xmm0, xmm0
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsi2sd xmm1, DWORD PTR _len2$[ebp]
	mulsd	xmm0, xmm1
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv411[ebp]
	fld	DWORD PTR tv411[ebp]
	fstp	DWORD PTR _mean$8[ebp]
; Line 338
	cvtsi2ss xmm0, DWORD PTR _len2$[ebp]
	movss	xmm1, DWORD PTR __real@26901d7d
	addss	xmm1, DWORD PTR _mean$8[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _norm$6[ebp], xmm0
; Line 341
	mov	DWORD PTR _unmask$7[ebp], 0
; Line 342
	mov	DWORD PTR _i$[ebp], 12			; 0000000cH
	jmp	SHORT $LN4@transient_
$LN3@transient_:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 4
	mov	DWORD PTR _i$[ebp], ecx
$LN4@transient_:
	mov	edx, DWORD PTR _len2$[ebp]
	sub	edx, 5
	cmp	DWORD PTR _i$[ebp], edx
	jge	$LN2@transient_
; Line 348
	movss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR _norm$6[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax*4]
	addss	xmm1, DWORD PTR __real@26901d7d
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv424[ebp]
	movsd	xmm0, QWORD PTR tv424[ebp]
	comisd	xmm0, QWORD PTR __real@405fc00000000000
	jbe	SHORT $LN21@transient_
	movsd	xmm0, QWORD PTR __real@405fc00000000000
	movsd	QWORD PTR tv211[ebp], xmm0
	jmp	SHORT $LN22@transient_
$LN21@transient_:
	movss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR _norm$6[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	movss	xmm1, DWORD PTR [eax+edx*4]
	addss	xmm1, DWORD PTR __real@26901d7d
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv211[ebp]
$LN22@transient_:
	movsd	xmm0, QWORD PTR __real@0000000000000000
	comisd	xmm0, QWORD PTR tv211[ebp]
	jbe	SHORT $LN25@transient_
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR tv235[ebp], xmm0
	jmp	$LN26@transient_
$LN25@transient_:
	movss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR _norm$6[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _tmp$[ebp]
	movss	xmm1, DWORD PTR [edx+ecx*4]
	addss	xmm1, DWORD PTR __real@26901d7d
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv445[ebp]
	movsd	xmm0, QWORD PTR tv445[ebp]
	comisd	xmm0, QWORD PTR __real@405fc00000000000
	jbe	SHORT $LN23@transient_
	movsd	xmm0, QWORD PTR __real@405fc00000000000
	movsd	QWORD PTR tv234[ebp], xmm0
	jmp	SHORT $LN24@transient_
$LN23@transient_:
	movss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR _norm$6[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax*4]
	addss	xmm1, DWORD PTR __real@26901d7d
	mulss	xmm0, xmm1
	cvtss2sd xmm0, xmm0
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_floor
	add	esp, 8
	fstp	QWORD PTR tv234[ebp]
$LN24@transient_:
	movsd	xmm0, QWORD PTR tv234[ebp]
	movsd	QWORD PTR tv235[ebp], xmm0
$LN26@transient_:
	cvttsd2si edx, QWORD PTR tv235[ebp]
	mov	DWORD PTR _id$1[ebp], edx
; Line 350
	mov	eax, DWORD PTR _id$1[ebp]
	movzx	ecx, BYTE PTR ?inv_table@?1??transient_analysis@@9@9[eax]
	add	ecx, DWORD PTR _unmask$7[ebp]
	mov	DWORD PTR _unmask$7[ebp], ecx
; Line 351
	jmp	$LN3@transient_
$LN2@transient_:
; Line 354
	mov	eax, DWORD PTR _unmask$7[ebp]
	shl	eax, 6
	shl	eax, 2
	mov	edx, DWORD PTR _len2$[ebp]
	sub	edx, 17					; 00000011H
	imul	ecx, edx, 6
	cdq
	idiv	ecx
	mov	DWORD PTR _unmask$7[ebp], eax
; Line 355
	mov	edx, DWORD PTR _unmask$7[ebp]
	cmp	edx, DWORD PTR _mask_metric$[ebp]
	jle	SHORT $LN1@transient_
; Line 357
	mov	eax, DWORD PTR _tf_chan$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 358
	mov	edx, DWORD PTR _unmask$7[ebp]
	mov	DWORD PTR _mask_metric$[ebp], edx
$LN1@transient_:
; Line 360
	jmp	$LN15@transient_
$LN14@transient_:
; Line 361
	cmp	DWORD PTR _mask_metric$[ebp], 200	; 000000c8H
	jle	SHORT $LN27@transient_
	mov	DWORD PTR tv248[ebp], 1
	jmp	SHORT $LN28@transient_
$LN27@transient_:
	mov	DWORD PTR tv248[ebp], 0
$LN28@transient_:
	mov	eax, DWORD PTR tv248[ebp]
	mov	DWORD PTR _is_transient$[ebp], eax
; Line 364
	imul	ecx, DWORD PTR _mask_metric$[ebp], 27
	cvtsi2sd xmm0, ecx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv472[ebp]
	fld	DWORD PTR tv472[ebp]
	fstp	DWORD PTR tv474[ebp]
	movss	xmm0, DWORD PTR tv474[ebp]
	subss	xmm0, DWORD PTR __real@42280000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@transient_
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv266[ebp], xmm0
	jmp	SHORT $LN30@transient_
$LN29@transient_:
	imul	edx, DWORD PTR _mask_metric$[ebp], 27
	cvtsi2sd xmm0, edx
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv481[ebp]
	fld	DWORD PTR tv481[ebp]
	fstp	DWORD PTR tv483[ebp]
	movss	xmm0, DWORD PTR tv483[ebp]
	subss	xmm0, DWORD PTR __real@42280000
	movss	DWORD PTR tv266[ebp], xmm0
$LN30@transient_:
	movss	xmm0, DWORD PTR tv266[ebp]
	movss	DWORD PTR _tf_max$[ebp], xmm0
; Line 366
	movss	xmm0, DWORD PTR _tf_max$[ebp]
	comiss	xmm0, DWORD PTR __real@43230000
	jbe	SHORT $LN31@transient_
	movss	xmm0, DWORD PTR __real@43230000
	movss	DWORD PTR tv269[ebp], xmm0
	jmp	SHORT $LN32@transient_
$LN31@transient_:
	movss	xmm0, DWORD PTR _tf_max$[ebp]
	movss	DWORD PTR tv269[ebp], xmm0
$LN32@transient_:
	movss	xmm0, DWORD PTR __real@3be21965
	mulss	xmm0, DWORD PTR tv269[ebp]
	cvtss2sd xmm0, xmm0
	subsd	xmm0, QWORD PTR __real@3fc1cac083126e98
	movsd	xmm1, QWORD PTR __real@0000000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN35@transient_
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR tv285[ebp], xmm0
	jmp	SHORT $LN36@transient_
$LN35@transient_:
	movss	xmm0, DWORD PTR _tf_max$[ebp]
	comiss	xmm0, DWORD PTR __real@43230000
	jbe	SHORT $LN33@transient_
	movss	xmm0, DWORD PTR __real@43230000
	movss	DWORD PTR tv278[ebp], xmm0
	jmp	SHORT $LN34@transient_
$LN33@transient_:
	movss	xmm0, DWORD PTR _tf_max$[ebp]
	movss	DWORD PTR tv278[ebp], xmm0
$LN34@transient_:
	movss	xmm0, DWORD PTR __real@3be21965
	mulss	xmm0, DWORD PTR tv278[ebp]
	cvtss2sd xmm0, xmm0
	subsd	xmm0, QWORD PTR __real@3fc1cac083126e98
	movsd	QWORD PTR tv285[ebp], xmm0
$LN36@transient_:
	sub	esp, 8
	movsd	xmm0, QWORD PTR tv285[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv500[ebp]
	fld	DWORD PTR tv500[ebp]
	mov	eax, DWORD PTR _tf_estimate$[ebp]
	fstp	DWORD PTR [eax]
; Line 373
	mov	eax, DWORD PTR _is_transient$[ebp]
; Line 374
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@transient_
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-188]
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN39@transient_:
	DD	1
	DD	$LN38@transient_
$LN38@transient_:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN37@transient_
$LN37@transient_:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
_transient_analysis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _opus_custom_encoder_init_arch
_TEXT	SEGMENT
_st$ = 8						; size = 4
_mode$ = 12						; size = 4
_channels$ = 16						; size = 4
_arch$ = 20						; size = 4
_opus_custom_encoder_init_arch PROC			; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 165
	push	ebp
	mov	ebp, esp
; Line 166
	cmp	DWORD PTR _channels$[ebp], 0
	jl	SHORT $LN3@opus_custo
	cmp	DWORD PTR _channels$[ebp], 2
	jle	SHORT $LN4@opus_custo
$LN3@opus_custo:
; Line 167
	or	eax, -1
	jmp	$LN5@opus_custo
$LN4@opus_custo:
; Line 169
	cmp	DWORD PTR _st$[ebp], 0
	je	SHORT $LN1@opus_custo
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN2@opus_custo
$LN1@opus_custo:
; Line 170
	mov	eax, -7					; fffffff9H
	jmp	$LN5@opus_custo
$LN2@opus_custo:
; Line 172
	mov	eax, DWORD PTR _channels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_opus_custom_encoder_get_size
	add	esp, 8
	push	eax
	push	0
	mov	edx, DWORD PTR _st$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 174
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 175
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _channels$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _channels$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 177
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+28], 1
; Line 178
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 179
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+36], edx
; Line 180
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+48], 1
; Line 182
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _arch$[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 184
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+52], 1
; Line 185
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+16], 1
; Line 187
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+40], -1
; Line 188
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+44], 0
; Line 189
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 190
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+24], 5
; Line 191
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+60], 24			; 00000018H
; Line 193
	push	4028					; 00000fbcH
	mov	ecx, DWORD PTR _st$[ebp]
	push	ecx
	call	_opus_custom_encoder_ctl
	add	esp, 8
; Line 195
	xor	eax, eax
$LN5@opus_custo:
; Line 196
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_opus_custom_encoder_init_arch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_maxabs16
_TEXT	SEGMENT
tv87 = -24						; size = 4
tv81 = -20						; size = 4
tv73 = -16						; size = 4
_minval$ = -12						; size = 4
_maxval$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_len$ = 12						; size = 4
_celt_maxabs16 PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\mathops.h
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 50
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _maxval$[ebp], xmm0
; Line 51
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _minval$[ebp], xmm0
; Line 52
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@celt_maxab
$LN2@celt_maxab:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@celt_maxab:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@celt_maxab
; Line 54
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR _maxval$[ebp]
	comiss	xmm0, DWORD PTR [eax+edx*4]
	jbe	SHORT $LN6@celt_maxab
	movss	xmm0, DWORD PTR _maxval$[ebp]
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN7@celt_maxab
$LN6@celt_maxab:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv73[ebp], xmm0
$LN7@celt_maxab:
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR _maxval$[ebp], xmm0
; Line 55
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR _minval$[ebp]
	jbe	SHORT $LN8@celt_maxab
	movss	xmm0, DWORD PTR _minval$[ebp]
	movss	DWORD PTR tv81[ebp], xmm0
	jmp	SHORT $LN9@celt_maxab
$LN8@celt_maxab:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv81[ebp], xmm0
$LN9@celt_maxab:
	movss	xmm0, DWORD PTR tv81[ebp]
	movss	DWORD PTR _minval$[ebp], xmm0
; Line 56
	jmp	$LN2@celt_maxab
$LN1@celt_maxab:
; Line 57
	movss	xmm0, DWORD PTR _minval$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR _maxval$[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@celt_maxab
	movss	xmm0, DWORD PTR _maxval$[ebp]
	movss	DWORD PTR tv87[ebp], xmm0
	jmp	SHORT $LN11@celt_maxab
$LN10@celt_maxab:
	movss	xmm0, DWORD PTR _minval$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv87[ebp], xmm0
$LN11@celt_maxab:
	fld	DWORD PTR tv87[ebp]
; Line 58
	mov	esp, ebp
	pop	ebp
	ret	0
_celt_maxabs16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_inner_prod_c
_TEXT	SEGMENT
_xy$ = -8						; size = 4
_i$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_N$ = 16						; size = 4
_celt_inner_prod_c PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\pitch.h
; Line 162
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 164
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _xy$[ebp], xmm0
; Line 165
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@celt_inner
$LN2@celt_inner:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@celt_inner:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _N$[ebp]
	jge	SHORT $LN1@celt_inner
; Line 166
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mulss	xmm0, DWORD PTR [edx+ecx*4]
	addss	xmm0, DWORD PTR _xy$[ebp]
	movss	DWORD PTR _xy$[ebp], xmm0
	jmp	SHORT $LN2@celt_inner
$LN1@celt_inner:
; Line 167
	fld	DWORD PTR _xy$[ebp]
; Line 168
	mov	esp, ebp
	pop	ebp
	ret	0
_celt_inner_prod_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_preemphasis
_TEXT	SEGMENT
tv160 = -36						; size = 4
tv161 = -32						; size = 4
tv149 = -28						; size = 4
_x$1 = -24						; size = 4
_x$2 = -20						; size = 4
_Nu$ = -16						; size = 4
_m$ = -12						; size = 4
_coef0$ = -8						; size = 4
_i$ = -4						; size = 4
_pcmp$ = 8						; size = 4
_inp$ = 12						; size = 4
_N$ = 16						; size = 4
_CC$ = 20						; size = 4
_upsample$ = 24						; size = 4
_coef$ = 28						; size = 4
_mem$ = 32						; size = 4
_clip$ = 36						; size = 4
_celt_preemphasis PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 470
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _coef$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR _coef0$[ebp], xmm0
; Line 471
	mov	eax, DWORD PTR _mem$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp], xmm0
; Line 474
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _coef$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@celt_preem
	cmp	DWORD PTR _upsample$[ebp], 1
	jne	SHORT $LN15@celt_preem
	cmp	DWORD PTR _clip$[ebp], 0
	jne	SHORT $LN15@celt_preem
; Line 476
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@celt_preem
$LN13@celt_preem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _N$[ebp]
	jge	SHORT $LN12@celt_preem
; Line 479
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pcmp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mulss	xmm0, DWORD PTR __real@47000000
	movss	DWORD PTR _x$2[ebp], xmm0
; Line 481
	movss	xmm0, DWORD PTR _x$2[ebp]
	subss	xmm0, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _inp$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 482
	movss	xmm0, DWORD PTR _coef0$[ebp]
	mulss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR _m$[ebp], xmm0
; Line 483
	jmp	SHORT $LN13@celt_preem
$LN12@celt_preem:
; Line 484
	mov	eax, DWORD PTR _mem$[ebp]
	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR [eax], xmm0
; Line 485
	jmp	$LN16@celt_preem
$LN15@celt_preem:
; Line 488
	mov	eax, DWORD PTR _N$[ebp]
	cdq
	idiv	DWORD PTR _upsample$[ebp]
	mov	DWORD PTR _Nu$[ebp], eax
; Line 489
	cmp	DWORD PTR _upsample$[ebp], 1
	je	SHORT $LN11@celt_preem
; Line 491
	mov	ecx, DWORD PTR _N$[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _inp$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN11@celt_preem:
; Line 493
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@celt_preem
$LN9@celt_preem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _Nu$[ebp]
	jge	SHORT $LN8@celt_preem
; Line 494
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pcmp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	mulss	xmm0, DWORD PTR __real@47000000
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _upsample$[ebp]
	mov	edx, DWORD PTR _inp$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	SHORT $LN9@celt_preem
$LN8@celt_preem:
; Line 497
	cmp	DWORD PTR _clip$[ebp], 0
	je	$LN4@celt_preem
; Line 500
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@celt_preem
$LN5@celt_preem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _Nu$[ebp]
	jge	$LN4@celt_preem
; Line 501
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, DWORD PTR _upsample$[ebp]
	mov	eax, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	comiss	xmm0, DWORD PTR __real@47800000
	jbe	SHORT $LN18@celt_preem
	movss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR tv149[ebp], xmm0
	jmp	SHORT $LN19@celt_preem
$LN18@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _upsample$[ebp]
	mov	edx, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	movss	DWORD PTR tv149[ebp], xmm0
$LN19@celt_preem:
	movss	xmm0, DWORD PTR __real@c7800000
	comiss	xmm0, DWORD PTR tv149[ebp]
	jbe	SHORT $LN22@celt_preem
	movss	xmm0, DWORD PTR __real@c7800000
	movss	DWORD PTR tv161[ebp], xmm0
	jmp	SHORT $LN23@celt_preem
$LN22@celt_preem:
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _upsample$[ebp]
	mov	ecx, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	comiss	xmm0, DWORD PTR __real@47800000
	jbe	SHORT $LN20@celt_preem
	movss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR tv160[ebp], xmm0
	jmp	SHORT $LN21@celt_preem
$LN20@celt_preem:
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, DWORD PTR _upsample$[ebp]
	mov	eax, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv160[ebp], xmm0
$LN21@celt_preem:
	movss	xmm0, DWORD PTR tv160[ebp]
	movss	DWORD PTR tv161[ebp], xmm0
$LN23@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _upsample$[ebp]
	mov	edx, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	$LN5@celt_preem
$LN4@celt_preem:
; Line 523
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@celt_preem
$LN2@celt_preem:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@celt_preem:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _N$[ebp]
	jge	SHORT $LN1@celt_preem
; Line 526
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _inp$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR _x$1[ebp], xmm0
; Line 528
	movss	xmm0, DWORD PTR _x$1[ebp]
	subss	xmm0, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _inp$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 529
	movss	xmm0, DWORD PTR _coef0$[ebp]
	mulss	xmm0, DWORD PTR _x$1[ebp]
	movss	DWORD PTR _m$[ebp], xmm0
; Line 530
	jmp	SHORT $LN2@celt_preem
$LN1@celt_preem:
; Line 532
	mov	eax, DWORD PTR _mem$[ebp]
	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR [eax], xmm0
$LN16@celt_preem:
; Line 533
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_celt_preemphasis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_encoder_init
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_st$ = 8						; size = 4
_sampling_rate$ = 12					; size = 4
_channels$ = 16						; size = 4
_arch$ = 20						; size = 4
_celt_encoder_init PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 207
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 210
	mov	eax, DWORD PTR _arch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _channels$[ebp]
	push	ecx
	push	0
	push	960					; 000003c0H
	push	48000					; 0000bb80H
	call	_opus_custom_mode_create
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _st$[ebp]
	push	edx
	call	_opus_custom_encoder_init_arch
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
; Line 211
	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN1@celt_encod
; Line 212
	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN2@celt_encod
$LN1@celt_encod:
; Line 213
	mov	eax, DWORD PTR _sampling_rate$[ebp]
	push	eax
	call	_resampling_factor
	add	esp, 4
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 214
	xor	eax, eax
$LN2@celt_encod:
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_celt_encoder_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_encode_with_ec
_TEXT	SEGMENT
tv1581 = -952						; size = 4
tv1503 = -948						; size = 4
tv1493 = -944						; size = 4
tv1468 = -940						; size = 4
tv1695 = -936						; size = 4
tv1454 = -932						; size = 4
tv1455 = -928						; size = 4
tv1445 = -924						; size = 4
tv1410 = -920						; size = 4
tv1394 = -916						; size = 4
tv1382 = -912						; size = 4
tv1690 = -908						; size = 4
tv1378 = -904						; size = 4
tv1685 = -900						; size = 4
tv1374 = -896						; size = 4
tv1680 = -892						; size = 4
tv1368 = -888						; size = 4
tv1362 = -884						; size = 4
tv1314 = -880						; size = 4
tv1310 = -876						; size = 4
tv1275 = -872						; size = 4
tv1260 = -868						; size = 4
tv1189 = -864						; size = 4
tv1190 = -860						; size = 4
tv1184 = -856						; size = 4
tv1160 = -852						; size = 4
tv1147 = -848						; size = 4
tv1134 = -844						; size = 4
tv1135 = -840						; size = 4
tv1130 = -836						; size = 4
tv1108 = -832						; size = 4
tv1675 = -828						; size = 4
tv1104 = -824						; size = 4
tv1072 = -820						; size = 4
tv1670 = -816						; size = 4
tv1052 = -812						; size = 4
tv1002 = -808						; size = 4
tv995 = -804						; size = 4
tv1665 = -800						; size = 4
tv956 = -796						; size = 4
tv1660 = -792						; size = 4
tv945 = -788						; size = 4
tv1655 = -784						; size = 4
tv864 = -780						; size = 4
tv865 = -776						; size = 4
tv861 = -772						; size = 4
tv851 = -768						; size = 4
tv838 = -764						; size = 4
tv822 = -760						; size = 4
tv813 = -756						; size = 4
tv786 = -752						; size = 4
tv781 = -748						; size = 4
tv744 = -744						; size = 4
tv743 = -740						; size = 4
tv740 = -736						; size = 4
tv693 = -732						; size = 4
tv692 = -728						; size = 4
tv677 = -724						; size = 4
tv659 = -720						; size = 4
tv646 = -716						; size = 4
tv1650 = -712						; size = 4
tv635 = -708						; size = 4
tv625 = -704						; size = 4
tv513 = -700						; size = 4
tv1645 = -696						; size = 4
tv508 = -692						; size = 4
tv504 = -688						; size = 4
tv1640 = -684						; size = 4
tv499 = -680						; size = 4
tv1635 = -676						; size = 4
tv494 = -672						; size = 4
tv1630 = -668						; size = 4
tv408 = -664						; size = 4
tv368 = -660						; size = 4
tv354 = -656						; size = 4
tv344 = -652						; size = 4
tv338 = -648						; size = 4
tv319 = -644						; size = 4
tv1947 = -640						; size = 4
tv3004 = -636						; size = 4
tv297 = -632						; size = 4
tv1625 = -628						; size = 4
tv283 = -624						; size = 4
tv282 = -620						; size = 4
tv277 = -616						; size = 4
tv270 = -612						; size = 4
tv267 = -608						; size = 4
tv262 = -604						; size = 4
tv255 = -600						; size = 4
tv234 = -596						; size = 4
tv236 = -592						; size = 4
tv223 = -588						; size = 4
tv237 = -584						; size = 4
tv211 = -580						; size = 4
tv213 = -576						; size = 4
tv200 = -572						; size = 4
tv172 = -568						; size = 4
__$AllocaPad$$ = -560					; size = 4
_min_bandwidth$1 = -552					; size = 4
_adjust$2 = -548					; size = 4
_lm_diff$3 = -544					; size = 4
_min_allowed$4 = -540					; size = 4
_base_target$5 = -536					; size = 4
_target$6 = -532					; size = 4
_delta$7 = -528						; size = 4
_alpha$8 = -524						; size = 4
_flag$9 = -520						; size = 4
_j$10 = -516						; size = 4
_boost$11 = -512					; size = 4
_dynalloc_loop_logp$12 = -508				; size = 4
_quanta$13 = -504					; size = 4
_width$14 = -500					; size = 4
_lambda$15 = -496					; size = 4
_offset$16 = -492					; size = 4
_frame_avg$17 = -488					; size = 4
_follow$18 = -484					; size = 4
_unmask$19 = -480					; size = 4
_lin$20 = -476						; size = 4
_mask$21 = -472						; size = 4
_count$22 = -468					; size = 4
_diff$23 = -464						; size = 4
_mask_avg$24 = -460					; size = 4
_count_dynalloc$25 = -456				; size = 4
_midband$26 = -452					; size = 4
_mask_end$27 = -448					; size = 4
_octave$28 = -444					; size = 4
_qg$29 = -436						; size = 4
_enabled$30 = -428					; size = 4
_need_clip$31 = -424					; size = 4
_max_allowed$32 = -420					; size = 4
_vbr_bound$33 = -416					; size = 4
_tmp$34 = -412						; size = 4
_den$35 = -408						; size = 4
_surround_dynalloc$ = -404				; size = 4
_equiv_rate$ = -400					; size = 4
_surround_trim$ = -396					; size = 4
_temporal_vbr$ = -392					; size = 4
_surround_masking$ = -388				; size = 4
_transient_got_disabled$ = -384				; size = 4
_signalBandwidth$ = -380				; size = 4
_secondMdct$ = -376					; size = 4
_eBands$ = -372						; size = 4
_overlap$ = -368					; size = 4
_nbEBands$ = -364					; size = 4
_mode$ = -360						; size = 4
_maxDepth$ = -356					; size = 4
_sample_max$ = -352					; size = 4
_tot_boost$ = -344					; size = 4
_pitch_change$ = -336					; size = 4
_tf_estimate$ = -328					; size = 4
_tf_chan$ = -316					; size = 4
_silence$ = -308					; size = 4
_anti_collapse_on$ = -304				; size = 4
_anti_collapse_rsv$ = -300				; size = 4
_pf_on$ = -296						; size = 4
_prefilter_tapset$ = -292				; size = 4
_tell$ = -288						; size = 4
_balance$ = -280					; size = 4
_total_boost$ = -272					; size = 4
_total_bits$ = -268					; size = 4
_vbr_rate$ = -264					; size = 4
_dynalloc_logp$ = -260					; size = 4
_effectiveBytes$ = -256					; size = 4
_dual_stereo$ = -248					; size = 4
_gain1$ = -236						; size = 4
_pitch_index$ = -224					; size = 4
_alloc_trim$ = -216					; size = 4
_tf_sum$ = -208						; size = 4
_codedBands$ = -200					; size = 4
_effEnd$ = -196						; size = 4
_end$ = -192						; size = 4
_start$ = -188						; size = 4
_nbAvailableBytes$ = -184				; size = 4
_nbFilledBytes$ = -180					; size = 4
_tf_select$ = -176					; size = 4
_M$ = -172						; size = 4
_LM$ = -168						; size = 4
_C$ = -164						; size = 4
_CC$ = -160						; size = 4
_isTransient$ = -156					; size = 4
_shortBlocks$ = -152					; size = 4
_oldLogE2$ = -148					; size = 4
_oldLogE$ = -144					; size = 4
_oldBandE$ = -140					; size = 4
_prefilter_mem$ = -136					; size = 4
_collapse_masks$ = -132					; size = 4
_tf_res$ = -128						; size = 4
_fine_priority$ = -124					; size = 4
_offsets$ = -120					; size = 4
_cap$ = -116						; size = 4
_pulses$ = -112						; size = 4
_error$ = -108						; size = 4
_fine_quant$ = -104					; size = 4
_bandLogE2$ = -100					; size = 4
_bandLogE$ = -96					; size = 4
_bandE$ = -92						; size = 4
_X$ = -88						; size = 4
_freq$ = -84						; size = 4
_in$ = -80						; size = 4
__enc$ = -72						; size = 48
_bits$ = -20						; size = 4
_N$ = -16						; size = 4
_c$ = -12						; size = 4
_i$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_st$ = 8						; size = 4
_pcm$ = 12						; size = 4
_frame_size$ = 16					; size = 4
_compressed$ = 20					; size = 4
_nbCompressedBytes$ = 24				; size = 4
_enc$ = 28						; size = 4
_celt_encode_with_ec PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 1312
	push	ebp
	mov	ebp, esp
	sub	esp, 952				; 000003b8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-952]
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR __$AllocaPad$$[ebp], 0
; Line 1332
	mov	DWORD PTR _shortBlocks$[ebp], 0
; Line 1333
	mov	DWORD PTR _isTransient$[ebp], 0
; Line 1334
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _CC$[ebp], ecx
; Line 1335
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _C$[ebp], eax
; Line 1345
	mov	DWORD PTR _pitch_index$[ebp], 15	; 0000000fH
; Line 1346
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _gain1$[ebp], xmm0
; Line 1347
	mov	DWORD PTR _dual_stereo$[ebp], 0
; Line 1355
	mov	DWORD PTR _prefilter_tapset$[ebp], 0
; Line 1358
	mov	DWORD PTR _anti_collapse_on$[ebp], 0
; Line 1359
	mov	DWORD PTR _silence$[ebp], 0
; Line 1360
	mov	DWORD PTR _tf_chan$[ebp], 0
; Line 1362
	mov	DWORD PTR _pitch_change$[ebp], 0
; Line 1372
	mov	DWORD PTR _transient_got_disabled$[ebp], 0
; Line 1373
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _surround_masking$[ebp], xmm0
; Line 1374
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _temporal_vbr$[ebp], xmm0
; Line 1375
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _surround_trim$[ebp], xmm0
; Line 1376
	mov	DWORD PTR _equiv_rate$[ebp], 510000	; 0007c830H
; Line 1380
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _mode$[ebp], edx
; Line 1381
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nbEBands$[ebp], ecx
; Line 1382
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _overlap$[ebp], eax
; Line 1383
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _eBands$[ebp], edx
; Line 1384
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _start$[ebp], ecx
; Line 1385
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _end$[ebp], eax
; Line 1386
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _tf_estimate$[ebp], xmm0
; Line 1387
	cmp	DWORD PTR _nbCompressedBytes$[ebp], 2
	jl	SHORT $LN161@celt_encod
	cmp	DWORD PTR _pcm$[ebp], 0
	jne	SHORT $LN162@celt_encod
$LN161@celt_encod:
; Line 1390
	or	eax, -1
	jmp	$LN1@celt_encod
$LN162@celt_encod:
; Line 1393
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _frame_size$[ebp]
	imul	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _frame_size$[ebp], edx
; Line 1394
	mov	DWORD PTR _LM$[ebp], 0
	jmp	SHORT $LN160@celt_encod
$LN159@celt_encod:
	mov	eax, DWORD PTR _LM$[ebp]
	add	eax, 1
	mov	DWORD PTR _LM$[ebp], eax
$LN160@celt_encod:
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR _LM$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jg	SHORT $LN158@celt_encod
; Line 1395
	mov	eax, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	cmp	edx, DWORD PTR _frame_size$[ebp]
	jne	SHORT $LN157@celt_encod
; Line 1396
	jmp	SHORT $LN158@celt_encod
$LN157@celt_encod:
; Line 1397
	jmp	SHORT $LN159@celt_encod
$LN158@celt_encod:
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR _LM$[ebp]
	cmp	ecx, DWORD PTR [eax+36]
	jle	SHORT $LN156@celt_encod
; Line 1400
	or	eax, -1
	jmp	$LN1@celt_encod
$LN156@celt_encod:
; Line 1402
	mov	edx, 1
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _M$[ebp], edx
; Line 1403
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR _M$[ebp]
	imul	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _N$[ebp], ecx
; Line 1405
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _overlap$[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+200]
	mov	DWORD PTR _prefilter_mem$[ebp], ecx
; Line 1406
	mov	edx, DWORD PTR _overlap$[ebp]
	add	edx, 1024				; 00000400H
	imul	edx, DWORD PTR _CC$[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+200]
	mov	DWORD PTR _oldBandE$[ebp], ecx
; Line 1407
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _oldBandE$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _oldLogE$[ebp], ecx
; Line 1408
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	mov	eax, DWORD PTR _oldLogE$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _oldLogE2$[ebp], ecx
; Line 1410
	cmp	DWORD PTR _enc$[ebp], 0
	jne	SHORT $LN155@celt_encod
; Line 1412
	mov	DWORD PTR _tell$[ebp], 1
; Line 1413
	mov	DWORD PTR _nbFilledBytes$[ebp], 0
; Line 1414
	jmp	SHORT $LN154@celt_encod
$LN155@celt_encod:
; Line 1415
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_tell
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
; Line 1416
	mov	eax, DWORD PTR _tell$[ebp]
	add	eax, 4
	sar	eax, 3
	mov	DWORD PTR _nbFilledBytes$[ebp], eax
$LN154@celt_encod:
; Line 1446
	cmp	DWORD PTR _nbCompressedBytes$[ebp], 1275 ; 000004fbH
	jge	SHORT $LN165@celt_encod
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv172[ebp], ecx
	jmp	SHORT $LN166@celt_encod
$LN165@celt_encod:
	mov	DWORD PTR tv172[ebp], 1275		; 000004fbH
$LN166@celt_encod:
	mov	edx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], edx
; Line 1447
	mov	eax, DWORD PTR _nbCompressedBytes$[ebp]
	sub	eax, DWORD PTR _nbFilledBytes$[ebp]
	mov	DWORD PTR _nbAvailableBytes$[ebp], eax
; Line 1449
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN153@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+40], -1
	je	SHORT $LN153@celt_encod
; Line 1451
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax]
	sar	ecx, 3
	mov	DWORD PTR _den$35[ebp], ecx
; Line 1452
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+40]
	imul	eax, DWORD PTR _frame_size$[ebp]
	mov	ecx, DWORD PTR _den$35[ebp]
	sar	ecx, 1
	add	eax, ecx
	cdq
	idiv	DWORD PTR _den$35[ebp]
	mov	DWORD PTR _vbr_rate$[ebp], eax
; Line 1457
	mov	edx, DWORD PTR _vbr_rate$[ebp]
	sar	edx, 6
	mov	DWORD PTR _effectiveBytes$[ebp], edx
; Line 1458
	jmp	$LN152@celt_encod
$LN153@celt_encod:
; Line 1460
	mov	DWORD PTR _vbr_rate$[ebp], 0
; Line 1461
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	imul	ecx, DWORD PTR _frame_size$[ebp]
	mov	DWORD PTR _tmp$34[ebp], ecx
; Line 1462
	cmp	DWORD PTR _tell$[ebp], 1
	jle	SHORT $LN151@celt_encod
; Line 1463
	mov	edx, DWORD PTR _tmp$34[ebp]
	add	edx, DWORD PTR _tell$[ebp]
	mov	DWORD PTR _tmp$34[ebp], edx
$LN151@celt_encod:
; Line 1464
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+40], -1
	je	$LN150@celt_encod
; Line 1466
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN167@celt_encod
	mov	DWORD PTR tv200[ebp], 1
	jmp	SHORT $LN168@celt_encod
$LN167@celt_encod:
	mov	DWORD PTR tv200[ebp], 0
$LN168@celt_encod:
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _tmp$34[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [edx]
	shl	ecx, 3
	cdq
	idiv	ecx
	sub	eax, DWORD PTR tv200[ebp]
	cmp	DWORD PTR _nbCompressedBytes$[ebp], eax
	jge	SHORT $LN171@celt_encod
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv213[ebp], edx
	jmp	SHORT $LN172@celt_encod
$LN171@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN169@celt_encod
	mov	DWORD PTR tv211[ebp], 1
	jmp	SHORT $LN170@celt_encod
$LN169@celt_encod:
	mov	DWORD PTR tv211[ebp], 0
$LN170@celt_encod:
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _tmp$34[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	ecx, 3
	cdq
	idiv	ecx
	sub	eax, DWORD PTR tv211[ebp]
	mov	DWORD PTR tv213[ebp], eax
$LN172@celt_encod:
	cmp	DWORD PTR tv213[ebp], 2
	jge	SHORT $LN179@celt_encod
	mov	DWORD PTR tv237[ebp], 2
	jmp	$LN180@celt_encod
$LN179@celt_encod:
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN173@celt_encod
	mov	DWORD PTR tv223[ebp], 1
	jmp	SHORT $LN174@celt_encod
$LN173@celt_encod:
	mov	DWORD PTR tv223[ebp], 0
$LN174@celt_encod:
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _tmp$34[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	ecx, 3
	cdq
	idiv	ecx
	sub	eax, DWORD PTR tv223[ebp]
	cmp	DWORD PTR _nbCompressedBytes$[ebp], eax
	jge	SHORT $LN177@celt_encod
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv236[ebp], edx
	jmp	SHORT $LN178@celt_encod
$LN177@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN175@celt_encod
	mov	DWORD PTR tv234[ebp], 1
	jmp	SHORT $LN176@celt_encod
$LN175@celt_encod:
	mov	DWORD PTR tv234[ebp], 0
$LN176@celt_encod:
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _tmp$34[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [ecx]
	shl	ecx, 3
	cdq
	idiv	ecx
	sub	eax, DWORD PTR tv234[ebp]
	mov	DWORD PTR tv236[ebp], eax
$LN178@celt_encod:
	mov	edx, DWORD PTR tv236[ebp]
	mov	DWORD PTR tv237[ebp], edx
$LN180@celt_encod:
	mov	eax, DWORD PTR tv237[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], eax
$LN150@celt_encod:
; Line 1467
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR _effectiveBytes$[ebp], ecx
$LN152@celt_encod:
; Line 1469
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+40], -1
	je	SHORT $LN149@celt_encod
; Line 1470
	imul	eax, DWORD PTR _C$[ebp], 40
	add	eax, 20					; 00000014H
	mov	edx, 400				; 00000190H
	mov	ecx, DWORD PTR _LM$[ebp]
	sar	edx, cl
	sub	edx, 50					; 00000032H
	imul	eax, edx
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	sub	edx, eax
	mov	DWORD PTR _equiv_rate$[ebp], edx
$LN149@celt_encod:
; Line 1472
	cmp	DWORD PTR _enc$[ebp], 0
	jne	SHORT $LN148@celt_encod
; Line 1474
	mov	eax, DWORD PTR _nbCompressedBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compressed$[ebp]
	push	ecx
	lea	edx, DWORD PTR __enc$[ebp]
	push	edx
	call	_ec_enc_init
	add	esp, 12					; 0000000cH
; Line 1475
	lea	eax, DWORD PTR __enc$[ebp]
	mov	DWORD PTR _enc$[ebp], eax
$LN148@celt_encod:
; Line 1478
	cmp	DWORD PTR _vbr_rate$[ebp], 0
	jle	$LN145@celt_encod
; Line 1484
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	$LN145@celt_encod
; Line 1492
	mov	edx, DWORD PTR _vbr_rate$[ebp]
	mov	DWORD PTR _vbr_bound$33[ebp], edx
; Line 1495
	cmp	DWORD PTR _tell$[ebp], 1
	jne	SHORT $LN181@celt_encod
	mov	DWORD PTR tv255[ebp], 2
	jmp	SHORT $LN182@celt_encod
$LN181@celt_encod:
	mov	DWORD PTR tv255[ebp], 0
$LN182@celt_encod:
	mov	eax, DWORD PTR _vbr_rate$[ebp]
	add	eax, DWORD PTR _vbr_bound$33[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+164]
	sar	eax, 6
	cmp	DWORD PTR tv255[ebp], eax
	jle	SHORT $LN185@celt_encod
	cmp	DWORD PTR _tell$[ebp], 1
	jne	SHORT $LN183@celt_encod
	mov	DWORD PTR tv262[ebp], 2
	jmp	SHORT $LN184@celt_encod
$LN183@celt_encod:
	mov	DWORD PTR tv262[ebp], 0
$LN184@celt_encod:
	mov	edx, DWORD PTR tv262[ebp]
	mov	DWORD PTR tv267[ebp], edx
	jmp	SHORT $LN186@celt_encod
$LN185@celt_encod:
	mov	eax, DWORD PTR _vbr_rate$[ebp]
	add	eax, DWORD PTR _vbr_bound$33[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+164]
	sar	eax, 6
	mov	DWORD PTR tv267[ebp], eax
$LN186@celt_encod:
	mov	edx, DWORD PTR tv267[ebp]
	cmp	edx, DWORD PTR _nbAvailableBytes$[ebp]
	jge	$LN193@celt_encod
	cmp	DWORD PTR _tell$[ebp], 1
	jne	SHORT $LN187@celt_encod
	mov	DWORD PTR tv270[ebp], 2
	jmp	SHORT $LN188@celt_encod
$LN187@celt_encod:
	mov	DWORD PTR tv270[ebp], 0
$LN188@celt_encod:
	mov	eax, DWORD PTR _vbr_rate$[ebp]
	add	eax, DWORD PTR _vbr_bound$33[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+164]
	sar	eax, 6
	cmp	DWORD PTR tv270[ebp], eax
	jle	SHORT $LN191@celt_encod
	cmp	DWORD PTR _tell$[ebp], 1
	jne	SHORT $LN189@celt_encod
	mov	DWORD PTR tv277[ebp], 2
	jmp	SHORT $LN190@celt_encod
$LN189@celt_encod:
	mov	DWORD PTR tv277[ebp], 0
$LN190@celt_encod:
	mov	edx, DWORD PTR tv277[ebp]
	mov	DWORD PTR tv282[ebp], edx
	jmp	SHORT $LN192@celt_encod
$LN191@celt_encod:
	mov	eax, DWORD PTR _vbr_rate$[ebp]
	add	eax, DWORD PTR _vbr_bound$33[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+164]
	sar	eax, 6
	mov	DWORD PTR tv282[ebp], eax
$LN192@celt_encod:
	mov	edx, DWORD PTR tv282[ebp]
	mov	DWORD PTR tv283[ebp], edx
	jmp	SHORT $LN194@celt_encod
$LN193@celt_encod:
	mov	eax, DWORD PTR _nbAvailableBytes$[ebp]
	mov	DWORD PTR tv283[ebp], eax
$LN194@celt_encod:
	mov	ecx, DWORD PTR tv283[ebp]
	mov	DWORD PTR _max_allowed$32[ebp], ecx
; Line 1496
	mov	edx, DWORD PTR _max_allowed$32[ebp]
	cmp	edx, DWORD PTR _nbAvailableBytes$[ebp]
	jge	SHORT $LN145@celt_encod
; Line 1498
	mov	eax, DWORD PTR _nbFilledBytes$[ebp]
	add	eax, DWORD PTR _max_allowed$32[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], eax
; Line 1499
	mov	ecx, DWORD PTR _max_allowed$32[ebp]
	mov	DWORD PTR _nbAvailableBytes$[ebp], ecx
; Line 1500
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_enc_shrink
	add	esp, 8
$LN145@celt_encod:
; Line 1504
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	shl	ecx, 3
	mov	DWORD PTR _total_bits$[ebp], ecx
; Line 1506
	mov	edx, DWORD PTR _end$[ebp]
	mov	DWORD PTR _effEnd$[ebp], edx
; Line 1507
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR _effEnd$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jle	SHORT $LN144@celt_encod
; Line 1508
	mov	edx, DWORD PTR _mode$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _effEnd$[ebp], eax
$LN144@celt_encod:
; Line 1510
	mov	ecx, DWORD PTR _N$[ebp]
	add	ecx, DWORD PTR _overlap$[ebp]
	imul	ecx, DWORD PTR _CC$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1625[ebp], ecx
	mov	eax, DWORD PTR tv1625[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv297[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1625[ebp]
	mov	ecx, DWORD PTR tv297[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv297[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv297[ebp]
	mov	DWORD PTR _in$[ebp], eax
; Line 1512
	mov	ecx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _N$[ebp]
	sub	edx, DWORD PTR _overlap$[ebp]
	mov	eax, edx
	imul	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	cdq
	idiv	DWORD PTR [ecx+28]
	push	eax
	mov	edx, DWORD PTR _pcm$[ebp]
	push	edx
	movss	DWORD PTR tv3004[ebp], xmm0
	call	_celt_maxabs16
	add	esp, 8
	fstp	DWORD PTR tv1947[ebp]
	movss	xmm0, DWORD PTR tv3004[ebp]
	comiss	xmm0, DWORD PTR tv1947[ebp]
	jbe	SHORT $LN195@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [eax+180]
	movss	DWORD PTR tv319[ebp], xmm0
	jmp	SHORT $LN196@celt_encod
$LN195@celt_encod:
	mov	ecx, DWORD PTR _N$[ebp]
	sub	ecx, DWORD PTR _overlap$[ebp]
	mov	eax, ecx
	imul	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	cdq
	idiv	DWORD PTR [ecx+28]
	push	eax
	mov	edx, DWORD PTR _pcm$[ebp]
	push	edx
	call	_celt_maxabs16
	add	esp, 8
	fstp	DWORD PTR tv319[ebp]
$LN196@celt_encod:
	movss	xmm0, DWORD PTR tv319[ebp]
	movss	DWORD PTR _sample_max$[ebp], xmm0
; Line 1513
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _overlap$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	cdq
	idiv	DWORD PTR [ecx+28]
	push	eax
	mov	edx, DWORD PTR _N$[ebp]
	sub	edx, DWORD PTR _overlap$[ebp]
	mov	eax, edx
	imul	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	cdq
	idiv	DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _pcm$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	call	_celt_maxabs16
	add	esp, 8
	mov	ecx, DWORD PTR _st$[ebp]
	fstp	DWORD PTR [ecx+180]
; Line 1514
	mov	edx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR _sample_max$[ebp]
	comiss	xmm0, DWORD PTR [edx+180]
	jbe	SHORT $LN197@celt_encod
	movss	xmm0, DWORD PTR _sample_max$[ebp]
	movss	DWORD PTR tv338[ebp], xmm0
	jmp	SHORT $LN198@celt_encod
$LN197@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [eax+180]
	movss	DWORD PTR tv338[ebp], xmm0
$LN198@celt_encod:
	movss	xmm0, DWORD PTR tv338[ebp]
	movss	DWORD PTR _sample_max$[ebp], xmm0
; Line 1518
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, 1
	mov	ecx, DWORD PTR [ecx+60]
	shl	edx, cl
	cvtsi2ss xmm0, edx
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	comiss	xmm1, DWORD PTR _sample_max$[ebp]
	jb	SHORT $LN199@celt_encod
	mov	DWORD PTR tv344[ebp], 1
	jmp	SHORT $LN200@celt_encod
$LN199@celt_encod:
	mov	DWORD PTR tv344[ebp], 0
$LN200@celt_encod:
	mov	eax, DWORD PTR tv344[ebp]
	mov	DWORD PTR _silence$[ebp], eax
; Line 1524
	cmp	DWORD PTR _tell$[ebp], 1
	jne	SHORT $LN143@celt_encod
; Line 1525
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _silence$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
; Line 1526
	jmp	SHORT $LN142@celt_encod
$LN143@celt_encod:
; Line 1527
	mov	DWORD PTR _silence$[ebp], 0
$LN142@celt_encod:
; Line 1528
	cmp	DWORD PTR _silence$[ebp], 0
	je	$LN141@celt_encod
; Line 1531
	cmp	DWORD PTR _vbr_rate$[ebp], 0
	jle	SHORT $LN140@celt_encod
; Line 1533
	mov	eax, DWORD PTR _nbFilledBytes$[ebp]
	add	eax, 2
	cmp	DWORD PTR _nbCompressedBytes$[ebp], eax
	jge	SHORT $LN201@celt_encod
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv354[ebp], ecx
	jmp	SHORT $LN202@celt_encod
$LN201@celt_encod:
	mov	edx, DWORD PTR _nbFilledBytes$[ebp]
	add	edx, 2
	mov	DWORD PTR tv354[ebp], edx
$LN202@celt_encod:
	mov	eax, DWORD PTR tv354[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], eax
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR _effectiveBytes$[ebp], ecx
; Line 1534
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	shl	edx, 3
	mov	DWORD PTR _total_bits$[ebp], edx
; Line 1535
	mov	DWORD PTR _nbAvailableBytes$[ebp], 2
; Line 1536
	mov	eax, DWORD PTR _nbCompressedBytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_shrink
	add	esp, 8
$LN140@celt_encod:
; Line 1540
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	shl	edx, 3
	mov	DWORD PTR _tell$[ebp], edx
; Line 1541
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell
	add	esp, 4
	mov	ecx, DWORD PTR _tell$[ebp]
	sub	ecx, eax
	mov	edx, DWORD PTR _enc$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _enc$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN141@celt_encod:
; Line 1543
	mov	DWORD PTR _c$[ebp], 0
$LN139@celt_encod:
; Line 1544
	mov	DWORD PTR _need_clip$31[ebp], 0
; Line 1546
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN203@celt_encod
	movss	xmm0, DWORD PTR _sample_max$[ebp]
	comiss	xmm0, DWORD PTR __real@47800000
	jbe	SHORT $LN203@celt_encod
	mov	DWORD PTR tv368[ebp], 1
	jmp	SHORT $LN204@celt_encod
$LN203@celt_encod:
	mov	DWORD PTR tv368[ebp], 0
$LN204@celt_encod:
	mov	edx, DWORD PTR tv368[ebp]
	mov	DWORD PTR _need_clip$31[ebp], edx
; Line 1549
	mov	eax, DWORD PTR _need_clip$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+148]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _CC$[ebp]
	push	ecx
	mov	edx, DWORD PTR _N$[ebp]
	push	edx
	mov	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	imul	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _overlap$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _pcm$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	_celt_preemphasis
	add	esp, 32					; 00000020H
; Line 1550
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _CC$[ebp]
	jl	$LN139@celt_encod
; Line 1559
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN205@celt_encod
	cmp	DWORD PTR _nbAvailableBytes$[ebp], 3
	jg	SHORT $LN206@celt_encod
$LN205@celt_encod:
	imul	edx, DWORD PTR _C$[ebp], 12
	cmp	DWORD PTR _nbAvailableBytes$[ebp], edx
	jle	SHORT $LN207@celt_encod
$LN206@celt_encod:
	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN207@celt_encod
	cmp	DWORD PTR _silence$[ebp], 0
	jne	SHORT $LN207@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN207@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+24], 5
	jl	SHORT $LN207@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	SHORT $LN208@celt_encod
	cmp	DWORD PTR _LM$[ebp], 3
	je	SHORT $LN208@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+64], 5010		; 00001392H
	je	SHORT $LN207@celt_encod
$LN208@celt_encod:
	mov	DWORD PTR tv408[ebp], 1
	jmp	SHORT $LN209@celt_encod
$LN207@celt_encod:
	mov	DWORD PTR tv408[ebp], 0
$LN209@celt_encod:
	mov	ecx, DWORD PTR tv408[ebp]
	mov	DWORD PTR _enabled$30[ebp], ecx
; Line 1561
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	DWORD PTR _prefilter_tapset$[ebp], eax
; Line 1562
	mov	ecx, DWORD PTR _nbAvailableBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enabled$30[ebp]
	push	edx
	lea	eax, DWORD PTR _qg$29[ebp]
	push	eax
	lea	ecx, DWORD PTR _gain1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pitch_index$[ebp]
	push	edx
	mov	eax, DWORD PTR _prefilter_tapset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _N$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CC$[ebp]
	push	edx
	mov	eax, DWORD PTR _prefilter_mem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	push	edx
	call	_run_prefilter
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _pf_on$[ebp], eax
; Line 1564
	movss	xmm0, DWORD PTR _gain1$[ebp]
	comiss	xmm0, DWORD PTR __real@3ecccccd
	ja	SHORT $LN135@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR [eax+108]
	comiss	xmm0, DWORD PTR __real@3ecccccd
	jbe	SHORT $LN136@celt_encod
$LN135@celt_encod:
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	je	SHORT $LN134@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+124]
	comisd	xmm0, QWORD PTR __real@3fd3333333333333
	jbe	SHORT $LN136@celt_encod
$LN134@celt_encod:
	cvtsi2sd xmm0, DWORD PTR _pitch_index$[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	cvtsi2sd xmm1, DWORD PTR [eax+104]
	mulsd	xmm1, QWORD PTR __real@3ff428f5c28f5c29
	comisd	xmm0, xmm1
	ja	SHORT $LN133@celt_encod
	cvtsi2sd xmm0, DWORD PTR _pitch_index$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	cvtsi2sd xmm1, DWORD PTR [ecx+104]
	mulsd	xmm1, QWORD PTR __real@3fe947ae147ae148
	comisd	xmm1, xmm0
	jbe	SHORT $LN136@celt_encod
$LN133@celt_encod:
; Line 1565
	mov	DWORD PTR _pitch_change$[ebp], 1
$LN136@celt_encod:
; Line 1566
	cmp	DWORD PTR _pf_on$[ebp], 0
	jne	SHORT $LN132@celt_encod
; Line 1568
	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN131@celt_encod
	mov	edx, DWORD PTR _tell$[ebp]
	add	edx, 16					; 00000010H
	cmp	edx, DWORD PTR _total_bits$[ebp]
	jg	SHORT $LN131@celt_encod
; Line 1569
	push	1
	push	0
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
$LN131@celt_encod:
; Line 1570
	jmp	$LN130@celt_encod
$LN132@celt_encod:
; Line 1574
	push	1
	push	1
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
; Line 1575
	mov	edx, DWORD PTR _pitch_index$[ebp]
	add	edx, 1
	mov	DWORD PTR _pitch_index$[ebp], edx
; Line 1576
	mov	eax, DWORD PTR _pitch_index$[ebp]
	push	eax
	call	_ec_bsr
	add	esp, 4
	neg	eax
	mov	ecx, 1
	sub	ecx, eax
	sub	ecx, 5
	mov	DWORD PTR _octave$28[ebp], ecx
; Line 1577
	push	6
	mov	edx, DWORD PTR _octave$28[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_enc_uint
	add	esp, 12					; 0000000cH
; Line 1578
	mov	ecx, DWORD PTR _octave$28[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, 16					; 00000010H
	mov	ecx, DWORD PTR _octave$28[ebp]
	shl	edx, cl
	mov	eax, DWORD PTR _pitch_index$[ebp]
	sub	eax, edx
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_bits
	add	esp, 12					; 0000000cH
; Line 1579
	mov	edx, DWORD PTR _pitch_index$[ebp]
	sub	edx, 1
	mov	DWORD PTR _pitch_index$[ebp], edx
; Line 1580
	push	3
	mov	eax, DWORD PTR _qg$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_bits
	add	esp, 12					; 0000000cH
; Line 1581
	push	2
	push	OFFSET _tapset_icdf
	mov	edx, DWORD PTR _prefilter_tapset$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_enc_icdf
	add	esp, 16					; 00000010H
$LN130@celt_encod:
; Line 1585
	mov	DWORD PTR _isTransient$[ebp], 0
; Line 1586
	mov	DWORD PTR _shortBlocks$[ebp], 0
; Line 1587
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+24], 1
	jl	SHORT $LN129@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	SHORT $LN129@celt_encod
; Line 1590
	lea	eax, DWORD PTR _tf_chan$[ebp]
	push	eax
	lea	ecx, DWORD PTR _tf_estimate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CC$[ebp]
	push	edx
	mov	eax, DWORD PTR _N$[ebp]
	add	eax, DWORD PTR _overlap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _in$[ebp]
	push	ecx
	call	_transient_analysis
	add	esp, 20					; 00000014H
	mov	DWORD PTR _isTransient$[ebp], eax
$LN129@celt_encod:
; Line 1592
	cmp	DWORD PTR _LM$[ebp], 0
	jle	SHORT $LN128@celt_encod
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_tell
	add	esp, 4
	add	eax, 3
	cmp	eax, DWORD PTR _total_bits$[ebp]
	jg	SHORT $LN128@celt_encod
; Line 1594
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN127@celt_encod
; Line 1595
	mov	eax, DWORD PTR _M$[ebp]
	mov	DWORD PTR _shortBlocks$[ebp], eax
$LN127@celt_encod:
; Line 1596
	jmp	SHORT $LN126@celt_encod
$LN128@celt_encod:
; Line 1597
	mov	DWORD PTR _isTransient$[ebp], 0
; Line 1598
	mov	DWORD PTR _transient_got_disabled$[ebp], 1
$LN126@celt_encod:
; Line 1601
	mov	ecx, DWORD PTR _CC$[ebp]
	imul	ecx, DWORD PTR _N$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1630[ebp], ecx
	mov	eax, DWORD PTR tv1630[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv494[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1630[ebp]
	mov	ecx, DWORD PTR tv494[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv494[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv494[ebp]
	mov	DWORD PTR _freq$[ebp], eax
; Line 1602
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _CC$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1635[ebp], ecx
	mov	eax, DWORD PTR tv1635[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv499[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1635[ebp]
	mov	ecx, DWORD PTR tv499[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv499[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv499[ebp]
	mov	DWORD PTR _bandE$[ebp], eax
; Line 1603
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _CC$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1640[ebp], ecx
	mov	eax, DWORD PTR tv1640[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv504[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1640[ebp]
	mov	ecx, DWORD PTR tv504[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv504[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv504[ebp]
	mov	DWORD PTR _bandLogE$[ebp], eax
; Line 1605
	cmp	DWORD PTR _shortBlocks$[ebp], 0
	je	SHORT $LN210@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+24], 8
	jl	SHORT $LN210@celt_encod
	mov	DWORD PTR tv508[ebp], 1
	jmp	SHORT $LN211@celt_encod
$LN210@celt_encod:
	mov	DWORD PTR tv508[ebp], 0
$LN211@celt_encod:
	mov	edx, DWORD PTR tv508[ebp]
	mov	DWORD PTR _secondMdct$[ebp], edx
; Line 1606
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1645[ebp], eax
	mov	eax, DWORD PTR tv1645[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv513[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1645[ebp]
	mov	ecx, DWORD PTR tv513[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv513[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv513[ebp]
	mov	DWORD PTR _bandLogE2$[ebp], edx
; Line 1607
	cmp	DWORD PTR _secondMdct$[ebp], 0
	je	$LN122@celt_encod
; Line 1609
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _CC$[ebp]
	push	edx
	mov	eax, DWORD PTR _C$[ebp]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _in$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_compute_mdcts
	add	esp, 36					; 00000024H
; Line 1610
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _C$[ebp]
	push	edx
	mov	eax, DWORD PTR _effEnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bandE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_compute_band_energies
	add	esp, 24					; 00000018H
; Line 1611
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_amp2Log2
	add	esp, 24					; 00000018H
; Line 1612
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN124@celt_encod
$LN123@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN124@celt_encod:
	mov	edx, DWORD PTR _C$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN122@celt_encod
; Line 1613
	cvtsi2ss xmm0, DWORD PTR _LM$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE2$[ebp]
	addss	xmm0, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
	jmp	SHORT $LN123@celt_encod
$LN122@celt_encod:
; Line 1616
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _LM$[ebp]
	push	edx
	mov	eax, DWORD PTR _CC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shortBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_compute_mdcts
	add	esp, 36					; 00000024H
; Line 1617
	cmp	DWORD PTR _CC$[ebp], 2
	jne	SHORT $LN121@celt_encod
	cmp	DWORD PTR _C$[ebp], 1
	jne	SHORT $LN121@celt_encod
; Line 1618
	mov	DWORD PTR _tf_chan$[ebp], 0
$LN121@celt_encod:
; Line 1619
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_compute_band_energies
	add	esp, 24					; 00000018H
; Line 1621
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	$LN117@celt_encod
; Line 1623
	mov	DWORD PTR _i$[ebp], 2
	jmp	SHORT $LN119@celt_encod
$LN118@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN119@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	$LN117@celt_encod
; Line 1625
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandE$[ebp]
	mov	edx, 4
	imul	edx, edx, 0
	mov	esi, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR [esi+edx]
	mulss	xmm0, DWORD PTR __real@38d1b717
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN212@celt_encod
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv625[ebp], xmm0
	jmp	SHORT $LN213@celt_encod
$LN212@celt_encod:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax]
	mulss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR tv625[ebp], xmm0
$LN213@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR tv625[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 1626
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	comiss	xmm0, DWORD PTR __real@26901d7d
	jbe	SHORT $LN214@celt_encod
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv635[ebp], xmm0
	jmp	SHORT $LN215@celt_encod
$LN214@celt_encod:
	movss	xmm0, DWORD PTR __real@26901d7d
	movss	DWORD PTR tv635[ebp], xmm0
$LN215@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandE$[ebp]
	movss	xmm0, DWORD PTR tv635[ebp]
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 1627
	jmp	$LN118@celt_encod
$LN117@celt_encod:
; Line 1629
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bandLogE$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_amp2Log2
	add	esp, 24					; 00000018H
; Line 1631
	mov	ecx, DWORD PTR _C$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1650[ebp], ecx
	mov	eax, DWORD PTR tv1650[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv646[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1650[ebp]
	mov	ecx, DWORD PTR tv646[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv646[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv646[ebp]
	mov	DWORD PTR _surround_dynalloc$[ebp], eax
; Line 1632
	mov	ecx, DWORD PTR _end$[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _surround_dynalloc$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1634
	cmp	DWORD PTR _start$[ebp], 0
	jne	$LN116@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	$LN116@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	$LN116@celt_encod
; Line 1639
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1640
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1641
	mov	DWORD PTR _count$22[ebp], 0
; Line 1642
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+92], 2
	jge	SHORT $LN216@celt_encod
	mov	DWORD PTR tv659[ebp], 2
	jmp	SHORT $LN217@celt_encod
$LN216@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR tv659[ebp], ecx
$LN217@celt_encod:
	mov	edx, DWORD PTR tv659[ebp]
	mov	DWORD PTR _mask_end$27[ebp], edx
; Line 1643
	mov	DWORD PTR _c$[ebp], 0
	jmp	SHORT $LN115@celt_encod
$LN114@celt_encod:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN115@celt_encod:
	mov	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, DWORD PTR _C$[ebp]
	jge	$LN113@celt_encod
; Line 1645
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN112@celt_encod
$LN111@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN112@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _mask_end$27[ebp]
	jge	$LN110@celt_encod
; Line 1649
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR [eax+ecx*4]
	jbe	SHORT $LN218@celt_encod
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv677[ebp], xmm0
	jmp	SHORT $LN219@celt_encod
$LN218@celt_encod:
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR tv677[ebp], xmm0
$LN219@celt_encod:
	movss	xmm0, DWORD PTR tv677[ebp]
	comiss	xmm0, DWORD PTR __real@c0000000
	jbe	SHORT $LN222@celt_encod
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	movss	xmm0, DWORD PTR __real@3e800000
	comiss	xmm0, DWORD PTR [eax+ecx*4]
	jbe	SHORT $LN220@celt_encod
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	imul	ecx, DWORD PTR _c$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv692[ebp], xmm0
	jmp	SHORT $LN221@celt_encod
$LN220@celt_encod:
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR tv692[ebp], xmm0
$LN221@celt_encod:
	movss	xmm0, DWORD PTR tv692[ebp]
	movss	DWORD PTR tv693[ebp], xmm0
	jmp	SHORT $LN223@celt_encod
$LN222@celt_encod:
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR tv693[ebp], xmm0
$LN223@celt_encod:
	movss	xmm0, DWORD PTR tv693[ebp]
	movss	DWORD PTR _mask$21[ebp], xmm0
; Line 1650
	movss	xmm0, DWORD PTR _mask$21[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN109@celt_encod
; Line 1651
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _mask$21[ebp]
	movss	DWORD PTR _mask$21[ebp], xmm0
$LN109@celt_encod:
; Line 1652
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _eBands$[ebp]
	movsx	eax, WORD PTR [edx+ecx*2+2]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _eBands$[ebp]
	movsx	ecx, WORD PTR [edx+ecx*2]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _mask$21[ebp]
	addss	xmm0, DWORD PTR _mask_avg$24[ebp]
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1653
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+2]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	edx, WORD PTR [eax+edx*2]
	sub	ecx, edx
	add	ecx, DWORD PTR _count$22[ebp]
	mov	DWORD PTR _count$22[ebp], ecx
; Line 1654
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [eax+eax+1]
	sub	ecx, DWORD PTR _mask_end$27[ebp]
	cvtsi2ss xmm0, ecx
	mulss	xmm0, DWORD PTR _mask$21[ebp]
	addss	xmm0, DWORD PTR _diff$23[ebp]
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1655
	jmp	$LN111@celt_encod
$LN110@celt_encod:
; Line 1656
	jmp	$LN114@celt_encod
$LN113@celt_encod:
; Line 1658
	cvtsi2ss xmm0, DWORD PTR _count$22[ebp]
	movss	xmm1, DWORD PTR _mask_avg$24[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _mask_avg$24[ebp], xmm1
; Line 1659
	movss	xmm0, DWORD PTR _mask_avg$24[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1660
	movss	xmm0, DWORD PTR _diff$23[ebp]
	mulss	xmm0, DWORD PTR __real@40c00000
	mov	edx, DWORD PTR _mask_end$27[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _C$[ebp]
	mov	eax, DWORD PTR _mask_end$27[ebp]
	add	eax, 1
	imul	edx, eax
	imul	edx, DWORD PTR _mask_end$27[ebp]
	cvtsi2ss xmm1, edx
	divss	xmm0, xmm1
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1662
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _diff$23[ebp]
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1663
	movss	xmm0, DWORD PTR __real@3cfdf3b6
	comiss	xmm0, DWORD PTR _diff$23[ebp]
	jbe	SHORT $LN224@celt_encod
	movss	xmm0, DWORD PTR _diff$23[ebp]
	movss	DWORD PTR tv740[ebp], xmm0
	jmp	SHORT $LN225@celt_encod
$LN224@celt_encod:
	movss	xmm0, DWORD PTR __real@3cfdf3b6
	movss	DWORD PTR tv740[ebp], xmm0
$LN225@celt_encod:
	movss	xmm0, DWORD PTR tv740[ebp]
	comiss	xmm0, DWORD PTR __real@bcfdf3b6
	jbe	SHORT $LN228@celt_encod
	movss	xmm0, DWORD PTR __real@3cfdf3b6
	comiss	xmm0, DWORD PTR _diff$23[ebp]
	jbe	SHORT $LN226@celt_encod
	movss	xmm0, DWORD PTR _diff$23[ebp]
	movss	DWORD PTR tv743[ebp], xmm0
	jmp	SHORT $LN227@celt_encod
$LN226@celt_encod:
	movss	xmm0, DWORD PTR __real@3cfdf3b6
	movss	DWORD PTR tv743[ebp], xmm0
$LN227@celt_encod:
	movss	xmm0, DWORD PTR tv743[ebp]
	movss	DWORD PTR tv744[ebp], xmm0
	jmp	SHORT $LN229@celt_encod
$LN228@celt_encod:
	movss	xmm0, DWORD PTR __real@bcfdf3b6
	movss	DWORD PTR tv744[ebp], xmm0
$LN229@celt_encod:
	movss	xmm0, DWORD PTR tv744[ebp]
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1665
	mov	DWORD PTR _midband$26[ebp], 0
	jmp	SHORT $LN108@celt_encod
$LN107@celt_encod:
	mov	ecx, DWORD PTR _midband$26[ebp]
	add	ecx, 1
	mov	DWORD PTR _midband$26[ebp], ecx
$LN108@celt_encod:
	mov	edx, DWORD PTR _midband$26[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	ecx, WORD PTR [eax+edx*2+2]
	mov	edx, DWORD PTR _mask_end$27[ebp]
	mov	eax, DWORD PTR _eBands$[ebp]
	movsx	eax, WORD PTR [eax+edx*2]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	ecx, eax
	jge	SHORT $LN106@celt_encod
	jmp	SHORT $LN107@celt_encod
$LN106@celt_encod:
; Line 1666
	mov	DWORD PTR _count_dynalloc$25[ebp], 0
; Line 1667
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN105@celt_encod
$LN104@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN105@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _mask_end$27[ebp]
	jge	$LN103@celt_encod
; Line 1671
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, DWORD PTR _midband$26[ebp]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _diff$23[ebp]
	addss	xmm0, DWORD PTR _mask_avg$24[ebp]
	movss	DWORD PTR _lin$20[ebp], xmm0
; Line 1672
	cmp	DWORD PTR _C$[ebp], 2
	jne	SHORT $LN102@celt_encod
; Line 1673
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	comiss	xmm0, DWORD PTR [eax+ecx*4]
	jbe	SHORT $LN230@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	movss	DWORD PTR tv781[ebp], xmm0
	jmp	SHORT $LN231@celt_encod
$LN230@celt_encod:
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+192]
	movss	xmm0, DWORD PTR [eax+ecx*4]
	movss	DWORD PTR tv781[ebp], xmm0
$LN231@celt_encod:
	movss	xmm0, DWORD PTR tv781[ebp]
	movss	DWORD PTR _unmask$19[ebp], xmm0
; Line 1674
	jmp	SHORT $LN101@celt_encod
$LN102@celt_encod:
; Line 1675
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	movss	DWORD PTR _unmask$19[ebp], xmm0
$LN101@celt_encod:
; Line 1676
	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _unmask$19[ebp]
	jbe	SHORT $LN232@celt_encod
	movss	xmm0, DWORD PTR _unmask$19[ebp]
	movss	DWORD PTR tv786[ebp], xmm0
	jmp	SHORT $LN233@celt_encod
$LN232@celt_encod:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv786[ebp], xmm0
$LN233@celt_encod:
	movss	xmm0, DWORD PTR tv786[ebp]
	movss	DWORD PTR _unmask$19[ebp], xmm0
; Line 1677
	movss	xmm0, DWORD PTR _unmask$19[ebp]
	subss	xmm0, DWORD PTR _lin$20[ebp]
	movss	DWORD PTR _unmask$19[ebp], xmm0
; Line 1678
	movss	xmm0, DWORD PTR _unmask$19[ebp]
	comiss	xmm0, DWORD PTR __real@3e800000
	jbe	SHORT $LN100@celt_encod
; Line 1680
	movss	xmm0, DWORD PTR _unmask$19[ebp]
	subss	xmm0, DWORD PTR __real@3e800000
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _surround_dynalloc$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
; Line 1681
	mov	eax, DWORD PTR _count_dynalloc$25[ebp]
	add	eax, 1
	mov	DWORD PTR _count_dynalloc$25[ebp], eax
$LN100@celt_encod:
; Line 1683
	jmp	$LN104@celt_encod
$LN103@celt_encod:
; Line 1684
	cmp	DWORD PTR _count_dynalloc$25[ebp], 3
	jl	$LN94@celt_encod
; Line 1688
	movss	xmm0, DWORD PTR _mask_avg$24[ebp]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1689
	movss	xmm0, DWORD PTR _mask_avg$24[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN98@celt_encod
; Line 1693
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1694
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _diff$23[ebp], xmm0
; Line 1695
	mov	ecx, DWORD PTR _mask_end$27[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _surround_dynalloc$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 1696
	jmp	$LN94@celt_encod
$LN98@celt_encod:
; Line 1697
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN96@celt_encod
$LN95@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN96@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _mask_end$27[ebp]
	jge	SHORT $LN94@celt_encod
; Line 1698
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _surround_dynalloc$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	subss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR __real@00000000
	comiss	xmm1, xmm0
	jbe	SHORT $LN234@celt_encod
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv813[ebp], xmm0
	jmp	SHORT $LN235@celt_encod
$LN234@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _surround_dynalloc$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	subss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR tv813[ebp], xmm0
$LN235@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _surround_dynalloc$[ebp]
	movss	xmm0, DWORD PTR tv813[ebp]
	movss	DWORD PTR [ecx+eax*4], xmm0
	jmp	SHORT $LN95@celt_encod
$LN94@celt_encod:
; Line 1701
	movss	xmm0, DWORD PTR _mask_avg$24[ebp]
	addss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _mask_avg$24[ebp], xmm0
; Line 1703
	movss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR _diff$23[ebp]
	movss	DWORD PTR _surround_trim$[ebp], xmm0
; Line 1705
	movss	xmm0, DWORD PTR _mask_avg$24[ebp]
	movss	DWORD PTR _surround_masking$[ebp], xmm0
$LN116@celt_encod:
; Line 1708
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	$LN93@celt_encod
; Line 1710
	movss	xmm0, DWORD PTR __real@c1200000
	movss	DWORD PTR _follow$18[ebp], xmm0
; Line 1711
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _frame_avg$17[ebp], xmm0
; Line 1712
	cmp	DWORD PTR _shortBlocks$[ebp], 0
	je	SHORT $LN236@celt_encod
	cvtsi2ss xmm0, DWORD PTR _LM$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv822[ebp], xmm0
	jmp	SHORT $LN237@celt_encod
$LN236@celt_encod:
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR tv822[ebp], xmm0
$LN237@celt_encod:
	movss	xmm0, DWORD PTR tv822[ebp]
	movss	DWORD PTR _offset$16[ebp], xmm0
; Line 1713
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN92@celt_encod
$LN91@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN92@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	$LN90@celt_encod
; Line 1715
	movss	xmm0, DWORD PTR _follow$18[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	movss	xmm1, DWORD PTR [ecx+eax*4]
	subss	xmm1, DWORD PTR _offset$16[ebp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN238@celt_encod
	movss	xmm0, DWORD PTR _follow$18[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv838[ebp], xmm0
	jmp	SHORT $LN239@celt_encod
$LN238@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	subss	xmm0, DWORD PTR _offset$16[ebp]
	movss	DWORD PTR tv838[ebp], xmm0
$LN239@celt_encod:
	movss	xmm0, DWORD PTR tv838[ebp]
	movss	DWORD PTR _follow$18[ebp], xmm0
; Line 1716
	cmp	DWORD PTR _C$[ebp], 2
	jne	SHORT $LN89@celt_encod
; Line 1717
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, DWORD PTR _nbEBands$[ebp]
	mov	edx, DWORD PTR _bandLogE$[ebp]
	movss	xmm0, DWORD PTR [edx+ecx*4]
	subss	xmm0, DWORD PTR _offset$16[ebp]
	movss	xmm1, DWORD PTR _follow$18[ebp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN240@celt_encod
	movss	xmm0, DWORD PTR _follow$18[ebp]
	movss	DWORD PTR tv851[ebp], xmm0
	jmp	SHORT $LN241@celt_encod
$LN240@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	subss	xmm0, DWORD PTR _offset$16[ebp]
	movss	DWORD PTR tv851[ebp], xmm0
$LN241@celt_encod:
	movss	xmm0, DWORD PTR tv851[ebp]
	movss	DWORD PTR _follow$18[ebp], xmm0
$LN89@celt_encod:
; Line 1718
	movss	xmm0, DWORD PTR _frame_avg$17[ebp]
	addss	xmm0, DWORD PTR _follow$18[ebp]
	movss	DWORD PTR _frame_avg$17[ebp], xmm0
; Line 1719
	jmp	$LN91@celt_encod
$LN90@celt_encod:
; Line 1720
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR _start$[ebp]
	cvtsi2ss xmm0, edx
	movss	xmm1, DWORD PTR _frame_avg$17[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _frame_avg$17[ebp], xmm1
; Line 1721
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR _frame_avg$17[ebp]
	subss	xmm0, DWORD PTR [eax+196]
	movss	DWORD PTR _temporal_vbr$[ebp], xmm0
; Line 1722
	movss	xmm0, DWORD PTR __real@bfc00000
	comiss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	jbe	SHORT $LN242@celt_encod
	movss	xmm0, DWORD PTR __real@bfc00000
	movss	DWORD PTR tv861[ebp], xmm0
	jmp	SHORT $LN243@celt_encod
$LN242@celt_encod:
	movss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	movss	DWORD PTR tv861[ebp], xmm0
$LN243@celt_encod:
	movss	xmm0, DWORD PTR tv861[ebp]
	comiss	xmm0, DWORD PTR __real@40400000
	jbe	SHORT $LN246@celt_encod
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv865[ebp], xmm0
	jmp	SHORT $LN247@celt_encod
$LN246@celt_encod:
	movss	xmm0, DWORD PTR __real@bfc00000
	comiss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	jbe	SHORT $LN244@celt_encod
	movss	xmm0, DWORD PTR __real@bfc00000
	movss	DWORD PTR tv864[ebp], xmm0
	jmp	SHORT $LN245@celt_encod
$LN244@celt_encod:
	movss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	movss	DWORD PTR tv864[ebp], xmm0
$LN245@celt_encod:
	movss	xmm0, DWORD PTR tv864[ebp]
	movss	DWORD PTR tv865[ebp], xmm0
$LN247@celt_encod:
	movss	xmm0, DWORD PTR tv865[ebp]
	movss	DWORD PTR _temporal_vbr$[ebp], xmm0
; Line 1723
	movss	xmm0, DWORD PTR __real@3ca3d70a
	mulss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	addss	xmm0, DWORD PTR [ecx+196]
	mov	edx, DWORD PTR _st$[ebp]
	movss	DWORD PTR [edx+196], xmm0
$LN93@celt_encod:
; Line 1729
	cmp	DWORD PTR _secondMdct$[ebp], 0
	jne	SHORT $LN88@celt_encod
; Line 1731
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _bandLogE2$[ebp]
	sub	ecx, DWORD PTR _bandLogE$[ebp]
	sar	ecx, 2
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN88@celt_encod:
; Line 1736
	cmp	DWORD PTR _LM$[ebp], 0
	jle	$LN86@celt_encod
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell
	add	esp, 4
	add	eax, 3
	cmp	eax, DWORD PTR _total_bits$[ebp]
	jg	$LN86@celt_encod
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	$LN86@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+24], 5
	jl	$LN86@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	jne	$LN86@celt_encod
; Line 1738
	mov	eax, DWORD PTR _C$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _nbEBands$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldBandE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bandLogE$[ebp]
	push	edx
	call	_patch_transient_decision
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN86@celt_encod
; Line 1740
	mov	DWORD PTR _isTransient$[ebp], 1
; Line 1741
	mov	eax, DWORD PTR _M$[ebp]
	mov	DWORD PTR _shortBlocks$[ebp], eax
; Line 1742
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _LM$[ebp]
	push	edx
	mov	eax, DWORD PTR _CC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp]
	push	edx
	mov	eax, DWORD PTR _in$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shortBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_compute_mdcts
	add	esp, 36					; 00000024H
; Line 1743
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _freq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_compute_band_energies
	add	esp, 24					; 00000018H
; Line 1744
	mov	eax, DWORD PTR _C$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bandE$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _effEnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_amp2Log2
	add	esp, 24					; 00000018H
; Line 1746
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN85@celt_encod
$LN84@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN85@celt_encod:
	mov	ecx, DWORD PTR _C$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN83@celt_encod
; Line 1747
	cvtsi2ss xmm0, DWORD PTR _LM$[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	addss	xmm0, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _bandLogE2$[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	SHORT $LN84@celt_encod
$LN83@celt_encod:
; Line 1748
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR _tf_estimate$[ebp], xmm0
$LN86@celt_encod:
; Line 1752
	cmp	DWORD PTR _LM$[ebp], 0
	jle	SHORT $LN82@celt_encod
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell
	add	esp, 4
	add	eax, 3
	cmp	eax, DWORD PTR _total_bits$[ebp]
	jg	SHORT $LN82@celt_encod
; Line 1753
	push	3
	mov	ecx, DWORD PTR _isTransient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
$LN82@celt_encod:
; Line 1755
	mov	eax, DWORD PTR _C$[ebp]
	imul	eax, DWORD PTR _N$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1655[ebp], eax
	mov	eax, DWORD PTR tv1655[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv945[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1655[ebp]
	mov	ecx, DWORD PTR tv945[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv945[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv945[ebp]
	mov	DWORD PTR _X$[ebp], edx
; Line 1758
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _X$[ebp]
	push	ecx
	mov	edx, DWORD PTR _freq$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_normalise_bands
	add	esp, 28					; 0000001cH
; Line 1760
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	shl	ecx, 2
	add	ecx, 36					; 00000024H
	mov	DWORD PTR tv1660[ebp], ecx
	mov	eax, DWORD PTR tv1660[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv956[ebp], esp
	lea	edx, DWORD PTR __$AllocaPad$$[ebp]
	push	edx
	mov	edx, DWORD PTR tv1660[ebp]
	mov	ecx, DWORD PTR tv956[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv956[ebp], 32		; 00000020H
	mov	eax, DWORD PTR tv956[ebp]
	mov	DWORD PTR _tf_res$[ebp], eax
; Line 1762
	imul	ecx, DWORD PTR _C$[ebp], 15
	cmp	DWORD PTR _effectiveBytes$[ebp], ecx
	jl	$LN81@celt_encod
	cmp	DWORD PTR _start$[ebp], 0
	jne	$LN81@celt_encod
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+24], 2
	jl	$LN81@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	$LN81@celt_encod
; Line 1765
	cmp	DWORD PTR _effectiveBytes$[ebp], 40	; 00000028H
	jge	SHORT $LN80@celt_encod
; Line 1766
	mov	DWORD PTR _lambda$15[ebp], 12		; 0000000cH
	jmp	SHORT $LN75@celt_encod
$LN80@celt_encod:
; Line 1767
	cmp	DWORD PTR _effectiveBytes$[ebp], 60	; 0000003cH
	jge	SHORT $LN78@celt_encod
; Line 1768
	mov	DWORD PTR _lambda$15[ebp], 6
	jmp	SHORT $LN75@celt_encod
$LN78@celt_encod:
; Line 1769
	cmp	DWORD PTR _effectiveBytes$[ebp], 100	; 00000064H
	jge	SHORT $LN76@celt_encod
; Line 1770
	mov	DWORD PTR _lambda$15[ebp], 4
; Line 1771
	jmp	SHORT $LN75@celt_encod
$LN76@celt_encod:
; Line 1772
	mov	DWORD PTR _lambda$15[ebp], 3
$LN75@celt_encod:
; Line 1773
	mov	ecx, DWORD PTR _lambda$15[ebp]
	shl	ecx, 1
	mov	DWORD PTR _lambda$15[ebp], ecx
; Line 1774
	mov	edx, DWORD PTR _tf_chan$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _tf_sum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _N$[ebp]
	push	edx
	mov	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lambda$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _tf_res$[ebp]
	push	edx
	mov	eax, DWORD PTR _isTransient$[ebp]
	push	eax
	mov	ecx, DWORD PTR _effEnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_tf_analysis
	add	esp, 44					; 0000002cH
	mov	DWORD PTR _tf_select$[ebp], eax
; Line 1775
	mov	eax, DWORD PTR _effEnd$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN74@celt_encod
$LN73@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN74@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN72@celt_encod
; Line 1776
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _tf_res$[ebp]
	mov	edx, DWORD PTR _effEnd$[ebp]
	mov	esi, DWORD PTR _tf_res$[ebp]
	mov	edx, DWORD PTR [esi+edx*4-4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN73@celt_encod
$LN72@celt_encod:
; Line 1777
	jmp	SHORT $LN71@celt_encod
$LN81@celt_encod:
; Line 1778
	mov	DWORD PTR _tf_sum$[ebp], 0
; Line 1779
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN70@celt_encod
$LN69@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN70@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jge	SHORT $LN68@celt_encod
; Line 1780
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _tf_res$[ebp]
	mov	ecx, DWORD PTR _isTransient$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN69@celt_encod
$LN68@celt_encod:
; Line 1781
	mov	DWORD PTR _tf_select$[ebp], 0
$LN71@celt_encod:
; Line 1784
	mov	edx, DWORD PTR _C$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	shl	edx, 2
	add	edx, 36					; 00000024H
	mov	DWORD PTR tv1665[ebp], edx
	mov	eax, DWORD PTR tv1665[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv995[ebp], esp
	lea	eax, DWORD PTR __$AllocaPad$$[ebp]
	push	eax
	mov	edx, DWORD PTR tv1665[ebp]
	mov	ecx, DWORD PTR tv995[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv995[ebp], 32		; 00000020H
	mov	ecx, DWORD PTR tv995[ebp]
	mov	DWORD PTR _error$[ebp], ecx
; Line 1788
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+24], 4
	jl	SHORT $LN248@celt_encod
	mov	DWORD PTR tv1002[ebp], 1
	jmp	SHORT $LN249@celt_encod
$LN248@celt_encod:
	mov	DWORD PTR tv1002[ebp], 0
$LN249@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR tv1002[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _nbAvailableBytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _total_bits$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldBandE$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandLogE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _effEnd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_quant_coarse_energy
	add	esp, 68					; 00000044H
; Line 1790
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	mov	eax, DWORD PTR _tf_select$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tf_res$[ebp]
	push	edx
	mov	eax, DWORD PTR _isTransient$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	call	_tf_encode
	add	esp, 28					; 0000001cH
; Line 1792
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell
	add	esp, 4
	add	eax, 4
	cmp	eax, DWORD PTR _total_bits$[ebp]
	jg	$LN67@celt_encod
; Line 1794
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN66@celt_encod
; Line 1796
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+100], 0
; Line 1797
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+80], 2
	jmp	$LN60@celt_encod
$LN66@celt_encod:
; Line 1798
	cmp	DWORD PTR _shortBlocks$[ebp], 0
	jne	SHORT $LN63@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+24], 3
	jl	SHORT $LN63@celt_encod
	imul	edx, DWORD PTR _C$[ebp], 10
	cmp	DWORD PTR _nbAvailableBytes$[ebp], edx
	jl	SHORT $LN63@celt_encod
	cmp	DWORD PTR _start$[ebp], 0
	je	SHORT $LN64@celt_encod
$LN63@celt_encod:
; Line 1800
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN62@celt_encod
; Line 1801
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+80], 0
; Line 1802
	jmp	SHORT $LN61@celt_encod
$LN62@celt_encod:
; Line 1803
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+80], 2
$LN61@celt_encod:
; Line 1804
	jmp	SHORT $LN60@celt_encod
$LN64@celt_encod:
; Line 1822
	cmp	DWORD PTR _pf_on$[ebp], 0
	je	SHORT $LN250@celt_encod
	cmp	DWORD PTR _shortBlocks$[ebp], 0
	jne	SHORT $LN250@celt_encod
	mov	DWORD PTR tv1052[ebp], 1
	jmp	SHORT $LN251@celt_encod
$LN250@celt_encod:
	mov	DWORD PTR tv1052[ebp], 0
$LN251@celt_encod:
	mov	eax, DWORD PTR _M$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _effEnd$[ebp]
	push	edx
	mov	eax, DWORD PTR tv1052[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	add	ecx, 100				; 00000064H
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_spreading_decision
	add	esp, 40					; 00000028H
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+80], eax
$LN60@celt_encod:
; Line 1827
	push	5
	push	OFFSET _spread_icdf
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_icdf
	add	esp, 16					; 00000010H
$LN67@celt_encod:
; Line 1830
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1670[ebp], eax
	mov	eax, DWORD PTR tv1670[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1072[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1670[ebp]
	mov	ecx, DWORD PTR tv1072[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1072[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv1072[ebp]
	mov	DWORD PTR _offsets$[ebp], edx
; Line 1834
	mov	eax, DWORD PTR _surround_dynalloc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	lea	eax, DWORD PTR _tot_boost$[ebp]
	push	eax
	mov	ecx, DWORD PTR _effectiveBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _LM$[ebp]
	push	edx
	mov	eax, DWORD PTR _eBands$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _isTransient$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _offsets$[ebp]
	push	ecx
	mov	edx, DWORD PTR _C$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nbEBands$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandLogE2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	push	ecx
	call	_dynalloc_analysis
	add	esp, 72					; 00000048H
	fstp	DWORD PTR _maxDepth$[ebp]
; Line 1836
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN59@celt_encod
; Line 1837
	mov	eax, DWORD PTR _effectiveBytes$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	cmp	eax, 8
	jle	SHORT $LN252@celt_encod
	mov	DWORD PTR tv1104[ebp], 8
	jmp	SHORT $LN253@celt_encod
$LN252@celt_encod:
	mov	eax, DWORD PTR _effectiveBytes$[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR tv1104[ebp], eax
$LN253@celt_encod:
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _offsets$[ebp]
	mov	edx, DWORD PTR tv1104[ebp]
	mov	DWORD PTR [ecx+eax], edx
$LN59@celt_encod:
; Line 1838
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1675[ebp], eax
	mov	eax, DWORD PTR tv1675[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1108[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1675[ebp]
	mov	ecx, DWORD PTR tv1108[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1108[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv1108[ebp]
	mov	DWORD PTR _cap$[ebp], edx
; Line 1839
	mov	eax, DWORD PTR _C$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cap$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_init_caps
	add	esp, 16					; 00000010H
; Line 1841
	mov	DWORD PTR _dynalloc_logp$[ebp], 6
; Line 1842
	mov	ecx, DWORD PTR _total_bits$[ebp]
	shl	ecx, 3
	mov	DWORD PTR _total_bits$[ebp], ecx
; Line 1843
	mov	DWORD PTR _total_boost$[ebp], 0
; Line 1844
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_tell_frac
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
; Line 1845
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN58@celt_encod
$LN57@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN58@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	$LN56@celt_encod
; Line 1851
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _eBands$[ebp]
	movsx	edx, WORD PTR [ecx+eax*2+2]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _eBands$[ebp]
	movsx	eax, WORD PTR [ecx+eax*2]
	sub	edx, eax
	imul	edx, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _LM$[ebp]
	shl	edx, cl
	mov	DWORD PTR _width$14[ebp], edx
; Line 1854
	cmp	DWORD PTR _width$14[ebp], 48		; 00000030H
	jge	SHORT $LN254@celt_encod
	mov	DWORD PTR tv1130[ebp], 48		; 00000030H
	jmp	SHORT $LN255@celt_encod
$LN254@celt_encod:
	mov	ecx, DWORD PTR _width$14[ebp]
	mov	DWORD PTR tv1130[ebp], ecx
$LN255@celt_encod:
	mov	edx, DWORD PTR _width$14[ebp]
	shl	edx, 3
	cmp	edx, DWORD PTR tv1130[ebp]
	jge	SHORT $LN258@celt_encod
	mov	eax, DWORD PTR _width$14[ebp]
	shl	eax, 3
	mov	DWORD PTR tv1135[ebp], eax
	jmp	SHORT $LN259@celt_encod
$LN258@celt_encod:
	cmp	DWORD PTR _width$14[ebp], 48		; 00000030H
	jge	SHORT $LN256@celt_encod
	mov	DWORD PTR tv1134[ebp], 48		; 00000030H
	jmp	SHORT $LN257@celt_encod
$LN256@celt_encod:
	mov	ecx, DWORD PTR _width$14[ebp]
	mov	DWORD PTR tv1134[ebp], ecx
$LN257@celt_encod:
	mov	edx, DWORD PTR tv1134[ebp]
	mov	DWORD PTR tv1135[ebp], edx
$LN259@celt_encod:
	mov	eax, DWORD PTR tv1135[ebp]
	mov	DWORD PTR _quanta$13[ebp], eax
; Line 1855
	mov	ecx, DWORD PTR _dynalloc_logp$[ebp]
	mov	DWORD PTR _dynalloc_loop_logp$12[ebp], ecx
; Line 1856
	mov	DWORD PTR _boost$11[ebp], 0
; Line 1858
	mov	DWORD PTR _j$10[ebp], 0
	jmp	SHORT $LN55@celt_encod
$LN54@celt_encod:
	mov	edx, DWORD PTR _j$10[ebp]
	add	edx, 1
	mov	DWORD PTR _j$10[ebp], edx
$LN55@celt_encod:
	mov	eax, DWORD PTR _dynalloc_loop_logp$12[ebp]
	mov	ecx, DWORD PTR _tell$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _total_bits$[ebp]
	sub	eax, DWORD PTR _total_boost$[ebp]
	cmp	edx, eax
	jge	$LN53@celt_encod
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _cap$[ebp]
	mov	eax, DWORD PTR _boost$11[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jge	$LN53@celt_encod
; Line 1861
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _offsets$[ebp]
	mov	eax, DWORD PTR _j$10[ebp]
	cmp	eax, DWORD PTR [edx+ecx*4]
	jge	SHORT $LN260@celt_encod
	mov	DWORD PTR tv1147[ebp], 1
	jmp	SHORT $LN261@celt_encod
$LN260@celt_encod:
	mov	DWORD PTR tv1147[ebp], 0
$LN261@celt_encod:
	mov	ecx, DWORD PTR tv1147[ebp]
	mov	DWORD PTR _flag$9[ebp], ecx
; Line 1862
	mov	edx, DWORD PTR _dynalloc_loop_logp$12[ebp]
	push	edx
	mov	eax, DWORD PTR _flag$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_bit_logp
	add	esp, 12					; 0000000cH
; Line 1863
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_tell_frac
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
; Line 1864
	cmp	DWORD PTR _flag$9[ebp], 0
	jne	SHORT $LN52@celt_encod
; Line 1865
	jmp	SHORT $LN53@celt_encod
$LN52@celt_encod:
; Line 1866
	mov	eax, DWORD PTR _boost$11[ebp]
	add	eax, DWORD PTR _quanta$13[ebp]
	mov	DWORD PTR _boost$11[ebp], eax
; Line 1867
	mov	ecx, DWORD PTR _total_boost$[ebp]
	add	ecx, DWORD PTR _quanta$13[ebp]
	mov	DWORD PTR _total_boost$[ebp], ecx
; Line 1868
	mov	DWORD PTR _dynalloc_loop_logp$12[ebp], 1
; Line 1869
	jmp	$LN54@celt_encod
$LN53@celt_encod:
; Line 1871
	cmp	DWORD PTR _j$10[ebp], 0
	je	SHORT $LN51@celt_encod
; Line 1872
	mov	edx, DWORD PTR _dynalloc_logp$[ebp]
	sub	edx, 1
	cmp	edx, 2
	jge	SHORT $LN262@celt_encod
	mov	DWORD PTR tv1160[ebp], 2
	jmp	SHORT $LN263@celt_encod
$LN262@celt_encod:
	mov	eax, DWORD PTR _dynalloc_logp$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv1160[ebp], eax
$LN263@celt_encod:
	mov	ecx, DWORD PTR tv1160[ebp]
	mov	DWORD PTR _dynalloc_logp$[ebp], ecx
$LN51@celt_encod:
; Line 1873
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _offsets$[ebp]
	mov	ecx, DWORD PTR _boost$11[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 1874
	jmp	$LN57@celt_encod
$LN56@celt_encod:
; Line 1876
	cmp	DWORD PTR _C$[ebp], 2
	jne	$LN50@celt_encod
; Line 1885
	cmp	DWORD PTR _LM$[ebp], 0
	je	SHORT $LN49@celt_encod
; Line 1886
	mov	edx, DWORD PTR _N$[ebp]
	push	edx
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _X$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_stereo_analysis
	add	esp, 16					; 00000010H
	mov	DWORD PTR _dual_stereo$[ebp], eax
$LN49@celt_encod:
; Line 1889
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	push	21					; 00000015H
	push	OFFSET ?intensity_histeresis@?DN@??celt_encode_with_ec@@9@9
	push	OFFSET ?intensity_thresholds@?DN@??celt_encode_with_ec@@9@9
	mov	eax, DWORD PTR _equiv_rate$[ebp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_hysteresis_decision
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+188], eax
; Line 1890
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	cmp	ecx, DWORD PTR [eax+188]
	jle	SHORT $LN264@celt_encod
	mov	edx, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv1184[ebp], edx
	jmp	SHORT $LN265@celt_encod
$LN264@celt_encod:
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	mov	DWORD PTR tv1184[ebp], ecx
$LN265@celt_encod:
	mov	edx, DWORD PTR _end$[ebp]
	cmp	edx, DWORD PTR tv1184[ebp]
	jge	SHORT $LN268@celt_encod
	mov	eax, DWORD PTR _end$[ebp]
	mov	DWORD PTR tv1190[ebp], eax
	jmp	SHORT $LN269@celt_encod
$LN268@celt_encod:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _start$[ebp]
	cmp	edx, DWORD PTR [ecx+188]
	jle	SHORT $LN266@celt_encod
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR tv1189[ebp], eax
	jmp	SHORT $LN267@celt_encod
$LN266@celt_encod:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+188]
	mov	DWORD PTR tv1189[ebp], edx
$LN267@celt_encod:
	mov	eax, DWORD PTR tv1189[ebp]
	mov	DWORD PTR tv1190[ebp], eax
$LN269@celt_encod:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR tv1190[ebp]
	mov	DWORD PTR [ecx+188], edx
$LN50@celt_encod:
; Line 1893
	mov	DWORD PTR _alloc_trim$[ebp], 5
; Line 1894
	mov	eax, DWORD PTR _tell$[ebp]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _total_bits$[ebp]
	sub	ecx, DWORD PTR _total_boost$[ebp]
	cmp	eax, ecx
	jg	$LN48@celt_encod
; Line 1896
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN47@celt_encod
; Line 1897
	mov	DWORD PTR _alloc_trim$[ebp], 5
; Line 1898
	jmp	SHORT $LN46@celt_encod
$LN47@celt_encod:
; Line 1901
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _surround_trim$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _st$[ebp]
	add	ecx, 184				; 000000b8H
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	mov	eax, DWORD PTR _N$[ebp]
	push	eax
	mov	ecx, DWORD PTR _C$[ebp]
	push	ecx
	mov	edx, DWORD PTR _LM$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bandLogE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _X$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_alloc_trim_analysis
	add	esp, 52					; 00000034H
	mov	DWORD PTR _alloc_trim$[ebp], eax
$LN46@celt_encod:
; Line 1902
	push	7
	push	OFFSET _trim_icdf
	mov	ecx, DWORD PTR _alloc_trim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_icdf
	add	esp, 16					; 00000010H
; Line 1903
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell_frac
	add	esp, 4
	mov	DWORD PTR _tell$[ebp], eax
$LN48@celt_encod:
; Line 1907
	cmp	DWORD PTR _vbr_rate$[ebp], 0
	jle	$LN45@celt_encod
; Line 1914
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	sub	edx, DWORD PTR _LM$[ebp]
	mov	DWORD PTR _lm_diff$3[ebp], edx
; Line 1918
	mov	ecx, 3
	sub	ecx, DWORD PTR _LM$[ebp]
	mov	eax, 1275				; 000004fbH
	sar	eax, cl
	cmp	DWORD PTR _nbCompressedBytes$[ebp], eax
	jge	SHORT $LN270@celt_encod
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv1260[ebp], ecx
	jmp	SHORT $LN271@celt_encod
$LN270@celt_encod:
	mov	ecx, 3
	sub	ecx, DWORD PTR _LM$[ebp]
	mov	edx, 1275				; 000004fbH
	sar	edx, cl
	mov	DWORD PTR tv1260[ebp], edx
$LN271@celt_encod:
	mov	eax, DWORD PTR tv1260[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], eax
; Line 1919
	imul	ecx, DWORD PTR _C$[ebp], 40
	lea	edx, DWORD PTR [ecx*8+160]
	mov	eax, DWORD PTR _vbr_rate$[ebp]
	sub	eax, edx
	mov	DWORD PTR _base_target$5[ebp], eax
; Line 1921
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN44@celt_encod
; Line 1922
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _lm_diff$3[ebp]
	sar	eax, cl
	add	eax, DWORD PTR _base_target$5[ebp]
	mov	DWORD PTR _base_target$5[ebp], eax
$LN44@celt_encod:
; Line 1928
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN272@celt_encod
	mov	DWORD PTR tv1275[ebp], 1
	jmp	SHORT $LN273@celt_encod
$LN272@celt_encod:
	mov	DWORD PTR tv1275[ebp], 0
$LN273@celt_encod:
	push	ecx
	movss	xmm0, DWORD PTR _temporal_vbr$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _surround_masking$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR tv1275[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _maxDepth$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pitch_change$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _tf_estimate$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _tot_boost$[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+184]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+188]
	push	ecx
	mov	edx, DWORD PTR _C$[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	push	ecx
	mov	edx, DWORD PTR _equiv_rate$[ebp]
	push	edx
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _base_target$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 120				; 00000078H
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_compute_vbr
	add	esp, 76					; 0000004cH
	mov	DWORD PTR _target$6[ebp], eax
; Line 1932
	mov	ecx, DWORD PTR _target$6[ebp]
	add	ecx, DWORD PTR _tell$[ebp]
	mov	DWORD PTR _target$6[ebp], ecx
; Line 1937
	mov	edx, DWORD PTR _total_boost$[ebp]
	mov	eax, DWORD PTR _tell$[ebp]
	lea	ecx, DWORD PTR [eax+edx+63]
	sar	ecx, 6
	add	ecx, 2
	sub	ecx, DWORD PTR _nbFilledBytes$[ebp]
	mov	DWORD PTR _min_allowed$4[ebp], ecx
; Line 1939
	mov	edx, DWORD PTR _target$6[ebp]
	add	edx, 32					; 00000020H
	sar	edx, 6
	mov	DWORD PTR _nbAvailableBytes$[ebp], edx
; Line 1940
	mov	eax, DWORD PTR _min_allowed$4[ebp]
	cmp	eax, DWORD PTR _nbAvailableBytes$[ebp]
	jle	SHORT $LN274@celt_encod
	mov	ecx, DWORD PTR _min_allowed$4[ebp]
	mov	DWORD PTR tv1310[ebp], ecx
	jmp	SHORT $LN275@celt_encod
$LN274@celt_encod:
	mov	edx, DWORD PTR _nbAvailableBytes$[ebp]
	mov	DWORD PTR tv1310[ebp], edx
$LN275@celt_encod:
	mov	eax, DWORD PTR tv1310[ebp]
	mov	DWORD PTR _nbAvailableBytes$[ebp], eax
; Line 1941
	mov	ecx, DWORD PTR _nbAvailableBytes$[ebp]
	add	ecx, DWORD PTR _nbFilledBytes$[ebp]
	cmp	DWORD PTR _nbCompressedBytes$[ebp], ecx
	jge	SHORT $LN276@celt_encod
	mov	edx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv1314[ebp], edx
	jmp	SHORT $LN277@celt_encod
$LN276@celt_encod:
	mov	eax, DWORD PTR _nbAvailableBytes$[ebp]
	add	eax, DWORD PTR _nbFilledBytes$[ebp]
	mov	DWORD PTR tv1314[ebp], eax
$LN277@celt_encod:
	mov	ecx, DWORD PTR tv1314[ebp]
	sub	ecx, DWORD PTR _nbFilledBytes$[ebp]
	mov	DWORD PTR _nbAvailableBytes$[ebp], ecx
; Line 1944
	mov	edx, DWORD PTR _target$6[ebp]
	sub	edx, DWORD PTR _vbr_rate$[ebp]
	mov	DWORD PTR _delta$7[ebp], edx
; Line 1946
	mov	eax, DWORD PTR _nbAvailableBytes$[ebp]
	shl	eax, 6
	mov	DWORD PTR _target$6[ebp], eax
; Line 1953
	cmp	DWORD PTR _silence$[ebp], 0
	je	SHORT $LN43@celt_encod
; Line 1955
	mov	DWORD PTR _nbAvailableBytes$[ebp], 2
; Line 1956
	mov	DWORD PTR _target$6[ebp], 128		; 00000080H
; Line 1957
	mov	DWORD PTR _delta$7[ebp], 0
$LN43@celt_encod:
; Line 1960
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+176], 970		; 000003caH
	jge	SHORT $LN42@celt_encod
; Line 1962
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+176]
	add	eax, 1
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+176], eax
; Line 1963
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+176]
	add	eax, 20					; 00000014H
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movss	DWORD PTR _alpha$8[ebp], xmm1
; Line 1964
	jmp	SHORT $LN41@celt_encod
$LN42@celt_encod:
; Line 1965
	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR _alpha$8[ebp], xmm0
$LN41@celt_encod:
; Line 1967
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN40@celt_encod
; Line 1968
	mov	edx, DWORD PTR _target$6[ebp]
	sub	edx, DWORD PTR _vbr_rate$[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	add	edx, DWORD PTR [eax+164]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+164], edx
$LN40@celt_encod:
; Line 1972
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN39@celt_encod
; Line 1974
	mov	eax, 1
	mov	ecx, DWORD PTR _lm_diff$3[ebp]
	shl	eax, cl
	imul	eax, DWORD PTR _delta$7[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [ecx+172]
	mov	edx, DWORD PTR _st$[ebp]
	sub	eax, DWORD PTR [edx+168]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _alpha$8[ebp]
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR _st$[ebp]
	add	eax, DWORD PTR [ecx+168]
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+168], eax
; Line 1975
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	neg	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+172], ecx
$LN39@celt_encod:
; Line 1979
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN38@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	jge	SHORT $LN38@celt_encod
; Line 1982
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+164]
	neg	eax
	cdq
	and	edx, 63					; 0000003fH
	add	eax, edx
	sar	eax, 6
	mov	DWORD PTR _adjust$2[ebp], eax
; Line 1984
	cmp	DWORD PTR _silence$[ebp], 0
	je	SHORT $LN278@celt_encod
	mov	DWORD PTR tv1362[ebp], 0
	jmp	SHORT $LN279@celt_encod
$LN278@celt_encod:
	mov	eax, DWORD PTR _adjust$2[ebp]
	mov	DWORD PTR tv1362[ebp], eax
$LN279@celt_encod:
	mov	ecx, DWORD PTR _nbAvailableBytes$[ebp]
	add	ecx, DWORD PTR tv1362[ebp]
	mov	DWORD PTR _nbAvailableBytes$[ebp], ecx
; Line 1985
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+164], 0
$LN38@celt_encod:
; Line 1988
	mov	eax, DWORD PTR _nbAvailableBytes$[ebp]
	add	eax, DWORD PTR _nbFilledBytes$[ebp]
	cmp	DWORD PTR _nbCompressedBytes$[ebp], eax
	jge	SHORT $LN280@celt_encod
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	mov	DWORD PTR tv1368[ebp], ecx
	jmp	SHORT $LN281@celt_encod
$LN280@celt_encod:
	mov	edx, DWORD PTR _nbAvailableBytes$[ebp]
	add	edx, DWORD PTR _nbFilledBytes$[ebp]
	mov	DWORD PTR tv1368[ebp], edx
$LN281@celt_encod:
	mov	eax, DWORD PTR tv1368[ebp]
	mov	DWORD PTR _nbCompressedBytes$[ebp], eax
; Line 1991
	mov	ecx, DWORD PTR _nbCompressedBytes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_shrink
	add	esp, 8
$LN45@celt_encod:
; Line 1995
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1680[ebp], eax
	mov	eax, DWORD PTR tv1680[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1374[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1680[ebp]
	mov	ecx, DWORD PTR tv1374[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1374[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv1374[ebp]
	mov	DWORD PTR _fine_quant$[ebp], edx
; Line 1996
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1685[ebp], eax
	mov	eax, DWORD PTR tv1685[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1378[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1685[ebp]
	mov	ecx, DWORD PTR tv1378[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1378[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv1378[ebp]
	mov	DWORD PTR _pulses$[ebp], edx
; Line 1997
	mov	eax, DWORD PTR _nbEBands$[ebp]
	shl	eax, 2
	add	eax, 36					; 00000024H
	mov	DWORD PTR tv1690[ebp], eax
	mov	eax, DWORD PTR tv1690[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1382[ebp], esp
	lea	ecx, DWORD PTR __$AllocaPad$$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1690[ebp]
	mov	ecx, DWORD PTR tv1382[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1382[ebp], 32		; 00000020H
	mov	edx, DWORD PTR tv1382[ebp]
	mov	DWORD PTR _fine_priority$[ebp], edx
; Line 2000
	mov	esi, DWORD PTR _nbCompressedBytes$[ebp]
	shl	esi, 3
	shl	esi, 3
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_tell_frac
	add	esp, 4
	sub	esi, eax
	sub	esi, 1
	mov	DWORD PTR _bits$[ebp], esi
; Line 2001
	cmp	DWORD PTR _isTransient$[ebp], 0
	je	SHORT $LN282@celt_encod
	cmp	DWORD PTR _LM$[ebp], 2
	jl	SHORT $LN282@celt_encod
	mov	ecx, DWORD PTR _LM$[ebp]
	lea	edx, DWORD PTR [ecx*8+16]
	cmp	DWORD PTR _bits$[ebp], edx
	jl	SHORT $LN282@celt_encod
	mov	DWORD PTR tv1394[ebp], 8
	jmp	SHORT $LN283@celt_encod
$LN282@celt_encod:
	mov	DWORD PTR tv1394[ebp], 0
$LN283@celt_encod:
	mov	eax, DWORD PTR tv1394[ebp]
	mov	DWORD PTR _anti_collapse_rsv$[ebp], eax
; Line 2002
	mov	ecx, DWORD PTR _bits$[ebp]
	sub	ecx, DWORD PTR _anti_collapse_rsv$[ebp]
	mov	DWORD PTR _bits$[ebp], ecx
; Line 2003
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	mov	DWORD PTR _signalBandwidth$[ebp], edx
; Line 2005
	mov	eax, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	$LN37@celt_encod
; Line 2008
	imul	ecx, DWORD PTR _C$[ebp], 32000
	cmp	DWORD PTR _equiv_rate$[ebp], ecx
	jge	SHORT $LN36@celt_encod
; Line 2009
	mov	DWORD PTR _min_bandwidth$1[ebp], 13	; 0000000dH
	jmp	SHORT $LN29@celt_encod
$LN36@celt_encod:
; Line 2010
	imul	edx, DWORD PTR _C$[ebp], 48000
	cmp	DWORD PTR _equiv_rate$[ebp], edx
	jge	SHORT $LN34@celt_encod
; Line 2011
	mov	DWORD PTR _min_bandwidth$1[ebp], 16	; 00000010H
	jmp	SHORT $LN29@celt_encod
$LN34@celt_encod:
; Line 2012
	imul	eax, DWORD PTR _C$[ebp], 60000
	cmp	DWORD PTR _equiv_rate$[ebp], eax
	jge	SHORT $LN32@celt_encod
; Line 2013
	mov	DWORD PTR _min_bandwidth$1[ebp], 18	; 00000012H
	jmp	SHORT $LN29@celt_encod
$LN32@celt_encod:
; Line 2014
	imul	ecx, DWORD PTR _C$[ebp], 80000
	cmp	DWORD PTR _equiv_rate$[ebp], ecx
	jge	SHORT $LN30@celt_encod
; Line 2015
	mov	DWORD PTR _min_bandwidth$1[ebp], 19	; 00000013H
; Line 2016
	jmp	SHORT $LN29@celt_encod
$LN30@celt_encod:
; Line 2017
	mov	DWORD PTR _min_bandwidth$1[ebp], 20	; 00000014H
$LN29@celt_encod:
; Line 2018
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+144]
	cmp	eax, DWORD PTR _min_bandwidth$1[ebp]
	jle	SHORT $LN284@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	DWORD PTR tv1410[ebp], edx
	jmp	SHORT $LN285@celt_encod
$LN284@celt_encod:
	mov	eax, DWORD PTR _min_bandwidth$1[ebp]
	mov	DWORD PTR tv1410[ebp], eax
$LN285@celt_encod:
	mov	ecx, DWORD PTR tv1410[ebp]
	mov	DWORD PTR _signalBandwidth$[ebp], ecx
$LN37@celt_encod:
; Line 2021
	mov	edx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN28@celt_encod
; Line 2022
	mov	DWORD PTR _signalBandwidth$[ebp], 1
$LN28@celt_encod:
; Line 2025
	mov	eax, DWORD PTR _signalBandwidth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	push	1
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LM$[ebp]
	push	ecx
	mov	edx, DWORD PTR _C$[ebp]
	push	edx
	mov	eax, DWORD PTR _fine_priority$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fine_quant$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pulses$[ebp]
	push	edx
	lea	eax, DWORD PTR _balance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bits$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dual_stereo$[ebp]
	push	edx
	mov	eax, DWORD PTR _st$[ebp]
	add	eax, 188				; 000000bcH
	push	eax
	mov	ecx, DWORD PTR _alloc_trim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cap$[ebp]
	push	edx
	mov	eax, DWORD PTR _offsets$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	call	_compute_allocation
	add	esp, 76					; 0000004cH
	mov	DWORD PTR _codedBands$[ebp], eax
; Line 2026
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	$LN27@celt_encod
; Line 2027
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+92]
	sub	eax, 1
	cmp	eax, DWORD PTR _codedBands$[ebp]
	jle	SHORT $LN286@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	sub	edx, 1
	mov	DWORD PTR tv1445[ebp], edx
	jmp	SHORT $LN287@celt_encod
$LN286@celt_encod:
	mov	eax, DWORD PTR _codedBands$[ebp]
	mov	DWORD PTR tv1445[ebp], eax
$LN287@celt_encod:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	add	edx, 1
	cmp	edx, DWORD PTR tv1445[ebp]
	jge	SHORT $LN290@celt_encod
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	add	ecx, 1
	mov	DWORD PTR tv1455[ebp], ecx
	jmp	SHORT $LN291@celt_encod
$LN290@celt_encod:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+92]
	sub	eax, 1
	cmp	eax, DWORD PTR _codedBands$[ebp]
	jle	SHORT $LN288@celt_encod
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	sub	edx, 1
	mov	DWORD PTR tv1454[ebp], edx
	jmp	SHORT $LN289@celt_encod
$LN288@celt_encod:
	mov	eax, DWORD PTR _codedBands$[ebp]
	mov	DWORD PTR tv1454[ebp], eax
$LN289@celt_encod:
	mov	ecx, DWORD PTR tv1454[ebp]
	mov	DWORD PTR tv1455[ebp], ecx
$LN291@celt_encod:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR tv1455[ebp]
	mov	DWORD PTR [edx+92], eax
; Line 2028
	jmp	SHORT $LN26@celt_encod
$LN27@celt_encod:
; Line 2029
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _codedBands$[ebp]
	mov	DWORD PTR [ecx+92], edx
$LN26@celt_encod:
; Line 2031
	mov	eax, DWORD PTR _C$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fine_quant$[ebp]
	push	edx
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldBandE$[ebp]
	push	ecx
	mov	edx, DWORD PTR _end$[ebp]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_quant_fine_energy
	add	esp, 32					; 00000020H
; Line 2034
	mov	edx, DWORD PTR _C$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, 36					; 00000024H
	mov	DWORD PTR tv1695[ebp], edx
	mov	eax, DWORD PTR tv1695[ebp]
	call	__alloca_probe_16
	mov	DWORD PTR tv1468[ebp], esp
	lea	eax, DWORD PTR __$AllocaPad$$[ebp]
	push	eax
	mov	edx, DWORD PTR tv1695[ebp]
	mov	ecx, DWORD PTR tv1468[ebp]
	call	@_RTC_AllocaHelper@12
	add	DWORD PTR tv1468[ebp], 32		; 00000020H
	mov	ecx, DWORD PTR tv1468[ebp]
	mov	DWORD PTR _collapse_masks$[ebp], ecx
; Line 2038
	cmp	DWORD PTR _C$[ebp], 2
	jne	SHORT $LN292@celt_encod
	mov	edx, DWORD PTR _N$[ebp]
	mov	eax, DWORD PTR _X$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR tv1493[ebp], ecx
	jmp	SHORT $LN293@celt_encod
$LN292@celt_encod:
	mov	DWORD PTR tv1493[ebp], 0
$LN293@celt_encod:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _codedBands$[ebp]
	push	edx
	mov	eax, DWORD PTR _LM$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _balance$[ebp]
	push	edx
	mov	eax, DWORD PTR _nbCompressedBytes$[ebp]
	shl	eax, 6
	sub	eax, DWORD PTR _anti_collapse_rsv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tf_res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	mov	ecx, DWORD PTR _dual_stereo$[ebp]
	push	ecx
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	mov	ecx, DWORD PTR _shortBlocks$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pulses$[ebp]
	push	edx
	mov	eax, DWORD PTR _bandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _collapse_masks$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv1493[ebp]
	push	edx
	mov	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	push	1
	call	_quant_all_bands
	add	esp, 84					; 00000054H
; Line 2040
	cmp	DWORD PTR _anti_collapse_rsv$[ebp], 0
	jle	SHORT $LN25@celt_encod
; Line 2042
	mov	ecx, DWORD PTR _st$[ebp]
	cmp	DWORD PTR [ecx+116], 2
	jge	SHORT $LN294@celt_encod
	mov	DWORD PTR tv1503[ebp], 1
	jmp	SHORT $LN295@celt_encod
$LN294@celt_encod:
	mov	DWORD PTR tv1503[ebp], 0
$LN295@celt_encod:
	mov	edx, DWORD PTR tv1503[ebp]
	mov	DWORD PTR _anti_collapse_on$[ebp], edx
; Line 2046
	push	1
	mov	eax, DWORD PTR _anti_collapse_on$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_enc_bits
	add	esp, 12					; 0000000cH
$LN25@celt_encod:
; Line 2048
	mov	edx, DWORD PTR _C$[ebp]
	push	edx
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	mov	esi, DWORD PTR _nbCompressedBytes$[ebp]
	shl	esi, 3
	mov	ecx, DWORD PTR _enc$[ebp]
	push	ecx
	call	_ec_tell
	add	esp, 4
	sub	esi, eax
	push	esi
	mov	edx, DWORD PTR _fine_priority$[ebp]
	push	edx
	mov	eax, DWORD PTR _fine_quant$[ebp]
	push	eax
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldBandE$[ebp]
	push	edx
	mov	eax, DWORD PTR _end$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	call	_quant_energy_finalise
	add	esp, 40					; 00000028H
; Line 2050
	cmp	DWORD PTR _silence$[ebp], 0
	je	SHORT $LN21@celt_encod
; Line 2052
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@celt_encod
$LN22@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@celt_encod:
	mov	ecx, DWORD PTR _C$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	cmp	DWORD PTR _i$[ebp], ecx
	jge	SHORT $LN21@celt_encod
; Line 2053
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _oldBandE$[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [eax+edx*4], xmm0
	jmp	SHORT $LN22@celt_encod
$LN21@celt_encod:
; Line 2098
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _pitch_index$[ebp]
	mov	DWORD PTR [ecx+104], edx
; Line 2099
	mov	eax, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR _gain1$[ebp]
	movss	DWORD PTR [eax+108], xmm0
; Line 2100
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _prefilter_tapset$[ebp]
	mov	DWORD PTR [ecx+112], edx
; Line 2110
	cmp	DWORD PTR _CC$[ebp], 2
	jne	SHORT $LN20@celt_encod
	cmp	DWORD PTR _C$[ebp], 1
	jne	SHORT $LN20@celt_encod
; Line 2111
	mov	eax, DWORD PTR _nbEBands$[ebp]
	mov	ecx, DWORD PTR _oldBandE$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	sub	edx, DWORD PTR _oldBandE$[ebp]
	sar	edx, 2
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _oldBandE$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nbEBands$[ebp]
	mov	edx, DWORD PTR _oldBandE$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN20@celt_encod:
; Line 2114
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	SHORT $LN19@celt_encod
; Line 2116
	mov	ecx, DWORD PTR _CC$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	mov	edx, DWORD PTR _oldLogE2$[ebp]
	sub	edx, DWORD PTR _oldLogE$[ebp]
	sar	edx, 2
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _oldLogE$[ebp]
	push	edx
	mov	eax, DWORD PTR _oldLogE2$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2117
	mov	ecx, DWORD PTR _CC$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	mov	edx, DWORD PTR _oldLogE$[ebp]
	sub	edx, DWORD PTR _oldBandE$[ebp]
	sar	edx, 2
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	mov	edx, DWORD PTR _oldBandE$[ebp]
	push	edx
	mov	eax, DWORD PTR _oldLogE$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 2118
	jmp	$LN15@celt_encod
$LN19@celt_encod:
; Line 2119
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN17@celt_encod
$LN16@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN17@celt_encod:
	mov	edx, DWORD PTR _CC$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	cmp	DWORD PTR _i$[ebp], edx
	jge	SHORT $LN15@celt_encod
; Line 2120
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldLogE$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _oldBandE$[ebp]
	movss	xmm0, DWORD PTR [esi+edx*4]
	comiss	xmm0, DWORD PTR [ecx+eax*4]
	jbe	SHORT $LN296@celt_encod
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldLogE$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	movss	DWORD PTR tv1581[ebp], xmm0
	jmp	SHORT $LN297@celt_encod
$LN296@celt_encod:
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _oldBandE$[ebp]
	movss	xmm0, DWORD PTR [eax+edx*4]
	movss	DWORD PTR tv1581[ebp], xmm0
$LN297@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _oldLogE$[ebp]
	movss	xmm0, DWORD PTR tv1581[ebp]
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	SHORT $LN16@celt_encod
$LN15@celt_encod:
; Line 2123
	mov	DWORD PTR _c$[ebp], 0
$LN14@celt_encod:
; Line 2125
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@celt_encod
$LN10@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _start$[ebp]
	jge	SHORT $LN9@celt_encod
; Line 2127
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _oldBandE$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 2128
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _oldLogE2$[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [edx+ecx*4], xmm0
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldLogE$[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 2129
	jmp	SHORT $LN10@celt_encod
$LN9@celt_encod:
; Line 2130
	mov	edx, DWORD PTR _end$[ebp]
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN8@celt_encod
$LN7@celt_encod:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@celt_encod:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nbEBands$[ebp]
	jge	SHORT $LN6@celt_encod
; Line 2132
	mov	edx, DWORD PTR _c$[ebp]
	imul	edx, DWORD PTR _nbEBands$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _oldBandE$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+edx*4], xmm0
; Line 2133
	mov	ecx, DWORD PTR _c$[ebp]
	imul	ecx, DWORD PTR _nbEBands$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _oldLogE2$[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [edx+ecx*4], xmm0
	mov	eax, DWORD PTR _c$[ebp]
	imul	eax, DWORD PTR _nbEBands$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _oldLogE$[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [ecx+eax*4], xmm0
; Line 2134
	jmp	SHORT $LN7@celt_encod
$LN6@celt_encod:
; Line 2135
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, 1
	mov	DWORD PTR _c$[ebp], edx
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _CC$[ebp]
	jl	$LN14@celt_encod
; Line 2137
	cmp	DWORD PTR _isTransient$[ebp], 0
	jne	SHORT $LN4@celt_encod
	cmp	DWORD PTR _transient_got_disabled$[ebp], 0
	je	SHORT $LN5@celt_encod
$LN4@celt_encod:
; Line 2138
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	add	edx, 1
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+116], edx
; Line 2139
	jmp	SHORT $LN3@celt_encod
$LN5@celt_encod:
; Line 2140
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+116], 0
$LN3@celt_encod:
; Line 2141
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _enc$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+76], ecx
; Line 2145
	mov	edx, DWORD PTR _enc$[ebp]
	push	edx
	call	_ec_enc_done
	add	esp, 4
; Line 2153
	mov	eax, DWORD PTR _enc$[ebp]
	push	eax
	call	_ec_get_error
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@celt_encod
; Line 2154
	mov	eax, -3					; fffffffdH
	jmp	SHORT $LN1@celt_encod
; Line 2155
	jmp	SHORT $LN1@celt_encod
$LN2@celt_encod:
; Line 2156
	mov	eax, DWORD PTR _nbCompressedBytes$[ebp]
$LN1@celt_encod:
; Line 2157
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN310@celt_encod
	push	DWORD PTR __$AllocaPad$$[ebp]
	call	@_RTC_CheckStackVars2@12
	pop	eax
	pop	edx
	lea	esp, DWORD PTR [ebp-960]
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN310@celt_encod:
	DD	11					; 0000000bH
	DD	$LN309@celt_encod
$LN309@celt_encod:
	DD	-72					; ffffffb8H
	DD	48					; 00000030H
	DD	$LN298@celt_encod
	DD	-208					; ffffff30H
	DD	4
	DD	$LN299@celt_encod
	DD	-224					; ffffff20H
	DD	4
	DD	$LN300@celt_encod
	DD	-236					; ffffff14H
	DD	4
	DD	$LN301@celt_encod
	DD	-248					; ffffff08H
	DD	4
	DD	$LN302@celt_encod
	DD	-280					; fffffee8H
	DD	4
	DD	$LN303@celt_encod
	DD	-316					; fffffec4H
	DD	4
	DD	$LN304@celt_encod
	DD	-328					; fffffeb8H
	DD	4
	DD	$LN305@celt_encod
	DD	-344					; fffffea8H
	DD	4
	DD	$LN306@celt_encod
	DD	-436					; fffffe4cH
	DD	4
	DD	$LN307@celt_encod
	DD	-560					; fffffdd0H
	DD	4
	DD	$LN308@celt_encod
$LN308@celt_encod:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	36					; 00000024H
	DB	0
$LN307@celt_encod:
	DB	113					; 00000071H
	DB	103					; 00000067H
	DB	0
$LN306@celt_encod:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN305@celt_encod:
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN304@celt_encod:
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
$LN303@celt_encod:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN302@celt_encod:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	111					; 0000006fH
	DB	0
$LN301@celt_encod:
	DB	103					; 00000067H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	49					; 00000031H
	DB	0
$LN300@celt_encod:
	DB	112					; 00000070H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN299@celt_encod:
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN298@celt_encod:
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_celt_encode_with_ec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _celt_encoder_get_size
_TEXT	SEGMENT
_mode$ = -4						; size = 4
_channels$ = 8						; size = 4
_celt_encoder_get_size PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 130
	push	0
	push	960					; 000003c0H
	push	48000					; 0000bb80H
	call	_opus_custom_mode_create
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _mode$[ebp], eax
; Line 131
	mov	eax, DWORD PTR _channels$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	call	_opus_custom_encoder_get_size
	add	esp, 8
; Line 132
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_celt_encoder_get_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ec_tell
_TEXT	SEGMENT
__this$ = 8						; size = 4
_ec_tell PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\entcode.h
; Line 111
	push	ebp
	mov	ebp, esp
; Line 112
	mov	eax, DWORD PTR __this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_ec_bsr
	add	esp, 4
	neg	eax
	mov	edx, 1
	sub	edx, eax
	mov	eax, DWORD PTR __this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	sub	eax, edx
; Line 113
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_ec_tell ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ec_get_error
_TEXT	SEGMENT
__this$ = 8						; size = 4
_ec_get_error PROC					; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\entcode.h
; Line 101
	push	ebp
	mov	ebp, esp
; Line 102
	mov	eax, DWORD PTR __this$[ebp]
	mov	eax, DWORD PTR [eax+44]
; Line 103
	pop	ebp
	ret	0
_ec_get_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _ec_bsr
_TEXT	SEGMENT
_ret$ = -8						; size = 4
__x$ = 8						; size = 4
_ec_bsr	PROC						; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\ecintrin.h
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 58
	bsr	eax, DWORD PTR __x$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
; Line 59
	mov	eax, DWORD PTR _ret$[ebp]
; Line 60
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ec_bsr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@ec_bsr:
	DD	1
	DD	$LN4@ec_bsr
$LN4@ec_bsr:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@ec_bsr
$LN3@ec_bsr:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_ec_bsr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _opus_custom_encoder_ctl
_TEXT	SEGMENT
tv147 = -108						; size = 4
tv94 = -104						; size = 4
tv91 = -100						; size = 4
tv65 = -96						; size = 4
_value$1 = -92						; size = 4
_value$2 = -88						; size = 4
_value$3 = -84						; size = 4
_value$4 = -80						; size = 4
_info$5 = -76						; size = 4
_value$6 = -72						; size = 4
_oldLogE2$7 = -68					; size = 4
_oldLogE$8 = -64					; size = 4
_oldBandE$9 = -60					; size = 4
_i$10 = -56						; size = 4
_value$11 = -52						; size = 4
_value$12 = -48						; size = 4
_value$13 = -44						; size = 4
_value$14 = -40						; size = 4
_value$15 = -36						; size = 4
_value$16 = -32						; size = 4
_value$17 = -28						; size = 4
_value$18 = -24						; size = 4
_value$19 = -20						; size = 4
_value$20 = -16						; size = 4
_value$21 = -12						; size = 4
_value$22 = -8						; size = 4
_ap$ = -4						; size = 4
_st$ = 8						; size = 4
_request$ = 12						; size = 4
_opus_custom_encoder_ctl PROC				; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 2231
	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 2234
	lea	eax, DWORD PTR _request$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax
; Line 2235
	mov	ecx, DWORD PTR _request$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 10002		; 00002712H
	jg	SHORT $LN52@opus_custo
	cmp	DWORD PTR tv65[ebp], 10002		; 00002712H
	je	$LN32@opus_custo
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 4002				; 00000fa2H
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 38			; 00000026H
	ja	$LN1@opus_custo
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN53@opus_custo[eax]
	jmp	DWORD PTR $LN55@opus_custo[ecx*4]
$LN52@opus_custo:
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 10008				; 00002718H
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 18			; 00000012H
	ja	$LN1@opus_custo
	mov	eax, DWORD PTR tv65[ebp]
	movzx	ecx, BYTE PTR $LN54@opus_custo[eax]
	jmp	DWORD PTR $LN56@opus_custo[ecx*4]
$LN41@opus_custo:
; Line 2239
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$22[ebp], ecx
; Line 2240
	cmp	DWORD PTR _value$22[ebp], 0
	jl	SHORT $LN39@opus_custo
	cmp	DWORD PTR _value$22[ebp], 10		; 0000000aH
	jle	SHORT $LN40@opus_custo
$LN39@opus_custo:
; Line 2241
	jmp	$bad_arg$57
$LN40@opus_custo:
; Line 2242
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _value$22[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 2244
	jmp	$LN42@opus_custo
$LN38@opus_custo:
; Line 2247
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _value$21[ebp], eax
; Line 2248
	cmp	DWORD PTR _value$21[ebp], 0
	jl	SHORT $LN36@opus_custo
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _value$21[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jl	SHORT $LN37@opus_custo
$LN36@opus_custo:
; Line 2249
	jmp	$bad_arg$57
$LN37@opus_custo:
; Line 2250
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _value$21[ebp]
	mov	DWORD PTR [ecx+32], edx
; Line 2252
	jmp	$LN42@opus_custo
$LN35@opus_custo:
; Line 2255
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$20[ebp], edx
; Line 2256
	cmp	DWORD PTR _value$20[ebp], 1
	jl	SHORT $LN33@opus_custo
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _value$20[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jle	SHORT $LN34@opus_custo
$LN33@opus_custo:
; Line 2257
	jmp	$bad_arg$57
$LN34@opus_custo:
; Line 2258
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _value$20[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 2260
	jmp	$LN42@opus_custo
$LN32@opus_custo:
; Line 2263
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$19[ebp], ecx
; Line 2264
	cmp	DWORD PTR _value$19[ebp], 0
	jl	SHORT $LN30@opus_custo
	cmp	DWORD PTR _value$19[ebp], 2
	jle	SHORT $LN31@opus_custo
$LN30@opus_custo:
; Line 2265
	jmp	$bad_arg$57
$LN31@opus_custo:
; Line 2266
	cmp	DWORD PTR _value$19[ebp], 1
	jg	SHORT $LN46@opus_custo
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN47@opus_custo
$LN46@opus_custo:
	mov	DWORD PTR tv91[ebp], 0
$LN47@opus_custo:
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR tv91[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 2267
	cmp	DWORD PTR _value$19[ebp], 0
	jne	SHORT $LN48@opus_custo
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN49@opus_custo
$LN48@opus_custo:
	mov	DWORD PTR tv94[ebp], 0
$LN49@opus_custo:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR tv94[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 2269
	jmp	$LN42@opus_custo
$LN29@opus_custo:
; Line 2272
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$18[ebp], edx
; Line 2273
	cmp	DWORD PTR _value$18[ebp], 0
	jl	SHORT $LN27@opus_custo
	cmp	DWORD PTR _value$18[ebp], 100		; 00000064H
	jle	SHORT $LN28@opus_custo
$LN27@opus_custo:
; Line 2274
	jmp	$bad_arg$57
$LN28@opus_custo:
; Line 2275
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _value$18[ebp]
	mov	DWORD PTR [eax+56], ecx
; Line 2277
	jmp	$LN42@opus_custo
$LN26@opus_custo:
; Line 2280
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$17[ebp], ecx
; Line 2281
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _value$17[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 2283
	jmp	$LN42@opus_custo
$LN25@opus_custo:
; Line 2286
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _value$16[ebp], eax
; Line 2287
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _value$16[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 2289
	jmp	$LN42@opus_custo
$LN24@opus_custo:
; Line 2292
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$15[ebp], edx
; Line 2293
	cmp	DWORD PTR _value$15[ebp], 500		; 000001f4H
	jg	SHORT $LN23@opus_custo
	cmp	DWORD PTR _value$15[ebp], -1
	je	SHORT $LN23@opus_custo
; Line 2294
	jmp	$bad_arg$57
$LN23@opus_custo:
; Line 2295
	mov	eax, DWORD PTR _st$[ebp]
	imul	ecx, DWORD PTR [eax+4], 260000
	cmp	DWORD PTR _value$15[ebp], ecx
	jge	SHORT $LN50@opus_custo
	mov	edx, DWORD PTR _value$15[ebp]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN51@opus_custo
$LN50@opus_custo:
	mov	eax, DWORD PTR _st$[ebp]
	imul	ecx, DWORD PTR [eax+4], 260000
	mov	DWORD PTR tv147[ebp], ecx
$LN51@opus_custo:
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR _value$15[ebp], edx
; Line 2296
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _value$15[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 2298
	jmp	$LN42@opus_custo
$LN22@opus_custo:
; Line 2301
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$14[ebp], ecx
; Line 2302
	cmp	DWORD PTR _value$14[ebp], 1
	jl	SHORT $LN20@opus_custo
	cmp	DWORD PTR _value$14[ebp], 2
	jle	SHORT $LN21@opus_custo
$LN20@opus_custo:
; Line 2303
	jmp	$bad_arg$57
$LN21@opus_custo:
; Line 2304
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _value$14[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2306
	jmp	$LN42@opus_custo
$LN19@opus_custo:
; Line 2309
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _value$13[ebp], eax
; Line 2310
	cmp	DWORD PTR _value$13[ebp], 8
	jl	SHORT $LN17@opus_custo
	cmp	DWORD PTR _value$13[ebp], 24		; 00000018H
	jle	SHORT $LN18@opus_custo
$LN17@opus_custo:
; Line 2311
	jmp	$bad_arg$57
$LN18@opus_custo:
; Line 2312
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _value$13[ebp]
	mov	DWORD PTR [ecx+60], edx
; Line 2314
	jmp	$LN42@opus_custo
$LN16@opus_custo:
; Line 2317
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$12[ebp], edx
; Line 2318
	mov	eax, DWORD PTR _value$12[ebp]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax], edx
; Line 2320
	jmp	$LN42@opus_custo
$LN15@opus_custo:
; Line 2323
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$11[ebp], edx
; Line 2324
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _value$11[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 2326
	jmp	$LN42@opus_custo
$LN14@opus_custo:
; Line 2331
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1024				; 00000400H
	mov	edx, DWORD PTR _st$[ebp]
	imul	ecx, DWORD PTR [edx+4]
	mov	eax, DWORD PTR _st$[ebp]
	lea	ecx, DWORD PTR [eax+ecx*4+200]
	mov	DWORD PTR _oldBandE$9[ebp], ecx
; Line 2332
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _oldBandE$9[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _oldLogE$8[ebp], ecx
; Line 2333
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _oldLogE$8[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _oldLogE2$7[ebp], ecx
; Line 2336
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_opus_custom_encoder_get_size
	add	esp, 8
	mov	ecx, DWORD PTR _st$[ebp]
	add	ecx, 76					; 0000004cH
	sub	ecx, DWORD PTR _st$[ebp]
	sub	eax, ecx
	push	eax
	push	0
	mov	edx, DWORD PTR _st$[ebp]
	add	edx, 76					; 0000004cH
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 2337
	mov	DWORD PTR _i$10[ebp], 0
	jmp	SHORT $LN13@opus_custo
$LN12@opus_custo:
	mov	eax, DWORD PTR _i$10[ebp]
	add	eax, 1
	mov	DWORD PTR _i$10[ebp], eax
$LN13@opus_custo:
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, DWORD PTR [edx+8]
	cmp	DWORD PTR _i$10[ebp], ecx
	jge	SHORT $LN11@opus_custo
; Line 2338
	mov	edx, DWORD PTR _i$10[ebp]
	mov	eax, DWORD PTR _oldLogE2$7[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [eax+edx*4], xmm0
	mov	ecx, DWORD PTR _i$10[ebp]
	mov	edx, DWORD PTR _oldLogE$8[ebp]
	movss	xmm0, DWORD PTR __real@c1e00000
	movss	DWORD PTR [edx+ecx*4], xmm0
	jmp	SHORT $LN12@opus_custo
$LN11@opus_custo:
; Line 2339
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+172], 0
; Line 2340
	mov	ecx, DWORD PTR _st$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [ecx+84], xmm0
; Line 2341
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+80], 2
; Line 2342
	mov	eax, DWORD PTR _st$[ebp]
	mov	DWORD PTR [eax+88], 256			; 00000100H
; Line 2343
	mov	ecx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [ecx+96], 0
; Line 2344
	mov	edx, DWORD PTR _st$[ebp]
	mov	DWORD PTR [edx+100], 0
; Line 2346
	jmp	$LN42@opus_custo
$LN10@opus_custo:
; Line 2357
	mov	eax, DWORD PTR _ap$[ebp]
	add	eax, 4
	mov	DWORD PTR _ap$[ebp], eax
	mov	ecx, DWORD PTR _ap$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR _value$6[ebp], edx
; Line 2358
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR _value$6[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 2360
	jmp	$LN42@opus_custo
$LN9@opus_custo:
; Line 2363
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _info$5[ebp], ecx
; Line 2364
	cmp	DWORD PTR _info$5[ebp], 0
	je	SHORT $LN8@opus_custo
; Line 2365
	mov	eax, DWORD PTR _st$[ebp]
	add	eax, 120				; 00000078H
	sub	eax, DWORD PTR _info$5[ebp]
	cdq
	mov	ecx, 28					; 0000001cH
	idiv	ecx
	imul	edx, eax, 0
	add	edx, 28					; 0000001cH
	push	edx
	mov	eax, DWORD PTR _info$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _st$[ebp]
	add	ecx, 120				; 00000078H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@opus_custo:
; Line 2367
	jmp	$LN42@opus_custo
$LN7@opus_custo:
; Line 2370
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$4[ebp], ecx
; Line 2371
	cmp	DWORD PTR _value$4[ebp], 0
	jne	SHORT $LN6@opus_custo
; Line 2372
	jmp	SHORT $bad_arg$57
$LN6@opus_custo:
; Line 2373
	mov	edx, DWORD PTR _value$4[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 2375
	jmp	SHORT $LN42@opus_custo
$LN5@opus_custo:
; Line 2378
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$3[ebp], ecx
; Line 2379
	cmp	DWORD PTR _value$3[ebp], 0
	jne	SHORT $LN4@opus_custo
; Line 2380
	jmp	SHORT $bad_arg$57
$LN4@opus_custo:
; Line 2381
	mov	edx, DWORD PTR _value$3[ebp]
	mov	eax, DWORD PTR _st$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx], ecx
; Line 2383
	jmp	SHORT $LN42@opus_custo
$LN3@opus_custo:
; Line 2386
	mov	edx, DWORD PTR _ap$[ebp]
	add	edx, 4
	mov	DWORD PTR _ap$[ebp], edx
	mov	eax, DWORD PTR _ap$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	mov	DWORD PTR _value$2[ebp], ecx
; Line 2387
	mov	edx, DWORD PTR _st$[ebp]
	mov	eax, DWORD PTR _value$2[ebp]
	mov	DWORD PTR [edx+68], eax
; Line 2389
	jmp	SHORT $LN42@opus_custo
$LN2@opus_custo:
; Line 2392
	mov	ecx, DWORD PTR _ap$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ap$[ebp], ecx
	mov	edx, DWORD PTR _ap$[ebp]
	mov	eax, DWORD PTR [edx-4]
	mov	DWORD PTR _value$1[ebp], eax
; Line 2393
	mov	ecx, DWORD PTR _st$[ebp]
	mov	edx, DWORD PTR _value$1[ebp]
	mov	DWORD PTR [ecx+192], edx
; Line 2395
	jmp	SHORT $LN42@opus_custo
$LN1@opus_custo:
; Line 2397
	jmp	SHORT $bad_request$58
$LN42@opus_custo:
; Line 2399
	mov	DWORD PTR _ap$[ebp], 0
; Line 2400
	xor	eax, eax
	jmp	SHORT $LN44@opus_custo
$bad_arg$57:
; Line 2402
	mov	DWORD PTR _ap$[ebp], 0
; Line 2403
	or	eax, -1
	jmp	SHORT $LN44@opus_custo
$bad_request$58:
; Line 2405
	mov	DWORD PTR _ap$[ebp], 0
; Line 2406
	mov	eax, -5					; fffffffbH
$LN44@opus_custo:
; Line 2407
	pop	edi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN55@opus_custo:
	DD	$LN24@opus_custo
	DD	$LN25@opus_custo
	DD	$LN41@opus_custo
	DD	$LN29@opus_custo
	DD	$LN26@opus_custo
	DD	$LN14@opus_custo
	DD	$LN5@opus_custo
	DD	$LN19@opus_custo
	DD	$LN16@opus_custo
	DD	$LN15@opus_custo
	DD	$LN1@opus_custo
$LN53@opus_custo:
	DB	0
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	2
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	3
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	4
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	7
	DB	8
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	9
	npad	1
$LN56@opus_custo:
	DD	$LN22@opus_custo
	DD	$LN38@opus_custo
	DD	$LN35@opus_custo
	DD	$LN7@opus_custo
	DD	$LN10@opus_custo
	DD	$LN9@opus_custo
	DD	$LN3@opus_custo
	DD	$LN2@opus_custo
	DD	$LN1@opus_custo
$LN54@opus_custo:
	DB	0
	DB	8
	DB	1
	DB	8
	DB	2
	DB	8
	DB	8
	DB	3
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	6
	DB	8
	DB	7
_opus_custom_encoder_ctl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT _opus_custom_encoder_get_size
_TEXT	SEGMENT
_size$ = -4						; size = 4
_mode$ = 8						; size = 4
_channels$ = 12						; size = 4
_opus_custom_encoder_get_size PROC			; COMDAT
; File d:\develop\webrtcbuilds-builder\out\src\third_party\opus\src\celt\celt_encoder.c
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 139
	mov	eax, DWORD PTR _mode$[ebp]
	mov	ecx, DWORD PTR _channels$[ebp]
	imul	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _channels$[ebp]
	shl	edx, 10					; 0000000aH
	shl	edx, 2
	lea	eax, DWORD PTR [edx+ecx*4+200]
	imul	ecx, DWORD PTR _channels$[ebp], 3
	mov	edx, DWORD PTR _mode$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	lea	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _size$[ebp], eax
; Line 142
	mov	eax, DWORD PTR _size$[ebp]
; Line 143
	mov	esp, ebp
	pop	ebp
	ret	0
_opus_custom_encoder_get_size ENDP
_TEXT	ENDS
END
